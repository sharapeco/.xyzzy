bool apache_child_terminate ();このリクエストの後にApacheプロセスを終了する
array apache_get_modules ();ロードされた Apache モジュールのリストを取得する
string apache_get_version ();Apache のバージョンを取得する
string apache_getenv ( string variable , [ bool walk_to_top ] );Apache の subprocess_env 変数を取得する
object apache_lookup_uri ( string filename );リクエストの一部を指定したURIに対して行い、全ての情報を返す
string apache_note ( string note_name , [ string note_value ] );Apacheリクエスト記号(note)を取得/設定する
array apache_request_headers ();HTTPリクエストヘッダを全て取得する
bool apache_reset_timeout ();Apache の書き込みタイマーをリセットする
array apache_response_headers ();HTTPレスポンスヘッダを全て取得する
int apache_setenv ( string variable , string value , [ bool walk_to_top ] );Apacheサブプロセスの環境変数を設定する
int ascii2ebcdic ( string ascii_str );ASCIIからEBCDICに文字列を変換する
int ebcdic2ascii ( string ebcdic_str );EBCDICからASCIIに文字列を変換する
array getallheaders ();全てのHTTPリクエストヘッダを取得する
int virtual ( string filename );Apacheサブリクエストを実行する
array array_change_key_case ( array input , [ int case ] );配列のキーを全て小文字または大文字にして返す
array array_chunk ( array input , int size , [ bool preserve_keys ] );配列を分割する
array array_combine ( array keys , array values );一方の配列をキーとして、もう一方の配列を値として、ひとつの配列を生成する
array array_count_values ( array input );配列の値の数を数える
array array_diff_assoc ( array array1 , array array2 , [ array ... ] );追加された添字の確認を含めて配列の差を計算する
array array_diff ( array array1 , array array2 , [ array ... ] );配列の差を計算する
array array_fill ( int start_index , int num , mixed value );配列を指定した値で埋める
array array_filter ( array input , [ callback callback ] );コールバック関数を使用する配列要素フィルタ
array array_flip ( array trans );配列の値を反転にする
array array_intersect_assoc ( array array1 , array array2 , [ array ... ] );追加された添字の確認も含めて配列の共通項を確認する
array array_intersect ( array array1 , array array2 , [ array ... ] );配列の共通項を計算する
bool array_key_exists ( mixed key , array search );指定したキーまたは添字が配列にあるかどうかを調べる
array array_keys ( array input , [ mixed search_value ] , [ bool strict ] );配列のキーをすべて返す
array array_map ( callback callback , array arr1 , [ array ... ] );指定した配列の要素にコールバック関数を適用する
array array_merge_recursive ( array array1 , array array2 , [ array ... ] );二つ以上の配列を再帰的にマージする
array array_merge ( array array1 , [ array array2 ] , [ array ... ] );1つまたは複数の配列をマージする
bool array_multisort ( array ar1 , [ mixed arg ] , [ mixed ... ] , [ array ... ] );複数の多次元の配列をソートする
array array_pad ( array input , int pad_size , mixed pad_value );指定長、指定した値で配列を埋める
mixed array_pop ( array array );配列の末尾から要素を取り除く
int array_push ( array array , mixed var , [ mixed ... ] );一つ以上の要素を配列の最後に追加する
mixed array_rand ( array input , [ int num_req ] );配列から一つ以上の要素をランダムに取得する
mixed array_reduce ( array input , callback function , [ int initial ] );コールバック関数を用いて配列を普通の値に変更することにより、配列を再帰的に減らす
array array_reverse ( array array , [ bool preserve_keys ] );逆順にした配列を返す
mixed array_search ( mixed needle , array haystack , [ bool strict ] );指定した値を配列で検索し、見つかった場合に対応するキーを返す
mixed array_shift ( array array );配列の先頭から要素を一つ取り出す
array array_slice ( array array , int offset , [ int length ] , [ bool preserve_keys ] );配列の一部を展開する
array array_splice ( array input , int offset , [ int length ] , [ array replacement ] );配列の一部を削除し、他の要素で置換する
mixed array_sum ( number arr );配列の中の値の合計を計算する
array array_unique ( array array );配列から重複した値を削除する
int array_unshift ( array array , [ mixed ... ] );一つ以上の要素を配列の最初に加える
array array_values ( array input );配列の全ての値を返す
bool array_walk ( array array , callback funcname , [ mixed userdata ] );配列の全ての要素にユーザー関数を適用する。
array array ( [ mixed ... ] );配列を生成する
bool arsort ( array array , [ int sort_flags ] );連想キーと要素との関係を維持しつつ配列を逆順にソートする
bool arsort ( array array , [ int sort_flags ] );連想キーと要素との関係を維持しつつ配列をソートする
array compact ( mixed varname , [ mixed ... ] );変数名とその値から配列を作成する
int count ( mixed var , [ int mode ] );変数に含まれる要素、あるいはオブジェクトに含まれるプロパティの数を数える
mixed current ( array array );配列内のカレントの要素を返す
array each ( array array );配列から、次のキーと値のペアを返す
mixed end ( array array );配列の内部ポインタを最終要素にセットする
int extract ( array var_array , [ int extract_type ] , [ string prefix ] );配列からシンボルテーブルに変数をインポートする
bool in_array ( mixed needle , array haystack , [ bool strict ] );配列に値があるかチェックする
mixed key ( array array );連想配列からキーを取り出す
bool krsort ( array array , [ int sort_flags ] );配列をキーで逆順にソートする
bool ksort ( array array , [ int sort_flags ] );配列をキーでソートする
void list ( mixed ... , mixed ... );配列と同様の形式で、複数の変数への代入を行います
bool natcasesort ( array array );大文字小文字を区別しない"自然順"アルゴリズムを用いて配列をソートする
void natsort ( array array );"自然順"アルゴリズムで配列をソートする
mixed next ( array array );内部配列ポインタを進める
mixed prev ( array array );内部の配列ポインタを1つ前に戻す
array range ( number low , number high , [ number step ] );ある範囲の整数を有する配列を作成する
mixed reset ( array array );配列の内部ポインタを先頭の要素にセットする
bool rsort ( array array , [ int sort_flags ] );配列を逆順にソートします
bool shuffle ( array array );配列をシャッフルする
bool sort ( array array , [ int sort_flags ] );配列をソートする
bool uasort ( array array , function cmp_function );ユーザー定義の比較関数で配列をソートし、連想インデックスを保持する
bool uksort ( array array , callback cmp_function );ユーザー定義の比較関数を用いてキーで配列をソートします
bool usort ( array array , callback cmp_function );ユーザー定義の比較関数により値で配列をソートします
bool aspell_check_raw ( int dictionary_link , string word );大文字小文字の変更や削除を行うことなく、単語のチェックを行います。
boolean aspell_check ( int dictionary_link , string word );単語をチェックする [古い関数]
int aspell_new ( string master , [ string personal ] );新しい辞書をロードする [古い関数]
array aspell_suggest ( int dictionary_link , string word );単語スペルの修正案を示す [古い関数]
string bcadd ( string left operand , string right operand , int [scale] );2つの任意精度の数値による加算
int bccomp ( string left operand , string right operand , int [scale] );2 つの任意精度数値の比較
string bcdiv ( string left operand , string right operand , int [scale] );2つの任意精度数値による除算
string bcmod ( string left operand , string modulus );2 つの任意精度数値による剰余
string bcmul ( string left operand , string right operand , int [scale] );2つの任意精度数値による乗算
string bcpow ( string x , string y , int [scale] );任意精度数値のべき乗
string bcscale ( int scale );すべての BC 演算関数におけるデフォルトのスケール設定
string bcsqrt ( string operand , int [scale] );任意精度数値の平方根を得ます
string bcsub ( string left operand , string right operand , int [scale] );任意精度数値による減算
int bzclose ( int bz );bzip2ファイルポインタを閉じる
string bzcompress ( string source , [ int blocksize ] , [ int workfactor ] );文字列をbzip2形式のデータに圧縮する
string bzdecompress ( string source , [ int small ] );bzip2形式のデータを解凍する
int bzerrno ( int bz );bzip2エラー番号を返す
array bzerror ( int bz );bzip2エラー番号とエラー文字列を配列で返す
string bzerrstr ( int bz );bzip2エラー文字列を返す
int bzflush ( int bz );全てのバッファリングされたデータを強制的に書き込む
int bzopen ( string filename , string mode );bzip2圧縮されたファイルをオープンする
string bzread ( int bz , [ int length ] );バイナリ対応のbzip2ファイル読み込み
int bzwrite ( int bz , string data , [ int length ] );バイナリ対応のbzip2ファイルへの書き込み
int cal_days_in_month ( int calendar , int month , int year );指定した年とカレンダについて日数を返すcalendar
array cal_from_jd ( int jd , int calendar );ユリウス積算日からサポートされるカレンダに変換し、拡張情報を返す
array cal_info ( int calendar );特定のカレンダに関する情報を返す
int cal_to_jd ( int calendar , int month , int day , int year );サポートされるカレンダからユリウス積算日に変換する
int easter_date ( [ int year ] );指定した年における復活祭の真夜中のUnix時を得る
int easter_days ( int year );指定した年において3月21日以降、復活祭までの日数を得る
int frenchtojd ( int month , int day , int year );フランス革命暦をユリウス積算日に変換する
int gregoriantojd ( int month , int day , int year );グレゴリウス日をユリウス積算日に変換する
mixed jddayofweek ( int julianday , int mode );曜日を返す
string jdmonthname ( int julianday , int mode );月の名前を返す
string jdtofrench ( int juliandaycount );ユリウス積算日をフランス革命暦(共和暦)に変換する
string jdtogregorian ( int julianday );ユリウス積算日をグレゴリウス日に変換する
string jdtojewish ( int julianday );ユリウス積算日をユダヤ暦に変換する
string jdtojulian ( int julianday );ユリウス積算日をユリウス暦に変換する
int jdtounix ( int jday );ユリウス歴をUNIXタイムスタンプに変換する
int jewishtojd ( int month , int day , int year );ユダヤ暦の日付けをユリウス積算日に変換する
int juliantojd ( int month , int day , int year );ユリウス暦をユリウス積算日に変換する
int unixtojd ( int [timestamp] );UNIXタイムスタンプをユリウス歴に変換する
string ccvs_add ( string session , string invoice , string argtype , string argval );トランザクションにデータを追加する
string ccvs_auth ( string session , string invoice );あるトランザクションにおいてクレジット認証を行う
string ccvs_command ( string session , string type , string argval );単一のプロトコルに基づく、一般的なCCVS APIで利用できないコマンドを実行する
int ccvs_count ( string session , string type );システムに保存された指定した型のトランザクション数を得る
string ccvs_delete ( string session , string invoice );トランザクションを削除する
string ccvs_done ( string sess );CCVSエンジンを終了し、クリアする
string ccvs_init ( string name );CCVSを初期化する
string ccvs_lookup ( string session , string invoice , int inum );データベース #にある特定の型の項目を探す
string ccvs_new ( string session , string invoice );新規に空のトランザクションを生成する
string ccvs_report ( string session , string type );バックグラウン通信プロセスの状態を返す
string ccvs_return ( string session , string invoice );クレジットカード所有者に店側から金を伝送する
string ccvs_reverse ( string session , string invoice );処理済みの認証を完全に取り消す
string ccvs_sale ( string session , string invoice );クレジットカード所有者から店側に金を伝送する
string ccvs_status ( string session , string invoice );送付状のステータスを確認する
string ccvs_textvalue ( string session );前の関数コールに関する返り値を取得する
string ccvs_void ( string session , string invoice );完了したトランザクションを完全に取り消す
mixed call_user_method_array ( string method_name , object obj , array paramarr );パラメータの配列を指定してユーザメソッドをコールする[古い関数]
mixed call_user_method ( string method_name , object obj , [ mixed parameter ] , [ mixed ... ] );指定したオブジェクトのユーザーメソッドをコールする[古い関数]
bool class_exists ( string class_name , [ bool autoload ] );クラスが定義済か確認する
array get_class_methods ( string class_name );クラスメソッドの名前を連想配列として返す
array get_class_vars ( string class_name );クラスのデフォルトプロパティを配列として返す
string get_class ( object obj );オブジェクトのクラス名を返す
array get_declared_classes ();定義済のクラスの名前を配列として返す
array get_declared_interfaces ();宣言されている全てのインターフェースの配列を返す
array get_object_vars ( object obj );オブジェクトプロパティを配列として返す
string get_parent_class ( mixed obj );オブジェクトの親クラスの名前を返す
bool interface_exists ( string interface_name , [ bool autoload ] );インターフェースが宣言されているかどうかを確認する
bool is_a ( object object , string class_name );オブジェクトがこのクラスのものであるかこのクラスをその親クラスの１つとしている場合にTRUEを返す
bool is_subclass_of ( object obj , string superclass );あるオブジェクトが指定したクラスのサブクラスに属するかどうかを調べる
bool method_exists ( object object , string method_name );クラスメソッドが存在するかどうかを確認する
bool property_exists ( mixed class , string property );オブジェクトもしくはクラスにプロパティが存在するかどうかを確認する
com COM::COM ( string module_name , [ mixed server_name ] , [ int codepage ] , [ string typelib ] );COMクラス
string VARIANT::VARIANT ( [ mixed value ] , [ int type ] , [ int codepage ] );VARIANT クラス
void com_addref ();コンポーネントリファレンスカウンタを増やす
mixed com_get ( resource com_object , string property );COMコンポーネントのプロパティの値を得る
mixed com_invoke ( resource com_object , string function_name , mixed [function parameters, ...] );COMコンポーネントのメソッドをコールします。
void com_isenum ( object com_module );IEnumVariantを取得する
void com_load_typelib ( string typelib_name , [ int case_insensitive ] );Typelibをロードする
string com_load ( string module name , string [server name] , [ int codepage ] );COMコンポーネントへの新規リファレンスを作成する
mixed com_propget ( resource com_object , string property );COMコンポーネントのプロパティの値を得る
void com_propput ( resource com_object , string property , mixed value );COMコンポーネントのプロパティに値を代入する
void com_propset ( resource com_object , string property , mixed value );COMコンポーネントのプロパティに値を代入する
void com_release ();コンポーネントリファレンスカウンタを減らす [廃止]
void com_set ( resource com_object , string property , mixed value );COMコンポーネントのプロパティに値を代入する
void cpdf_add_annotation ( int pdf document , float llx , float lly , float urx , float ury , string title , string content , int [mode] );注記を追加する
void cpdf_add_outline ( int pdf document , string text );現在のページにブックマークを追加する
void cpdf_arc ( int pdf document , float x-coor , float y-coor , float radius , float start , float end , int mode );円弧を描く
void cpdf_begin_text ( int pdf document );テキストセクションを開始する
void cpdf_circle ( int pdf document , float x-coor , float y-coor , float radius , [ int mode ] );円を描く
void cpdf_clip ( int pdf document );カレントのパスを切り取る
void cpdf_close ( int pdf document );pdf ドキュメントを閉じる
void cpdf_closepath_fill_stroke ( int pdf document );パスを閉じ、塗りつぶし、描く
void cpdf_closepath_stroke ( int pdf document );パスを閉じ、線をパスに沿って描く
void cpdf_closepath ( int pdf document );パスを閉じる
void cpdf_continue_text ( int pdf document , string text );次の行にテキストを出力する
void cpdf_curveto ( int pdf document , float x1 , float y1 , float x2 , float y2 , float x3 , float y3 , int mode );曲線を描く
void cpdf_end_text ( int pdf document );テキストセクションを終了する
void cpdf_fill_stroke ( int pdf document );カレントのパスを塗りつぶし、描く
void cpdf_fill ( int pdf document );カレントのパスを塗りつぶす
void cpdf_finalize_page ( int pdf document , int page number );ページを終了する
void cpdf_finalize ( int pdf document );ドキュメントを終了する
void cpdf_global_set_document_limits ( int maxpages , int maxfonts , int maximages , int maxannotations , int maxobjects );PDFドキュメントの制限を設定する
int cpdf_import_jpeg ( int pdf document , string file name , float x-coor , float y-coor , float angle , float width , float height , float x-scale , float y-scale , int [mode] );JPEG 画像をオープンする
void cpdf_lineto ( int pdf document , float x-coor , float y-coor , int mode );線を描く
void cpdf_moveto ( int pdf document , float x-coor , float y-coor , int mode );カレントのポイントを設定する
void cpdf_newpath ( int pdf document );新規パスを開始する
int cpdf_open ( int compression , string filename );新規pdfドキュメントをオープンする
void cpdf_output_buffer ( int pdf document );pdf ドキュメントをメモリバッファに出力する
void cpdf_page_init ( int pdf document , int page number , int orientation , float height , float width , float unit );新規ページを開始する
void cpdf_place_inline_image ( int pdf document , int image , float x-coor , float y-coor , float angle , float width , float height , int [mode] );画像をページに置く
void cpdf_rect ( int pdf document , float x-coor , float y-coor , float width , float height , int mode );矩形を描く
void cpdf_restore ( int pdf document );以前に保存した環境を回復させる
void cpdf_rlineto ( int pdf document , float x-coor , float y-coor , int mode );線を描く
void cpdf_rmoveto ( int pdf document , float x-coor , float y-coor , int mode );カレントのポイントを設定する
void cpdf_rotate_text ( int pdfdoc , float angle );テキスト回転角を設定する
void cpdf_rotate ( int pdf document , float angle );回転を設定する
void cpdf_save_to_file ( int pdf document , string filename );pdf ドキュメントをファイルに書きこむ
void cpdf_save ( int pdf document );現在の環境を保存する
void cpdf_scale ( int pdf document , float x-scale , float y-scale );倍率を設定する
void cpdf_set_action_url ( int pdfdoc , float xll , float yll , float xur , float xur , string url , [ int mode ] );ハイパーリンクを設定する
void cpdf_set_char_spacing ( int pdf document , float space );文字間隔を設定する
void cpdf_set_creator ( string creator );pdf ドキュメントの creator フィールドを設定する
void cpdf_set_current_page ( int pdf document , int page number );カレントページを設定する
void cpdf_set_font_directories ( int pdfdoc , string pfmdir , string pfbdir );外部フォントを使用した際、検索するディレクトリを設定する
void cpdf_set_font_map_file ( int pdfdoc , string filename );外部フォントを使用している場合、フォント名をファイル名変換マップに設定する
void cpdf_set_font ( int pdf document , string font name , float size , string encoding );フォントの種類とサイズを選択する
void cpdf_set_horiz_scaling ( int pdf document , float scale );テキストの水平方向の倍率を設定する
void cpdf_set_keywords ( string keywords );pdfドキュメントのkeywords フィールドを設定する
void cpdf_set_leading ( int pdf document , float distance );テキスト行の間隔を設定する
void cpdf_set_page_animation ( int pdf document , int transition , float duration );ページ間の移行時間を設定する
void cpdf_set_subject ( string subject );pdfドキュメントのsubject フィールドを設定する
void cpdf_set_text_matrix ( int pdf document , array matrix );テキスト行列を設定する
void cpdf_set_text_pos ( int pdf document , float x-coor , float y-coor , int mode );テキスト位置を設定する
void cpdf_set_text_rendering ( int pdf document , int mode );テキストのレンダリング法を定義する
void cpdf_set_text_rise ( int pdf document , float value );テキストの高さを設定する
void cpdf_set_title ( string title );pdf ドキュメントの title フィールドを設定する
void cpdf_set_viewer_preferences ( int pdfdoc , array preferences );ドキュメントのビューワ上での表示方法を設定する
void cpdf_set_word_spacing ( int pdf document , float space );単語間の間隔を設定する
void cpdf_setdash ( int pdf document , float white , float black );破線のパターンを設定する
void cpdf_setflat ( int pdf document , float value );flatness を設定する
void cpdf_setgray_fill ( int pdf document , float value );塗りつぶし色をグレー値に設定する
void cpdf_setgray_stroke ( int pdf document , float gray value );描画色をグレー値に設定する
void cpdf_setgray ( int pdf document , float gray value );描画、塗りつぶし色をグレー値に設定する
void cpdf_setlinecap ( int pdf document , int value );linecap パラメータを設定する
void cpdf_setlinejoin ( int pdf document , long value );linejoin パラメータを設定するparameter
void cpdf_setlinewidth ( int pdf document , float width );線幅を設定する
void cpdf_setmiterlimit ( int pdf document , float value );miter のリミットを設定する
void cpdf_setrgbcolor_fill ( int pdf document , float red value , float green value , float blue value );塗りつぶし色をRGBカラー値に設定する
void cpdf_setrgbcolor_stroke ( int pdf document , float red value , float green value , float blue value );描画色をRGBカラー値に設定する
void cpdf_setrgbcolor ( int pdf document , float red value , float green value , float blue value );描画色および塗りつぶし色をRGB値に設定??
void cpdf_show_xy ( int pdf document , string text , float x-coor , float y-coor , [ int mode ] );指定位置にテキストを出力する
void cpdf_show ( int pdf document , string text );現在位置にテキストを出力する
float cpdf_stringwidth ( int pdf document , string text );カレントフォントのテキストの幅を返す
void cpdf_stroke ( int pdf document );パスに沿って線を描く
void cpdf_text ( int pdf document , string text , float x-coor , float y-coor , [ int mode ] , [ float orientation ] , [ int alignmode ] );テキストをパラメータを元に出力する
void cpdf_translate ( int pdf document , float x-coor , float y-coor , [ int mode ] );座標系の原点を設定する
bool crack_check ( resource dictionary , string password );指定したパスワードに関して強度チェックを行う
bool crack_closedict ( [ resource dictionary ] );オープンされているCrackLib辞書を閉じる
string crack_getlastmessage ();直近の強度チェックからのメッセージを返す
resource crack_opendict ( string dictionary );新規CrackLib辞書をオープンする
bool ctype_alnum ( string text );英数字かどうかを調べる
bool ctype_alpha ( string c );英字かどうかを調べる
bool ctype_cntrl ( string text );制御文字かどうかを調べる
bool ctype_digit ( string c );数字かどうかを調べる
bool ctype_graph ( string c );空白以外の印字可能な文字かどうかを調べる
bool ctype_lower ( string c );小文字かどうかを調べる
bool ctype_print ( string c );印字可能な文字かどうかを調べる
bool ctype_punct ( string text );空白、英数字以外の出力可能な文字かどうかを調べる
bool ctype_space ( string c );空白文字かどうか調べる
bool ctype_upper ( string text );大文字かどうか調べる
bool ctype_xdigit ( string c );16進数を表す文字かどうかを調べる
void curl_close ( int ch );CURLセッションを閉じる
int curl_errno ( resource ch );直近のエラー番号を意味する整数を返す
string curl_error ( int ch );カレントのセッションに関して直近のエラー文字列を返す
bool curl_exec ( int ch );CURLセッションを実行する
string curl_getinfo ( resource ch , [ int opt ] );指定した伝送に関する情報を得る
int curl_init ( string [url] );CURLセッションを初期化
bool curl_setopt ( resource ch , int option , mixed value );CURL転送用オプションを設定する
string curl_version ();カレントのCURLのバージョンを返す
string cybercash_base64_decode ( string inbuff );BASE64デコードを行う
string cybercash_base64_encode ( string inbuff );BASE64エンコードを行う
array cybercash_decr ( string wmk , string sk , string inbuff );Cybercash復号化
array cybercash_encr ( string wmk , string sk , string inbuff );Cybercash暗号化
string cybermut_creerformulairecm ( string url_CM , string version , string TPE , string montant , string ref_commande , string texte_libre , string url_retour , string url_retour_ok , string url_retour_err , string langue , string code_societe , string texte_bouton );支払リクエスト用HTMLフォームを生成
string cybermut_creerreponsecm ( string phrase );支払い確認用画面を生成する
bool cybermut_testmac ( string code_MAC , string version , string TPE , string cdate , string montant , string ref_commande , string texte_libre , string code-retour );受信した確認用メッセージに虚偽のデータが含まれていないことを確認する
bool cyrus_authenticate ( resource connection , [ string mechlist ] , [ string service ] , [ string user ] , [ int minssf ] , [ int maxssf ] );Cyrus IMAPサーバに対する認証を行う
bool cyrus_bind ( resource connection , array callbacks );Cyrus IMAP接続へのコールバックをバインドする
bool cyrus_close ( resource connection );cyrusサーバへの接続を閉じる
resource cyrus_connect ( [ string host ] , [ string port ] , [ int flags ] );Cyrus IMAPサーバに接続する
bool cyrus_query ( resource connection , string query );Cyrus IMAPサーバへクエリを送信する
bool cyrus_unbind ( resource connection , string trigger_name );Unbind ...
int checkdate ( int month , int day , int year );グレグリオ歴の日付/時刻の妥当性を確認します
string date ( string format , [ int timestamp ] );ローカルの日付/時刻を書式化する
array getdate ( [ int timestamp ] );日付/時刻情報の取得
array gettimeofday ();現在の時間を得る
string gmdate ( string format , [ int timestamp ] );GMT/CUT の日付／時刻を書式化
int gmmktime ( [ int hour ] , [ int minute ] , [ int second ] , [ int month ] , [ int day ] , [ int year ] , [ int is_dst ] );GMT日付によるUNIXタイムスタンプを取得する
string gmstrftime ( string format , [ int timestamp ] );ロケールの設定に基づきGMT/CUT 時刻/日付をフォーマットする
int idate ( string format , [ int timestamp ] );ローカルな時刻/日付を整数として整形する
array localtime ( [ int timestamp ] , [ bool is_associative ] );ローカルタイムを得る
mixed microtime ( [ bool get_as_float ] );現在のUnixタイムスタンプをマイクロ秒まで返す
int mktime ( [ int hour ] , [ int minute ] , [ int second ] , [ int month ] , [ int day ] , [ int year ] , [ int is_dst ] );日付を UNIX のタイムスタンプとして取得する
string strftime ( string format , [ int timestamp ] );ローカルな設定に基づきローカルな日付・時間をフォーマットします
int strtotime ( string time , [ int now ] );英文形式の日付をUNIXタイムスタンプに変換する
int time ();現在の UNIX タイムスタンプを返す
void dba_close ( int handle );データベースを閉じる
bool dba_delete ( string key , int handle );キーが指すエントリを削除する
bool dba_exists ( string key , int handle );キーが存在するかどうかを確認する
string dba_fetch ( string key , int handle );キーが指すデータを取得する
string dba_firstkey ( int handle );最初のキーを取得する
array dba_handlers ();利用可能なハンドラの一覧を得る
bool dba_insert ( string key , string value , int handle );エントリを挿入する
array dba_list ();オープンされているデータベースファイルを全リストを得る
string dba_nextkey ( int handle );次のキーを取得する
resource dba_open ( string path , string mode , string handler , [ ... ] );データベースをオープンする
bool dba_optimize ( int handle );データベースを最適化する
int dba_popen ( string path , string mode , string handler , [...] );データベースを持続的にオープンする
bool dba_replace ( string key , string value , int handle );エントリを置換または挿入する
bool dba_sync ( int handle );データベースを同期する
bool dbase_add_record ( int dbase_identifier , array record );dBase データベースにレコードを追加する
bool dbase_close ( int dbase_identifier );dBase データベースを閉じる
int dbase_create ( string filename , array fields );dBase データベースを作成する
bool dbase_delete_record ( int dbase_identifier , int record );dBase データベースからレコードを削除する
array dbase_get_record_with_names ( int dbase_identifier , int record );dBaseデータベースからレコードを連想配列として得る
array dbase_get_record ( int dbase_identifier , int record );dBase データベースからレコードを得る
int dbase_numfields ( int dbase_identifier );dBase データベースにおけるフィールド数を返す
int dbase_numrecords ( int dbase_identifier );dBase データベースにおけるレコード数を返す
int dbase_open ( string filename , int flags );dBase データベースをオープンする
bool dbase_pack ( int dbase_identifier );dBase データベースをパックする
bool dbase_replace_record ( int dbase_identifier , array record , int dbase_record_number );dBase データベースのレコードを置換する
string dblist ();使用されているDBM互換ライブラリの一覧を返す
bool dbmclose ( int dbm_identifier );dbm データベースを閉じます
bool dbmdelete ( int dbm_identifier , string key );dbm データベースから値を削除します
bool dbmexists ( int dbm_identifier , string key );dbm データベースにキー検索を行います
string dbmfetch ( int dbm_identifier , string key );dbm データベースからキーの値を取り出します
string dbmfirstkey ( int dbm_identifier );dbm データベースから最初のキーを取り出します
int dbminsert ( int dbm_identifier , string key , string value );dbm データベースへの値の挿入
string dbmnextkey ( int dbm_identifier , string key );dbm データベースから次のキーを取り出します
int dbmopen ( string filename , string flags );DBMデータベースをオープンします
bool dbmreplace ( int dbm_identifier , string key , string value );dbm データベース中の値を置き換えます
int dbplus_add ( resource relation , array tuple );関係にタプルを追加する
resource dbplus_aql ( string query , [ string server ] , [ string dbpath ] );AQLクエリを実行する
string dbplus_chdir ( [ string newdir ] );データベース仮想カレントディレクトリを設定/取得
int dbplus_close ( resource relation );関係を閉じる
int dbplus_curr ( resource relation , array tuple );関係からカレントのタプルを取得
string dbplus_errcode ( int errno );指定したエラーコードまたは直近のエラーに関するエラー文字列を取得する
int dbplus_errno ();直近の操作に関するエラーコードを取得する
int dbplus_find ( resource relation , array constraints , mixed tuple );関係に拘束を設定する
int dbplus_first ( resource relation , array tuple );関係から最初のタプルを取得する
int dbplus_flush ( resource relation );関係に行った全ての変更をフラッシュする
int dbplus_freealllocks ();このクライアントにより保持された全てのロックを解放する
int dbplus_freelock ( resource relation , string tname );タプルの書き込みロックを解放する
int dbplus_freerlocks ( resource relation );指定した関係に関する全てのタプルロックを解放する
int dbplus_getlock ( resource relation , string tname );タプルの書き込みロックを取得する
int dbplus_getunique ( resource relation , int uniqueid );あうる関係のユニークなID番号を取得する
int dbplus_info ( resource relation , string key , array );???
int dbplus_last ( resource relation , array tuple );関係から直近のタプルを取得する
int dbplus_lockrel ( resource relation );関係に書き込みロックを要求する
int dbplus_next ( resource relation , array );関係から次のタプルを取得する
resource dbplus_open ( string name );関係ファイルをオープンする
int dbplus_prev ( resource relation , array tuple );関係から前のタプルを取得する
int dbplus_rchperm ( resource relation , int mask , string user , string group );関係の許可属性を変更する
resource dbplus_rcreate ( string name , mixed domlist , [ boolean overwrite ] );関係を新規に作成する
resource dbplus_rcrtexact ( string name , resource relation , boolean overwrite );
resource dbplus_rcrtlike ( string name , resource relation , int flag );
int dbplus_resolve ( string relation_name );関係のホスト情報を取得する
int dbplus_restorepos ( resource relation , array tuple );???
resource dbplus_rkeys ( resource relation , mixed domlist );関係の主キーを新規に指定する
resource dbplus_ropen ( string name );関係ファイルをローカルにオープンする
int dbplus_rquery ( string query , string dbpath );ローカルに(raw) AQLクエリを実行する
int dbplus_rrename ( resource relation , string name );関係の名前を変更する
resource dbplus_rsecindex ( resource relation , mixed domlist , int type );関係に新規セカンダリインデックスを作成する
int dbplus_runlink ( resource relation );ファイルシステムから関係を削除する
int dbplus_rzap ( resource relation );関係から全てのタプルを削除する
int dbplus_savepos ( resource relation );???
int dbplus_setindex ( resource relation , string idx_name );???
int dbplus_setindexbynumber ( resource relation , int idx_number );???
resource dbplus_sql ( string query , string server , string dbpath );SQLクエリを実行する
int dbplus_tcl ( int sid , string script );サーバ側でTCLコードを実行する
int dbplus_tremove ( resource relation , array tuple , [ array current ] );タプルを削除し、新規カレントタプルを返す
int dbplus_undo ( resource relation );???
int dbplus_undoprepare ( resource relation );???
int dbplus_unlockrel ( resource relation );関係の書き込みロックを中断する
int dbplus_unselect ( resource relation );関係から制約を削除する
int dbplus_update ( resource relation , array old , array new );関係の指定したタプルを更新する
int dbplus_xlockrel ( resource relation );関係の排他的ロックを要求する
int dbplus_xunlockrel ( resource relation );関係の排他的ロックを解放する
boolean dbx_close ( dbx_link_object link_identifier );オープンされた接続/データベースを閉じる
int dbx_cmp_asc ( array row_a , array row_b , string columnname_or_index , [ int comparison_type ] );昇順にソートするために二つのレコードを比較する
int dbx_compare ( array row_a , array row_b , string columnname_or_index , [ int flags ] );ソートするために二つのレコードを比較する
dbx_link_object dbx_connect ( string module , string host , string database , string username , string password , [ int persistent ] );接続/データベースをオープンする
string dbx_error ( dbx_link_object link_identifier );(接続時だけでなく)使用するモジュールの最新の関数コールにおけるエラーメッセージを出力する
dbx_result_object dbx_query ( dbx_link_object link_identifier , string sql_statement , [ long flags ] );クエリを送信し、(ある場合には)結果を全て取得する
boolean dbx_sort ( dbx_result_object result , string user_compare_function );カスタマイズされたsort関数により、dbx_queryから結果をソートする
void dio_close ( resource fd );fdで指定したファイル記述子を閉じる
mixed dio_fcntl ( resource fd , int cmd , [ mixed arg ] );fdについてCライブラリのfcntlを実行する
resource dio_open ( string filename , int flags , [ int mode ] );許可属性flagsと作成許可属性modeを指定して新規にfilenameをオープンする
string dio_read ( resource fd , [ int n ] );fdからnバイト読みこんで返す。nが指定されない場合は、1kブロックを読みこむ
int dio_seek ( resource fd , int pos , int whence );fd上でwhenceからposに移動する
array dio_stat ( resource fd );ファイル記述子fdに関するstat情報を取得する
dio_tcsetattr ( resource fd , array options );シリアルポートの端末属性とボーレートを設定する
bool dio_truncate ( resource fd , int offset );ファイル記述子fdをオフセットバイトへ丸める
int dio_write ( resource fd , string data , [ int len ] );オプションで丸め長さを指定してデータを書き込む
bool chdir ( string directory );ディレクトリを変更します
bool chroot ( string directory );ルートディレクトリを変更する
string read ();ディレクトリ・クラス
void closedir ( resource dir_handle );ディレクトリ・ハンドルをクローズします
string getcwd ();カレントのワーキングディレクトリを取得する
resource opendir ( string path );ディレクトリ・ハンドルのオープン
string readdir ( resource dir_handle );ディレクトリ・ハンドルからのエントリ読み込み
void rewinddir ( resource dir_handle );ディレクトリ・ハンドルを元に戻します
array scandir ( string directory , [ int sorting_order ] );指定されたパスのファイルとディレクトリのリストを取得する
bool DomAttribute->name ();属性の名前を返す
bool DomAttribute->specified ();属性が指定されているかどうか調べる
bool DomAttribute->value ();属性の値を返す
resource DomDocument->add_root ( string name );ルートノードを追加する
object DomDocument->create_attribute ( string name , string value );新規属性を作成する
string DomDocument->create_cdata_section ( string content );新規cdataノードを作成する
object DomDocument->create_comment ( string content );新規コメントノードを作成する
object DomDocument->create_element ( string name );新規エレメントノードを作成する
object DomDocument->create_entity_reference ( string content );
string DomDocument->create_processing_instruction ( string content );新規PIノードを作成する
object DomDocument->create_text_node ( string content );新規テキストノードを作成する
object DomDocument->doctype ();ドキュメント型を返す
object DomDocument->document_element ();ルートエレメントノードを返す
string DomDocument->dump_file ( string filename , [ bool compressionmode ] , [ bool format ] );内部XMLツリーをファイルにダンプする
string DomDocument->dump_mem ( [ bool format ] );内部XMLツリーを文字列にダンプする
object DomDocument->get_element_by_id ( string id );
array DomDocument->get_elements_by_tagname ( string name );
string DomDocument->html_dump_mem ();HTMLとして文字列に内部XMLツリーをダンプする
array DomDocumentType->entities ();エントリのリスト返す
bool DomDocumentType->internal_subset ();内部サブセットを返す
string DomDocumentType->name ();ドキュメントの型名を返す
array DomDocumentType->notations ();ノーテーションのリストを返す
string DomDocumentType->public_id ();document typeのpublic IDを返す
string DomDocumentType->system_id ();document typeのsystem IDを返す
object DomElement->get_attribute_node ( object attr );属性の値を返す
object DomElement->get_attribute ( string name );属性の値を返す
bool DomElement->get_elements_by_tagname ( string name );タグ名により要素を取得する
bool DomElement->has_attribute ( string name );属性があるかどうかを調べる
bool DomElement->remove_attribute ( string name );属性を削除する
bool DomElement->set_attribute_node ( object attr );新規属性を設定する
bool DomElement->set_attribute ( string name , string value );新規属性を追加する
string DomElement->tagname ();要素名を返す
object DomNode->append_child ( object newnode );子ノードの最後に新規に子ノードを追加する
object DomNode->append_sibling ( object newnode );新規に兄弟をノードに追加する
array DomNode->attributes ();属性のリストを返す
array DomNode->child_nodes ();子ノードを返す
object DomNode->clone_node ();ノードの複製を作る
string DomNode->dump_node ();ノードを１つダンプする
bool DomNode->first_child ();最初の子ノードを返す
string DomNode->get_content ();ノードのコンテンツを取得する
bool DomNode->has_attributes ();ノードが属性を有しているかを調べる
bool DomNode->has_child_nodes ();ノードが子ノードを有しているかを調べる
object DomNode->insert_before ( object newnode , object refnode );新規ノードを子ノードとして挿入する
bool DomNode->is_blank_node ();ノードが空かどうか調べる
object DomNode->last_child ();最後の子ノードを返す
object DomNode->next_sibling ();次の兄弟ノードを返す
string DomNode->node_name ();ノード名を返す
int DomNode->node_type ();ノードの型を返す
string DomNode->node_value ();ノードの値を返す
object DomNode->owner_document ();このノードが属するドキュメントを返す
object DomNode->parent_node ();親ノードを返す
string DomNode->prefix ();ノードの名前空間接頭辞を返す
object DomNode->previous_sibling ();前の兄弟ノードを返す
object DomNode->remove_child ( object oldchild );子ノードのリストから子ノードを削除する
object DomNode->replace_node ();ノードを置換する
bool DomNode->set_content ();ノードのコンテンツを設定する
bool DomNode->set_name ();ノードの名前を設定する
object DomNode->unlink_node ();ノードを削除する
string DomProcessingInstruction->data ();PIノードのデータを返す
string DomProcessingInstruction->target ();PIノードのターゲットを返す
object domxml_new_doc ( string version );空のXMLドキュメントを作成する
object domxml_open_file ( string filename );XMLファイルからDOMオブジェクトを作成する
object domxml_open_mem ( string str );XMLドキュメントからDOMオブジェクトを作成する
string domxml_version ();XMLライブラリのバージョンを取得する
object domxml_xmltree ( string str );XMLドキュメントからPHPオブジェクトツリーを作成する
array xpath_eval_expression ( object xpath_context );指定した文字列のXPathロケーション式を評価する
array xpath_eval ( object xpath context );指定した文字列のXPathロケーションを評価する
object xpath_new_context ( object dom document );新規xpathコンテキストを作成する
int xptr_eval ( [ object xpath_context ] , string eval_str );指定した文字列のXPtrロケーションパスを評価する
string xptr_new_context ( [ object doc_handle ] );新規XPathコンテキストを作成する
int dotnet_load ( string assembly_name , [ string datatype_name ] , [ int codepage ] );DOTNETモジュールをロードする
array debug_backtrace ();バックトレースを生成する
int error_log ( string message , int message_type , string [destination] , string [extra_headers] );エラーメッセージを送信する
int error_reporting ( [ int level ] );出力するPHPエラーの種類を設定する
void restore_error_handler ();以前のエラーハンドラ関数を回復する
mixed set_error_handler ( callback error_handler , [ int error_types ] );ユーザ定義のエラーハンドラ関数を設定する
string set_exception_handler ( callback exception_handler );ユーザ定義の例外ハンドラ関数を設定する
void trigger_error ( string error_msg , int [error_type] );ユーザレベルのエラー/警告/通知メッセージを生成する
void user_error ( string error_msg , int [error_type] );ユーザレベルのエラー/警告/通知メッセージを発生する
string escapeshellarg ( string arg );シェル引数として使用される文字列をエスケープする
string escapeshellcmd ( string command );シェルのメタ文字をエスケープする
string exec ( string command , [ array output ] , [ int return_var ] );外部プログラムを実行します
void passthru ( string command , [ int return_var ] );外部プログラムを実行し、未整形の出力を表示します
int proc_close ( resource process );proc_open で開かれたプロセスを閉じ、そのプロセスのリターンコードを得る
array proc_get_status ( resource process );proc_open で開かれたプロセスに関する情報を取得する
resource proc_open ( string cmd , array descriptorspec , array pipes );コマンドを実行し、入出力用にファイルポインタを開く
string shell_exec ( string cmd );シェルによりコマンドを実行し、文字列として出力全体を返す
string system ( string command , [ int return_var ] );外部プログラムの実行と表示
bool fam_cancel_monitor ( resource fam , resource fam_monitor );監視を終了する
() fam_close ( resource fam );FAM接続を閉じる
resource fam_monitor_collection ( resource fam , string dirname , int depth , string mask );指定したディレクトリにあるファイルの変更を監視する
resource fam_monitor_directory ( resource fam , string dirname );ディレクトリの変更を監視する
resource fam_monitor_file ( resource fam , string filename );通常のファイルの変更を監視する
array fam_next_event ( resource fam );次のイベントを返す
resource fam_open ( [ string appname ] );FAMデーモンへの接続をオープンする
bool fam_pending ( resource fam );待機中のFAMイベントの有無を調べる
bool fam_resume_monitor ( resource fam , resource fam_monitor );中断された監視処理を再開する
bool fam_suspend_monitor ( resource fam , resource fam_monitor );監視を一時的に中断する
int fbsql_affected_rows ( [ int link_identifier ] );直近のFrontBase処理により作用を受けたレコードの数を得る
bool fbsql_autocommit ( resource link_identifier , [ bool OnOff ] );autocommitを有効または無効にする
resource fbsql_change_user ( string user , string password , [ string database ] , [ int link_identifier ] );アクティブな接続にログインしているユーザを変更する
boolean fbsql_close ( [ resource link_identifier ] );FrontBase接続を閉じる
bool fbsql_commit ( [ resource link_identifier ] );データベースへのトランザクションをコミットする
resource fbsql_connect ( [ string hostname ] , [ string username ] , [ string password ] );FrontBaseサーバへの接続をオープンする
string fbsql_create_blob ( string blob_data , [ resource link_identifier ] );BLOBを生成する
string fbsql_create_clob ( string clob_data , [ resource link_identifier ] );CLOBを生成する
bool fbsql_create_db ( string database name , [ resource link_identifier ] );FrontBaseデータベースを作成する
bool fbsql_data_seek ( resource result_identifier , int row_number );内部結果ポインタを移動する
string fbsql_database_password ( resource link_identifier , [ string database_password ] );FrontBaseデータベースのパスワードを設定または取得する
string fbsql_database ( resource link_identifier , [ string database ] );No description given yet
resource fbsql_db_query ( string database , string query , [ resource link_identifier ] );FrontBaseクエリを送信する
int fbsql_db_status ( string database_name , [ resource link_identifier ] );指定したデータベースのステータスを取得する
bool fbsql_drop_db ( string database_name , [ resource link_identifier ] );FrontBaseデータベースを破棄(削除)する
int fbsql_errno ( [ resource link_identifier ] );前のFrontBase演算からエラーメッセージの数値的な値を返します。
string fbsql_error ( [ resource link_identifier ] );前のFrontBase操作からエラーメッセージのテキストを返す
array fbsql_fetch_array ( resource result , [ int result_type ] );連想配列、数値配列、または両方として結果レコードを取得する
array fbsql_fetch_assoc ( resource result );連想配列として結果レコードを取得する
object fbsql_fetch_field ( resource result , [ int field_offset ] );結果からカラム情報を得て、オブジェクトとして返す
array fbsql_fetch_lengths ( [ resource result ] );結果の各出力の長さを得る
object fbsql_fetch_object ( resource result , [ int result_type ] );オブジェクトとして結果レコードを取得する
array fbsql_fetch_row ( resource result );数値配列として結果レコードを得る
string fbsql_field_flags ( resource result , int field_offset );クエリ結果において指定したフィールドに関するフラグを得る
int fbsql_field_len ( resource result , int field_offset );指定したフィールドの長さを返す
string fbsql_field_name ( resource result , int field_index );結果の指定したフィールドの名前を得る
bool fbsql_field_seek ( resource result , int field_offset );指定したフィールドオフセットに結果ポインタを設定する
string fbsql_field_table ( resource result , int field_offset );指定したフィールドがあるテーブルの名前を得る
string fbsql_field_type ( resource result , int field_offset );結果の中で指定したフィールドの型を得る
bool fbsql_free_result ( int result );結果メモリを開放する
array fbsql_get_autostart_info ( [ resource link_identifier ] );No description given yet
string fbsql_hostname ( resource link_identifier , [ string host_name ] );No description given yet
int fbsql_insert_id ( [ resource link_identifier ] );直近のINSERT処理により生成されたIDを得る
resource fbsql_list_dbs ( [ resource link_identifier ] );FrontBaseサーバで利用可能なデータベースの一覧を得る
resource fbsql_list_fields ( string database_name , string table_name , [ resource link_identifier ] );FrontBase結果フィールドの一覧を得る
resource fbsql_list_tables ( string database , [ resource link_identifier ] );FrontBaseデータベースのテーブル一覧を得る
bool fbsql_next_result ( int result_id );内部結果ポインタを次の結果に移動する
int fbsql_num_fields ( resource result );結果のフィールド数を得る
int fbsql_num_rows ( resource result );結果のレコード数を得る
string fbsql_password ( resource link_identifier , [ string password ] );No description given yet
resource fbsql_pconnect ( [ string hostname ] , [ string username ] , [ string password ] );FrontBaseサーバへの持続的接続をオープンする
resource fbsql_query ( string query , [ resource link_identifier ] );FrontBaseクエリを送信する
string fbsql_read_blob ( string blob_handle , [ resource link_identifier ] );データベースからBLOBを読み込む
string fbsql_read_clob ( string clob_handle , [ resource link_identifier ] );データベースからCLOBを読み込む
mixed fbsql_result ( resource result , int row , [ mixed field ] );結果データを得る
bool fbsql_rollback ( [ resource link_identifier ] );データベースへのトランザクションをロールバックする
bool fbsql_select_db ( string database_name , [ resource link_identifier ] );FrontBaseデータベースを選択する
bool fbsql_set_lob_mode ( resource result , string database_name );FrontBase結果セットのLOB取得モードを設定する
void fbsql_set_transaction ( resource link_identifier , int Locking , int Isolation );トランザクションのロックとアイソレーションを設定する
bool fbsql_start_db ( string database_name , [ resource link_identifier ] );ローカルまたはリモートサーバのデータベースを開始する
bool fbsql_stop_db ( string database_name , [ resource link_identifier ] );ローカルまたはリモートサーバのデータベースを停止する
string fbsql_tablename ( resource result , int i );フィールドのテーブル名を得る
string fbsql_username ( resource link_identifier , [ string username ] );No description given yet
bool fbsql_warnings ( [ bool OnOff ] );FrontBase警告を有効または無効にする
bool fdf_add_template ( resource fdfdoc , int newpage , string filename , string template , int rename );テンプレートをFDFに追加する
bool fdf_close ( int fdf_document );FDF ドキュメントを閉じる
int fdf_create ( void );新規 FDF ドキュメントを作成する
string fdf_get_file ( int fdf_document );/F キーの値を得る
string fdf_get_status ( int fdf_document );/STATUS キーの値を得る
string fdf_get_value ( int fdf_document , string fieldname );フィールドの値を得る
bool fdf_header ();FDF 固有の出力ヘッダをセットする
string fdf_next_field_name ( int fdf_document , [ string fieldname ] );次のフィールド名を得る
int fdf_open ( string filename );FDF ドキュメントをオープンする
int fdf_save ( string filename );FDF ドキュメントを保存する
bool fdf_set_ap ( int fdf_document , string field_name , int face , string filename , int page_number );フィールドの外観を設定する
bool fdf_set_encoding ( int fdf_document , string encoding );FDF文字エンコーディング
bool fdf_set_file ( int fdf_document , string filename );/F キーの値を設定する
bool fdf_set_flags ( int fdf_document , string fieldname , int whichFlags , int newFlags );フィールドのフラグを設定する
bool fdf_set_javascript_action ( int fdf_document , string fieldname , int trigger , string script );フィールドの javascript アクションを設定する
bool fdf_set_opt ( int fdf_document , string fieldname , int element , string str1 , string str2 );フィールドのオプションを設定する
bool fdf_set_status ( int fdf_document , string status );/STATUS キーの値を設定する
bool fdf_set_submit_form_action ( int fdf_document , string fieldname , int trigger , string script , int flags );フィールドのjavascriptアクションを設定する
bool fdf_set_value ( int fdf_document , string fieldname , string value , int isName );フィールドの値を設定する
int filepro_fieldcount ();filePro データベース中のフィールド数を返します
string filepro_fieldname ( int field_number );フィールド名を取得する
string filepro_fieldtype ( int field_number );フィールド型を取得する
int filepro_fieldwidth ( int field_number );フィールド幅を得る
string filepro_retrieve ( int row_number , int field_number );filePro データベースのデータを検索します
int filepro_rowcount ();filePro データベースの行の数を返します
bool filepro ( string directory );map ファイルの読み込みと照合を行う
string basename ( string path , [ string suffix ] );パス中のファイル名の部分を返す
int chgrp ( string filename , mixed group );ファイルのグループを変更する
int chmod ( string filename , int mode );ファイルのモードを変更する
int chown ( string filename , mixed user );ファイルの所有者を変更する
void clearstatcache ();ファイルのステータスのキャッシュをクリアする
int copy ( string source , string dest );ファイルをコピーする
string dirname ( string path );パス中のディレクトリ名の部分を返す
float disk_free_space ( string directory );ディレクトリの利用可能なスペースを返す
float disk_total_space ( string directory );ディレクトリの全体サイズを返す
float diskfreespace ( string directory );disk_free_spaceへのエイリアス
bool fclose ( resource handle );オープンされたファイルポインタをクローズする
bool feof ( resource handle );ファイルポインタがファイル終端に達しているかどうか調べる
bool fflush ( resource handle );出力をファイルにフラッシュする
string fgetc ( resource handle );ファイルポインタから1文字取り出す
array fgetcsv ( resource handle , int length , [ string delimiter ] , [ string enclosure ] );ファイルポインタから行を取得し、CSVフィールドを処理する
string fgets ( resource handle , [ int length ] );ファイルポインタから1行取得する
string fgetss ( resource handle , [ int length ] , [ string allowable_tags ] );ファイルポインタから1行取り出し、HTMLタグを取り除く
bool file_exists ( string filename );ファイルまたはディレクトリが存在するかどうか調べる
string file_get_contents ( string filename [, bool use_include_path = false [, resource context = null [, int offset = -1 [, int maxlen ]]]] );ファイルの内容を全て文字列に読み込む
int file_put_contents ( string filename , string data , [ int flags ] , [ resource context ] );文字列をファイルに書き込む
array file ( string filename , [ int use_include_path ] , [ resource context ] );ファイル全体を読み込んで配列に格納する
int fileatime ( string filename );ファイルの最終アクセス時刻を取得する
int filectime ( string filename );ファイルのinode変更時刻を取得する
int filegroup ( string filename );ファイルのグループを取得する
int fileinode ( string filename );ファイルのinodeを取得する
int filemtime ( string filename );ファイルの更新時刻を取得する
int fileowner ( string filename );ファイルの所有者を取得する
int fileperms ( string filename );ファイルの許可属性を取得する
int filesize ( string filename );ファイルのサイズを取得する
string filetype ( string filename );ファイルタイプを取得する
bool flock ( resource handle , int operation , [ int &wouldblock ] );汎用のファイルロックを行う
bool fnmatch ( string pattern , string string , [ int flags ] );ファイル名がパターンにマッチするか調べる
resource fopen ( string filename , string mode , [ int use_include_path ] , [ resource zcontext ] );ファイルまたはURLをオープンする
int fpassthru ( resource handle );ファイルポインタ上に残っているすべてのデータを出力する
string fread ( resource handle , int length );バイナリ・モードでファイルを読み込む
mixed fscanf ( resource handle , string format , [ string var1 ] );フォーマットに基づきファイルからの入力を処理する
int fseek ( resource handle , int offset , [ int whence ] );ファイルポインタを移動する
array fstat ( resource handle );オープンしたファイルポインタからファイルに関する情報を得ます
int ftell ( resource handle );ファイルポインタから読み書きの位置を取得する
bool ftruncate ( resource handle , int size );ファイルを指定した長さに丸める
int fwrite ( resource handle , string string , [ int length ] );バイナリ・モードによるファイル書き込み
array glob ( string pattern , [ int flags ] );パターンにマッチするパス名を探す
bool is_dir ( string filename );ファイルがディレクトリかどうかを調べる
bool is_executable ( string filename );ファイルが実行可能かどうかを調べる
bool is_file ( string filename );通常ファイルかどうかを調べる
bool is_link ( string filename );ファイルがシンボリックリンクかどうかを調べる
bool is_readable ( string filename );ファイルが読み込み可能かどうかを知る
bool is_uploaded_file ( string filename );HTTP POSTによりアップロードされたファイルかどうかを調べる
bool is_writable ( string filename );ファイルが書き込み可能かどうかを調べる
bool is_writeable ( string filename );is_writableのエイリアス
int link ( string target , string link );ハードリンクを作成する
int linkinfo ( string path );リンクに関する情報を取得する
array lstat ( string filename );ファイルまたはシンボリックリンクに関する情報を与えます
bool mkdir ( string pathname , [ int mode ] , [ bool recursive ] , [ resource context ] );ディレクトリを作る
bool move_uploaded_file ( string filename , string destination );新しい位置にアップロードされたファイルを移動する
array parse_ini_file ( string filename , [ bool process_sections ] );設定ファイルをパースする
array pathinfo ( string path , [ int options ] );ファイルパスに関する情報を返す
int pclose ( int handle );プロセスのファイルポインタをクローズする
int popen ( string command , string mode );プロセスへのファイルポインタをオープンする
int readfile ( string filename , [ bool use_include_path ] , [ resource context ] );ファイルを出力する
string readlink ( string path );シンボリックリンク先を返す
string realpath ( string path );絶対パス名を返す
int rename ( string oldname , string newname );ファイルをリネームする
bool rewind ( resource handle );ファイルポインタの位置を先頭に戻す
bool rmdir ( string dirname );ディレクトリを削除する
array stat ( string filename );ファイルに関する情報を取得する
bool symlink ( string target , string link );シンボリックリンクを作成する
string tempnam ( string dir , string prefix );ユニークなファイル名を生成する
resource tmpfile ();テンポラリファイルを作成する
bool touch ( string filename , [ int time ] , [ int atime ] );ファイルの最終更新日をセットする
int umask ( [ int mask ] );現在のumaskを変更する
bool unlink ( string filename , [ resource context ] );ファイルを削除する
string fribidi_log2vis ( string str , string direction , int charset );論理文字列を可視文字列に変換する
bool ftp_cdup ( resource ftp_stream );親ディレクトリに移動する
bool ftp_chdir ( resource ftp_stream , string directory );FTP サーバー上でディレクトリを移動する
void ftp_close ( resource ftp_stream );FTP接続を閉じる
resource ftp_connect ( string host , [ int port ] , [ int timeout ] );FTP 接続をオープンする
bool ftp_delete ( resource ftp_stream , string path );ftp サーバー上のファイルを削除する
bool ftp_exec ( resource stream , string command );ftpサーバでプログラム実行する
bool ftp_fget ( resource ftp_stream , resource fp , string remote_file , int mode );FTP サーバーからファイルをダウンロードし、オープン中のファイルに保存する
bool ftp_fput ( resource ftp_stream , string remote_file , resource fp , int mode );オープン中のファイルをFTPサーバーにアップロードする
bool ftp_get_option ( resource stream , int option );カレントのFTPストリームの種々の実行動作を取得する
bool ftp_get ( resource ftp_stream , string local_file , string remote_file , int mode );FTPサーバーからファイルをダウンロードする
bool ftp_login ( resource ftp_stream , string username , string password );FTP 接続でログインする
int ftp_mdtm ( resource ftp_stream , string remote_file );指定したファイルが最後に修正された時間を返す
string ftp_mkdir ( resource ftp_stream , string directory );ディレクトリを作成する
array ftp_nlist ( resource ftp_stream , string directory );指定したディレクトリのファイルの一覧を返す
bool ftp_pasv ( resource ftp_stream , bool pasv );パッシブモードをオンまたはオフにする
bool ftp_put ( resource ftp_stream , string remote_file , string local_file , int mode );FTP サーバーにファイルをアップロードする
string ftp_pwd ( resource ftp_stream );現在のディレクトリ名を返す
void ftp_quit ( resource ftp_stream );FTP接続を閉じる
array ftp_rawlist ( resource ftp_stream , string directory );指定したディレクトリの詳細なファイル一覧を返す
bool ftp_rename ( resource ftp_stream , string from , string to );ftp サーバー上のファイルの名前を変更する
bool ftp_rmdir ( resource ftp_stream , string directory );ディレクトリを削除する
bool ftp_set_option ( resource stream , int option , mixed value );FTP実行オプションを設定する
bool ftp_site ( resource ftp_stream , string cmd );SITEコマンドをサーバーに送信する
int ftp_size ( resource ftp_stream , string remote_file );指定したファイルのサイズを返す
resource ftp_ssl_connect ( string host , [ int port ] , [ int timeout ] );セキュアな FTP 接続をオープンする
string ftp_systype ( resource ftp_stream );リモート FTP サーバーのシステム型IDを返す
mixed call_user_func_array ( callback function , [ array param_arr ] );パラメータの配列を指定してユーザ関数をコールする
mixed call_user_func ( callback function , [ mixed parameter ] , [ mixed ... ] );最初の引数で指定したユーザ関数をコールする
string create_function ( string args , string code );匿名関数(ラムダ形式)を作成する
mixed func_get_arg ( int arg_num );引数のリストから要素を1つ返す
array func_get_args ();関数の引数リストを配列として返す
int func_num_args ( void );関数に渡された引数の数を返す
bool function_exists ( string function_name );指定した関数が定義されている場合にTRUEを返す
array get_defined_functions ( void );定義済みの全ての関数を配列で返す
int register_shutdown_function ( string func );シャットダウン時に実行する関数を登録する
void register_tick_function ( string func , [ mixed arg ] );各tickで実行する関数を登録する
void unregister_tick_function ( string func , [ mixed arg ] );各tickの実行用の関数の登録を解除する
string bind_textdomain_codeset ( string domain , string codeset );DOMAINメッセージカタログからのメッセージが変更される文字エンコーディングを指定する
string bindtextdomain ( string domain , string directory );ドメインのパスを設定する
string dcgettext ( string domain , string message , int category );単一の参照に関するドメインを上書きする
string dcngettext ( string domain , string msgid1 , string msgid2 , int n , int category );dcgettext()の複数版
string dgettext ( string domain , string message );カレントのドメインを上書きする
string dngettext ( string domain , string msgid1 , string msgid2 , int n );dcgettext()の複数型です
string gettext ( string message );カレントドメインのメッセージの参照する
string ngettext ( string msgid1 , string msgid2 , int n );gettextの複数版
string textdomain ( string text_domain );デフォルトドメインを設定する
resource gmp_abs ( resource a );絶対値
resource gmp_add ( resource a , resource b );数値の加算
resource gmp_and ( resource a , resource b );論理演算 AND
resource gmp_clrbit ( resource &a , int index );ビットをクリアする
int gmp_cmp ( resource a , resource b );数を比較する
resource gmp_com ( resource a );aの補数を計算する
resource gmp_div_q ( resource a , resource b , int [round] );数値の割算
array gmp_div_qr ( resource n , resource d , int [round] );割算を行い、商と余りを得る
resource gmp_div_r ( resource n , resource d , int [round] );割算の余り
resource gmp_div ( resource a , resource b );割算を行う
resource gmp_divexact ( resource n , resource d );正確な割算
resource gmp_fact ( int a );階乗
resource gmp_gcd ( resource a , resource b );最大公約数を計算する
array gmp_gcdext ( resource a , resource b );最大公約数と乗数を計算する
int gmp_hamdist ( resource a , resource b );ハミング距離
resource gmp_init ( mixed number );GMP 数を作成する
int gmp_intval ( resource gmpnumber );GMP 数を整数に変換する
resource gmp_invert ( resource a , resource b );法による逆
int gmp_jacobi ( resource a , resource p );ヤコビ記号
int gmp_legendre ( resource a , resource p );ルジェンドル記号
resource gmp_mod ( resource n , resource d );モジュロ演算
resource gmp_mul ( resource a , resource b );数値の乗算
resource gmp_neg ( resource a );符号を反転する
resource gmp_or ( resource a , resource b );論理演算 OR
bool gmp_perfect_square ( resource a );平方数かどうかを調べる
int gmp_popcount ( resource a );カウントを増やす
resource gmp_pow ( resource base , int exp );累乗
resource gmp_powm ( resource base , resource exp , resource mod );累乗とモジュロ
int gmp_prob_prime ( resource a , int [reps] );数が"ほぼ素数"であるかどうかを調べる
resource gmp_random ( int limiter );乱数
int gmp_scan0 ( resource a , int start );0を探す
int gmp_scan1 ( resource a , int start );1 を探す
resource gmp_setbit ( resource &a , int index , bool [set_clear] );ビットを設定する
int gmp_sign ( resource a );数の符号
resource gmp_sqrt ( resource a );平方根
array gmp_sqrtrm ( resource a );余りと平方根
string gmp_strval ( resource gmpnumber , int [base] );GMP 数を文字列に変換する
resource gmp_sub ( resource a , resource b );数値の減算
resource gmp_xor ( resource a , resource b );論理演算 XOR
void header ( string string , [ bool replace ] , [ int http_response_code ] );生のHTTPヘッダを送信する
bool headers_sent ( [ string &file ] , [ int &line ] );ヘッダーが既に送信されているかどうかチェックする
bool setcookie ( string name , [ string value ] , [ int expire ] , [ string path ] , [ string domain ] , [ int secure ] );クッキーを送信する
strin hw_array2objrec ( array object_array );オブジェクト配列からオブジェクトレコードに属性を変換する
void hw_changeobject ( int link , int objid , array attributes );オブジェクトの属性を変更する(古い関数)
array hw_children ( int connection , int objectID );子のオブジェクト ID
array hw_childrenobj ( int connection , int objectID );子のオブジェクトレコード
int hw_close ( int connection );Hyperwave 接続を閉じる
int hw_connect ( string host , int port , string username , string password );接続をオープンする
void hw_connection_info ( int link );Hyperwaveサーバへの接続に関する情報を出力する
int hw_cp ( int connection , array object_id_array , int destination id );オブジェクトをコピーする
int hw_deleteobject ( int connection , int object_to_delete );オブジェクトを削除する
int hw_docbyanchor ( int connection , int anchorID );アンカーに属するオブジェクトのオブジェクト ID
string hw_docbyanchorobj ( int connection , int anchorID );アンカーが指すオブジェクトレコード
string hw_document_attributes ( int hw_document );hw_document のオブジェクトレコード
string hw_document_bodytag ( int hw_document );hw_document の BODY タグ
string hw_document_content ( int hw_document );hw_documentの内容を返す
string hw_document_setcontent ( int hw_document , string content );hw_document の内容を設定/置換する
int hw_document_size ( int hw_document );hw_document のサイ?
string hw_dummy ( int link , int id , int msgid );Hyperwaveダミー関数
int hw_edittext ( int connection , int hw_document );テキストドキュメントを取得する
int hw_error ( int connection );エラー番号
string hw_errormsg ( int connection );エラーメッセージを返す
int hw_free_document ( int hw_document );hw_document を解放する
array hw_getanchors ( int connection , int objectID );ドキュメントのアンカーのオブジェクト ID
array hw_getanchorsobj ( int connection , int objectID );ドキュメントのアンカーのオブジェクトレコード
string hw_getandlock ( int connection , int objectID );オブジェクトレコードを返しおよびオブジェクトをロックする
array hw_getchildcoll ( int connection , int objectID );子のコレクションのオブジェクト ID
array hw_getchildcollobj ( int connection , int objectID );子のコレクションのオブジェクトレコード
array hw_getchilddoccoll ( int connection , int objectID );コレクションの子ドキュメントのオブジェクト ID
array hw_getchilddoccollobj ( int connection , int objectID );コレクションの子ドキュメントのオブジェクトレコード
array hw_getobject ( int connection , [int|array] objectID , string query );オブジェクトレコード
array hw_getobjectbyquery ( int connection , string query , int max_hits );オブジェクトを検索する
array hw_getobjectbyquerycoll ( int connection , int objectID , string query , int max_hits );コレクションのオブジェクトを検索する
array hw_getobjectbyquerycollobj ( int connection , int objectID , string query , int max_hits );コレクションのオブジェクトを検索する
array hw_getobjectbyqueryobj ( int connection , string query , int max_hits );オブジェクトを朧?する
array hw_getparents ( int connection , int objectID );親のオブジェクト ID
array hw_getparentsobj ( int connection , int objectID );親のオブジェクトレコード
string hw_getrellink ( int link , int rootid , int sourceid , int destid );rootidに相対的なsourceからdestへのリンクを得る
int hw_getremote ( int connection , int objectID );リモートドキュメントを得る
int hw_getremotechildren ( int connection , string object record );リモートドキュメントの子を得る
array hw_getsrcbydestobj ( int connection , int objectID );オブジェクトを指すアンカーを返す
int hw_gettext ( int connection , int objectID , mixed [rootID/prefix] );テキストドキュメントを取得する
string hw_getusername ( int connection );現在ログインしているユーザーの名前
int hw_identify ( string username , string password );ユーザーとして認証する
array hw_incollections ( int connection , array object_id_array , array collection_id_array , int return_collections );コレクションにオブジェクト ID があるかどうかを確認する
string hw_info ( int connection );接続に関する情報
int hw_inscoll ( int connection , int objectID , array object_array );コレクションを挿入する
int hw_insdoc ( int connection , int parentID , string object_record , string text );ドキュメントを挿入する
string hw_insertanchors ( int hwdoc , array anchorecs , array dest , [ array urlprefixes ] );textにアンカーのみを挿入する
int hw_insertdocument ( int connection , int parent_id , int hw_document );ドキュメントをアップロードする
int hw_insertobject ( int connection , string object rec , string parameter );オブジェクトレコードを挿入する
int hw_mapid ( int connection , int server id , int object id );グローバルIDを仮想的なローカルIDに割りつける
int hw_modifyobject ( int connection , int object_to_change , array remove , array add , int mode );オブジェクトレコードを修正する
int hw_mv ( int connection , array object id array , int source id , int destination id );オブジェクトを移動する
int hw_new_document ( string object_record , string document_data , int document_size );新しいドキュメントを作成する
array hw_objrec2array ( string object_record , array [format] );属性をオブジェクトレコードからオブジェクト配列に変換する
int hw_output_document ( int hw_document );hw_document を出力する
int hw_pconnect ( string host , int port , string username , string password );持続的データベース接続を作成する
int hw_pipedocument ( int connection , int objectID );ドキュメントを取得する
int hw_root ( );ルートオブジェクト ID
void hw_setlinkroot ( int link , int rootid );計算されたリンクのIDを設定するSet the id to which links are calculated
string hw_stat ( int link );ステータス文字列を返す
int hw_unlock ( int connection , int objectID );オブジェクトをアンロックする
int hw_who ( int connection );現在ログイン中のユーザーのリスト
int ibase_blob_add ( int blob_id , string data );生成されたblobにデータを追加する
int ibase_blob_cancel ( int blob_id );blobの生成を取り消す
int ibase_blob_close ( int blob_id );blobを閉じる
int ibase_blob_create ( [ int link_identifier ] );データを追加するためにblobを生成する
int ibase_blob_echo ( string blob_id_str );ブラウザにblobの内容を出力する
string ibase_blob_get ( int blob_id , int len );オープンしたblobからデータのバイト数を取得する
string ibase_blob_import ( [ int link_identifier ] , int file_id );blobを生成し、ファイルをコピーし、閉じる
object ibase_blob_info ( string blob_id_str );blobの長さと他の便利な情報を返す
int ibase_blob_open ( string blob_id );データの一部を取得するためにblobをオープンする
int ibase_close ( int [connection_id] );InterBaseデータベースへの接続を閉じる
int ibase_commit ( int [link_identifier] , int trans_number );トランザクションをコミットする
int ibase_connect ( string database , string [username] , string [password] , string [charset] , int [buffers] , int [dialect] , string [role] );InterBaseデータベースへの接続をオープンする
string ibase_errmsg ();エラーメッセージを返す
int ibase_execute ( int query , int [bind_args] );準備されたクエリを実行する
object ibase_fetch_object ( int result_id );InterBaseデータベースからオブジェクトを得る
array ibase_fetch_row ( int result_identifier );InterBaseデータベースから1行分の結果を取得する
array ibase_field_info ( int result , int field number );フィールドに関する情報を得る
int ibase_free_query ( int query );準備されたクエリにより確保されたメモリを解放する
int ibase_free_result ( int result_identifier );結果セットを解放する
int ibase_num_fields ( int result_id );結果セットにおけるフィールド数を得る
int ibase_pconnect ( string database , string [username] , string [password] , string [charset] , int [buffers] , int [dialect] , string [role] );InterBaseデータベースへの持続的接続をオープンする
int ibase_prepare ( int [link_identifier] , string query );後でパラメータのバインド及び実行するためにクエリを準備する
int ibase_query ( int [link_identifier] , string query , int [bind_args] );InterBaseデータベースでクエリを実行する
int ibase_rollback ( int [link_identifier] , int trans_number );トランザクションをロールバックする
int ibase_timefmt ( string format , int [columntype] );クエリーから返されるtimestamp、data、time型カラムのフォーマットを設定する
int ibase_trans ( int [trans_args] , int [link_identifier] );トランザクションを開始する
int icap_close ( int icap_stream , [ int flags ] );ICAP ストリームを閉じる
string icap_create_calendar ( int stream_id , string calendar );新規カレンダを作成する
string icap_delete_calendar ( int stream_id , string calendar );カレンダを削除する
string icap_delete_event ( int sream_id , int uid );ICAP カレンダーからイベントを削除する
int icap_fetch_event ( int stream_id , int event_id , [ int options ] );カレンダーストリームからイベントを取得する
int icap_list_alarms ( int stream_id , array date , array time );指定した datetime までにアラームを発生するイベントのリストを返す
array icap_list_events ( int stream_id , int begin_date , [ int end_date ] );指定した二つの datetime 間のイベントのリストを返す
stream icap_open ( string calendar , string username , string password , string options );ICAP 接続をオープンする
string icap_rename_calendar ( int stream_id , string old_name , string new_name );カレンダの名前を変える
int icap_reopen ( int stream_id , string calendar , [ int options ] );新規カレンダへのICAPストリームを再オープンする
string icap_snooze ( int stream_id , int uid );イベントのアラームをオフにする
int icap_store_event ( int stream_id , object event );ICAP カレンダーにイベントを保存します
mixed iconv_get_encoding ( [ string type ] );iconv拡張モジュールの内部設定変数を取得する
bool iconv_set_encoding ( string type , string charset );文字エンコーディング変換用の設定を行なう
string iconv ( string in_charset , string out_charset , string str );文字列を指定した文字エンコーディングに変換する
array ob_iconv_handler ( string contents , int status );出力バッファハンドラとして文字エンコーディングを変換する
int ifx_affected_rows ( int result_id );クエリーで作用された行の数を得る
void ifx_blobinfile_mode ( int mode );全ての select クエリーに関するデフォルトの BLOB モードを設定する
void ifx_byteasvarchar ( int mode );デフォルトのバイトモードを設定する
int ifx_close ( int [link_identifier] );Informix 接続を閉じる
int ifx_connect ( string [database] , string [userid] , string [password] );Informix サーバーへの接続をオープンする
int ifx_copy_blob ( int bid );指定した BLOB オブジェクトを2重化する
int ifx_create_blob ( int type , int mode , string param );BLOB オブジェクトを作成する
int ifx_create_char ( string param );文字オブジェクトを作成する
int ifx_do ( int result_id );事前に準備された SQL 文を実行する
string ifx_error ();直近の Informix コールのエラーコードを返す
string ifx_errormsg ( int [errorcode] );直近の Informix コールのエラーメッセージを返す
array ifx_fetch_row ( int result_id , mixed [position] );配列として行を得る
array ifx_fieldproperties ( int result_id );SQL フィールドプロパティのリスト
array ifx_fieldtypes ( int result_id );Informix SQL フィールドのリスト
int ifx_free_blob ( int bid );BLOB オブジェクトを削除する
int ifx_free_char ( int bid );文字オブジェクトを削除する
int ifx_free_result ( int result_id );クエリーに関するリソースを解放する
int ifx_get_blob ( int bid );BLOB オブジェクトの内容を返す
int ifx_get_char ( int bid );文字オブジェクトの内容を返す
array ifx_getsqlca ( int result_id );クエリ実行後、sqlca.sqlerrd[0..5] の値を得る
int ifx_htmltbl_result ( int result_id , string [html_table_options] );クエリー結果の全行を HTML テーブルにフォーマットする
void ifx_nullformat ( int mode );S取得する行のデフォルトの返り値を設定する
int ifx_num_fields ( int result_id );クエリーのカラム数を返します
int ifx_num_rows ( int result_id );クエリーから既に取得された行の数を数える
int ifx_pconnect ( string [database] , string [userid] , string [password] );持続的 Informix 接続をオープンする
int ifx_prepare ( string query , int conn_id , int [cursor_def] , mixed blobidarray );SQL 文を実行用に準備する
int ifx_query ( string query , int [link_identifier] , int [cursor_type] , mixed [blobidarray] );Informix クエリーを送信する
void ifx_textasvarchar ( int mode );デフォルトのテキストモードを設定する
ifx_update_blob ( int bid , string content );BLOB オブジェクトの内容を更新する
int ifx_update_char ( int bid , string content );文字オブジェクトの内容を更新する
int ifxus_close_slob ( int bid );SLOB オブジェクトを削除する
int ifxus_create_slob ( int mode );SLOB オブジェクトを作成し、オープンする
int ifxus_free_slob ( int bid );SLOB オブジェクトを削除する
int ifxus_open_slob ( long bid , int mode );SLOB オブジェクトをオープンする
int ifxus_read_slob ( long bid , long nbytes );SLOB オブジェクトから n バイト読みこむ
int ifxus_seek_slob ( long bid , int mode , long offset );現在のファイル位置またはシーク位置を返す
int ifxus_tell_slob ( long bid );カレントのファイルまたはシーク位置を返す
int ifxus_write_slob ( long bid , string content );SLOB オブジェクトに文字列を書きこむ
int iis_add_server ( string path , string comment , string server_ip , int port , string host_name , int rights , int start_server );新規に仮想Webサーバを作成する
int iis_get_dir_security ( int server_instance , string virtual_path );ディレクトリのセキュリティを取得する
int iis_get_script_map ( int server_instance , string virtual_path , string script_extension );指定した拡張子に関して仮想ディレクトリにおけるスクリプトマッピングを取得する
int iis_get_server_by_comment ( string comment );指定したコメントのインスタンス番号を返す
int iis_get_server_by_path ( string path );指定したパスのインスタンス番号を返す
int iis_get_server_rights ( int server_instance , string virtual_path );サーバの権限を取得する
int iis_get_service_state ( string service_id );サービスID指定したサービスの状態を取得する
int iis_remove_server ( int server_instance );サーバインスタンスで指定した仮想Webサーバを削除する
int iis_set_app_settings ( int server_instance , string virtual_path , string application_scope );仮想ディレクトリでのアプリケーションスコープを作成する
int iis_set_dir_security ( int server_instance , string virtual_path , int directory_flags );ディレクトリのセキュリティを設定する
int iis_set_script_map ( int server_instance , string virtual_path , string script_extension , string engine_path , int allow_scripting );仮想ディレクトリにスクリプトマッピングを設定する
int iis_set_server_rights ( int server_instance , string virtual_path , int directory_flags );サーバの権限を設定する
int iis_start_server ( int server_instance );仮想Webサーバを起動する
int iis_start_service ( string service_id );サービスIDで指定したサービスを起動する
int iis_stop_server ( int server_instance );仮想Webサーバを停止する
int iis_stop_service ( string service_id );サービスIDで指定したサービスを停止する
int exif_imagetype ( string filename );イメージの型を定義する
array exif_read_data ( string filename , [ string sections ] , [ bool arrays ] , [ bool thumbnail ] );JPEGまたはTIFFからEXIFヘッダを読みこむ
string exif_thumbnail ( string filename , [ int &width ] , [ int &height ] , [ int &imagetype ] );TIFFまたはJPEGイメージに埋め込まれたサムネイルを取得する
array gd_info ();現在インストールされているGDライブラリに関する情報を取得する
array getimagesize ( string filename , [ array imageinfo ] );画像の大きさを取得する
string image_type_to_mime_type ( int imagetype );getimagesize, exif_read_data, exif_thumbnail, exif_imagetypeから返される画像形式のMIMEタイプを取得する
int image2wbmp ( int im , [ string filename ] , [ int threshold ] );ブラウザまたはファイルにイメージを出力する
int imagealphablending ( resource im , bool blendmode );イメージをblendingモードに設定する
bool imageantialias ( int im , bool on );アンチエイリアス機能を使用すべきかどうかを判断する
int imagearc ( int im , int cx , int cy , int w , int h , int s , int e , int color );部分楕円の描画
int imagechar ( int im , int font , int x , int y , string c , int color );水平に文字を描画
int imagecharup ( resource image , int font , int x , int y , string c , int color );垂直に文字を描画
int imagecolorallocate ( resource image , int red , int green , int blue );画像で使用する色を作成する
int imagecolorallocatealpha ( resource image , int red , int green , int blue , int alpha );画像で使用する色を透過度を指定して作成する
int imagecolorat ( int image , int x , int y );ピクセルの色のインデックスを取得
int imagecolorclosest ( int image , int red , int green , int blue );指定した色に最も近い色のインデックスを取得する
int imagecolorclosestalpha ( resource image , int red , int green , int blue , int alpha );指定した色+アルファ値に最も近い色のIDを取得
int imagecolorclosesthwb ( resource image , int red , int green , int blue );指定した色に最も近い色合い、白、黒を有する色のインデックスを得る
int imagecolordeallocate ( resource image , int color );イメージの色リソースを開放する
int imagecolorexact ( resource image , int red , int green , int blue );指定した色のインデックスを取得する
int imagecolorexactalpha ( resource image , int red , int green , int blue , int alpha );指定した色+アルファ値のIDを取得
bool imagecolormatch ( resource image1 , resource image2 );パレットイメージの色をTrueカラーイメージに近づける
int imagecolorresolve ( int im , int red , int green , int blue );指定した色または出来るだけ近い色のインデックスを得る
int imagecolorresolvealpha ( resource image , int red , int green , int blue , int alpha );指定した色+アルファ値または最も近い色のIDを取得する
bool imagecolorset ( resource image , int index , int red , int green , int blue );指定したパレットインデックスの色を設定する
array imagecolorsforindex ( resource image , int index );カラーインデックスからカラーの取得
int imagecolorstotal ( resource image );画像パレットの色数の検出
int imagecolortransparent ( resource image , [ int color ] );透明色の定義
int imagecopy ( resource dst_im , resource src_im , int dst_x , int dst_y , int src_x , int src_y , int src_w , int src_h );画像の一部をコピーする
int imagecopymerge ( resource dst_im , resource src_im , int dst_x , int dst_y , int src_x , int src_y , int src_w , int src_h , int pct );イメージの一部をコピー、マージする
int imagecopymergegray ( resource dst_im , resource src_im , int dst_x , int dst_y , int src_x , int src_y , int src_w , int src_h , int pct );グレースケールでイメージの一部をコピー、マージする
int imagecopyresampled ( resource dst_im , resource src_im , int dstX , int dstY , int srcX , int srcY , int dstW , int dstH , int srcW , int srcH );再サンプリングを行いイメージの一部をコピー、伸縮する
int imagecopyresized ( resource dst_im , resource src_im , int dstX , int dstY , int srcX , int srcY , int dstW , int dstH , int srcW , int srcH );画像の一部の複製とサイズ変更
int imagecreate ( int x_size , int y_size );パレットを使用する新規画像の作成
int imagecreatefromgd ( string filename );GDファイルまたはURLから新規イメージを生成する
int imagecreatefromgd2 ( string filename );GD2ファイルまたはURLから新規イメージを生成する
int imagecreatefromgd2part ( string filename , int srcX , int srcY , int width , int height );GD2ファイルまたはURLの指定した部分から新規イメージを生成する
int imagecreatefromgif ( string filename );ファイルまたはURLから新規画像を作成
int imagecreatefromjpeg ( string filename );ファイル又はURLから新規JPEG画像を作成する
int imagecreatefrompng ( string filename );ファイルまたはURLから新規PNG画像を作成する
int imagecreatefromstring ( string image );文字列の中のイメージストリームから新規イメージを作成する
int imagecreatefromwbmp ( string filename );ファイルまたはURLから新規イメージを作成する
int imagecreatefromxbm ( string filename );ファイル又はURLから新規イメージを生成する
int imagecreatefromxpm ( string filename );ファイルまたはURLから新規イメージを生成する
resource imagecreatetruecolor ( int x_size , int y_size );TrueColorイメージを新規に作成する
int imagedashedline ( int im , int x1 , int y1 , int x2 , int y2 , int col );ダッシュライン(破線)の描画
int imagedestroy ( resource image );画像の消去
int imageellipse ( resource image , int cx , int cy , int w , int h , int color );楕円を描画する
int imagefill ( resource image , int x , int y , int color );塗り潰し
int imagefilledarc ( resource image , int cx , int cy , int w , int h , int s , int e , int color , int style );部分楕円を描画し、塗りつぶす
int imagefilledellipse ( resource image , int cx , int cy , int w , int h , int color );塗りつぶされた楕円を描画する
int imagefilledpolygon ( resource image , array points , int num_points , int color );塗りつぶした多角形の描画
int imagefilledrectangle ( resource image , int x1 , int y1 , int x2 , int y2 , int color );塗りつぶした矩形の描画
int imagefilltoborder ( resource image , int x , int y , int border , int color );特定色での塗りつぶし
int imagefontheight ( int font );フォントの高さの取得
int imagefontwidth ( int font );フォントの幅の取得
array imageftbbox ( int size , int angle , string font_file , string text , [ array extrainfo ] );freetype2によるフォントを用いたテキストを囲む箱を取得する
array imagefttext ( int im , int size , int angle , int x , int y , int col , string font_file , string text , [ array extrainfo ] );FreeType 2によるフォントを用いてイメージにテキストを描画する
int imagegammacorrect ( int image , float inputgamma , float outputgamma );GDイメージにガンマ補正を適用する
int imagegd ( resource image , [ string filename ] );GDイメージをブラウザまたはファイルに出力する
int imagegd2 ( resource image , [ string filename ] , [ int chunk_size ] , [ int type ] );GD2イメージをブラウザまたはファイルに出力する
bool imagegif ( resource image , [ string filename ] );ブラウザーまたはファイルへ画像を出力する
int imageinterlace ( resource image , [ int interlace ] );インターレースを有効もしくは無効にする
bool imageistruecolor ( resource image );画像がtrueカラーかどうか調べる
int imagejpeg ( resource image , [ string filename ] , [ int quality ] );画像をブラウザまたはファイルに出力する
int imageline ( resource image , int x1 , int y1 , int x2 , int y2 , int color );直線の描画
int imageloadfont ( string file );新規フォントのロード
int imagepalettecopy ( resource destination , resource source );あるイメージから他のイメージにパレットをコピーする
int imagepng ( resource image , [ string filename ] );PNGイメージをブラウザまたはファイルに出力する
int imagepolygon ( resource image , array points , int num_points , int color );多角形の描画
array imagepsbbox ( string text , int font , int size , [ int space ] , [ int tightness ] , [ float angle ] );PostScript Type1 フォントを用いてテキスト矩形のバウンディングボックスを指定する
int imagepscopyfont ( int fontindex );後で修正するためにロード済みのフォントのコピーを作成する
int imagepsencodefont ( int font_index , string encodingfile );フォントの文字エンコードベクトルを変更する
bool imagepsextendfont ( int font_index , float extend );フォントを展開または圧縮する
void imagepsfreefont ( int fontindex );PostScript Type 1 フォント用メモリを解放する
int imagepsloadfont ( string filename );ファイルから PostScript Type 1 フォントをロードする
bool imagepsslantfont ( int font_index , float slant );フォントを傾ける
array imagepstext ( resource image , string text , int font , int size , int foreground , int background , int x , int y , [ int space ] , [ int tightness ] , [ float angle ] , [ int antialias_steps ] );PostScript Type1 フォントを用いて画像の上に文字列を描く
int imagerectangle ( int image , int x1 , int y1 , int x2 , int y2 , int col );矩形の描画
resource imagerotate ( resource src_im , float angle , int bgd_color );指定された角度で画像を回転する
int imagesetbrush ( resource image , resource brush );線の描画用にブラシイメージを設定する
int imagesetpixel ( resource image , int x , int y , int color );点の生成
int imagesetstyle ( resource im , array style );線描画用のスタイルを設定する
void imagesetthickness ( resource image , int thickness );線描画用の線幅を設定する
int imagesettile ( resource image , resource tile );塗りつぶし用のイメージを設定する
int imagestring ( int image , int font , int x , int y , string s , int col );文字列を水平に描画する
int imagestringup ( int image , int font , int x , int y , string s , int col );文字列を垂直に描画する
int imagesx ( resource image );画像の幅を取得
int imagesy ( resource image );画像の高さを取得する
void imagetruecolortopalette ( resource im , bool dither , int ncolors );TrueColorイメージをパレットイメージに変換する
array imagettfbbox ( int size , int angle , string fontfile , string text );TypeTypeフォントを使用したテキストのbounding boxの生成
array imagettftext ( resource image , int size , int angle , int x , int y , int color , string fontfile , string text );TrueTypeフォントを使用したテキストの出力
int imagetypes ();使用中のPHPの実行ファイルでサポートされているイメージの型を返す
int imagewbmp ( resource image , [ string filename ] , [ int foreground ] );ブラウザまたはファイルにイメージを出力する
array iptcembed ( string iptcdata , string jpeg_file_name , [ int spool ] );バイナリIPTCデータをJPEGイメージに埋めこむ
array iptcparse ( string iptcblock );バイナリのIPTChttp://www.IPTC.org/ブロックをパースする
int jpeg2wbmp ( string jpegname , string wbmpname , int d_height , int d_width , int threshold );JPEGイメージファイルからWBMPイメージファイルに変換する
int png2wbmp ( string pngname , string wbmpname , int d_height , int d_width , int threshold );PNGイメージファイルからWBMPイメージファイルに変換する
string imap_8bit ( string string );8bit 文字列を quoted-printable 文字列に変換する
array imap_alerts ();ページリクエストの間または最後にスタックがリセットされて以来発生した全てのIMAP警告メッセージを返す
int imap_append ( int imap_stream , string mbox , string message , string [flags] );指定されたメールボックスに文字列メッセージを追加する
string imap_base64 ( string text );BASE64 でエンコードされたテキストのデコード
string imap_binary ( string string );8ビット文字列をbase64文字列に変換する
string imap_body ( int imap_stream , int msg_number , int [flags] );メッセージ本文を読む
object imap_bodystruct ( int stream_id , int msg_no , int section );指定したメッセージの指定したbodyセクションの構造を読み込む
object imap_check ( int imap_stream );現在のメールボックスをチェックする
string imap_clearflag_full ( int stream , string sequence , string flag , string options );メッセージのフラグをクリアする
int imap_close ( int imap_stream , int [flags] );IMAP ストリームをクローズする
int imap_createmailbox ( int imap_stream , string mbox );新しいメールボックスを作る
int imap_delete ( int imap_stream , int msg_number , int [flags] );現在のメールボックスから削除するメッセージに印を付ける
int imap_deletemailbox ( int imap_stream , string mbox );メールボックスを削除する
array imap_errors ();ページのリクエストの間かエラースタックがリセットされて以来生じた全てのIMAPエラーを返す
int imap_expunge ( int imap_stream );削除用にマークされたすべてのメッセージを削除する
array imap_fetch_overview ( int imap_stream , string sequence );指定したメッセージのヘッダ情報の概要を読む
string imap_fetchbody ( int imap_stream , int msg_number , string part_number , flags [flags] );メッセージ本文中の特定のセクションを取り出す
string imap_fetchheader ( int imap_stream , int msgno , int flags );メッセージのヘッダを返す
object imap_fetchstructure ( int imap_stream , int msg_number , int [flags] );特定のメッセージの構造を読み込む
array imap_get_quota ( int imap_stream , string quota_root );クオータレベルの設定、メールボックス毎の使用状況を取得する
array imap_getmailboxes ( int imap_stream , string ref , string pattern );メールボックスのリストを読み込み、各ボックスに関する詳細な情報を返す
array imap_getsubscribed ( int imap_stream , string ref , string pattern );購読中の全メールボックスの一覧
object imap_header ( int imap_stream , int msg_number , int [fromlength] , int [subjectlength] , string [defaulthost] );メッセージのヘッダを読む
object imap_headerinfo ( int imap_stream , int msg_number , int [fromlength] , int [subjectlength] , string [defaulthost] );メッセージヘッダを読み込む
array imap_headers ( int imap_stream );メールボックス内の、すべてのメッセージのヘッダを返す
string imap_last_error ();ページリクエスト時に生じた直近の IMAP エラーを返す
array imap_listmailbox ( int imap_stream , string ref , string pattern );メールボックスのリストを読む
array imap_listsubscribed ( int imap_stream , string ref , string pattern );購読中のすべてのメールボックス一覧
string imap_mail_compose ( array envelope , array body );指定したエンベロープおよびボディーセクションに基づきMIMEメッセージを作成
int imap_mail_copy ( int imap_stream , string msglist , string mbox , int [flags] );指定されたメッセージをメールボックスにコピーする
int imap_mail_move ( int imap_stream , string msglist , string mbox , int [flags] );指定されたメッセージをメールボックスに移動する
string imap_mail ( string to , string subject , string message , string [additional_headers] , string [cc] , string [bcc] , string [rpath] );e-mailメッセージを送信する
object imap_mailboxmsginfo ( int imap_stream );現在のメールボックスに関する情報を得る
array imap_mime_header_decode ( string text );MIMEヘッダーエレメントをデコードする
int imap_msgno ( int imap_stream , int uid );指定したUIDのメッセージ番号を返す
int imap_num_msg ( int stream_id );現在のメールボックスのメッセージ数を取得する
int imap_num_recent ( int imap_stream );現在のメールボックスにある新規メッセージの数の取得
int imap_open ( string mailbox , string username , string password , int [flags] );メールボックスへのIMAPストリームをオープンする
int imap_ping ( int imap_stream );IMAP ストリームの有効性チェック
int imap_popen ( string mailbox , string user , string password , [ int options ] );mailboxへの持続的なIMAPストリームをオープンする
string imap_qprint ( string string );quoted-printable 文字列を 8 ビット文字列に変換する
int imap_renamemailbox ( int imap_stream , string old_mbox , string new_mbox );メールボックスの名前を変更する
int imap_reopen ( int imap_stream , string mailbox , string [flags] );新規メールボックスへのIMAP ストリームを再度オープンする
array imap_rfc822_parse_adrlist ( string address , string default_host );アドレス文字列を解釈します
object imap_rfc822_parse_headers ( string headers , string [defaulthost] );文字列からメールヘッダを解釈する
string imap_rfc822_write_address ( string mailbox , string host , string personal );指定したメールボックス、ホスト、個人情報を適当にフォーマットされた電子メールアドレスにして返す
array imap_scanmailbox ( int imap_stream , string ref , string pattern , string content );メールボックスのリストを読み、メールボックスのテキストにおいて文字列を検索する
array imap_search ( int imap_stream , string criteria , int flags );指定した検索条件にマッチするメッセージを配列として返す
int imap_set_quota ( int imap_stream , string quota_root , int quota_limit );指定したメールボックスにクオータを設定する
int imap_setacl ( int stream_id , string mailbox , string id , string rights );指定したメールボックスのACLを設定する
string imap_setflag_full ( int stream , string sequence , string flag , string options );メッセージにフラグをセットする
array imap_sort ( int stream , int criteria , int reverse , int options );
object imap_status ( int imap_stream , string mailbox , int options );現在のメールボックス以外のメールボックスのステータス情報を返す
int imap_subscribe ( int imap_stream , string mbox );メールボックスの購読
int imap_thread ( int stream_id , [ int flags ] );REFERENCESツリーによりスレッド化して返す
int imap_uid ( int imap_stream , int msgno );指定したメッセージシーケンス番号の UID を返す
int imap_undelete ( int imap_stream , int msg_number );削除マークがついているメッセージのマークをはずす
int imap_unsubscribe ( int imap_stream , string mbox );メールボックスの購読をやめる
string imap_utf7_decode ( string text );修正版UTF-7 エンコードされた文字列をデコードする
string imap_utf7_encode ( string data );8ビットデータを修正版UTF-7テキストにに変換する
string imap_utf8 ( string text );テキストをUTF8に変換する
mixed assert_options ( int what , [ mixed value ] );様々な assert フラグを設定/取得する
int assert ( mixed assertion );assertion が FALSE であるかどうかを調べる
int dl ( string library );実行時にPHP拡張モジュールをロードする
bool extension_loaded ( string name );ある拡張機能がロードされているかどうかを調べる
string get_cfg_var ( string varname );PHP 設定オプションの値を取得する
string get_current_user ();現在の PHP スクリプトの所有者の名前を取得する
array get_defined_constants ();全ての定数の名前とその値を連想配列として返す
array get_extension_funcs ( string module_name );あるモジュールの関数名を配列として返す
string get_include_path ();現在のinclude_path設定オプションを取得する
array get_included_files ();includeまたはrequireで読み込まれたファイルの名前を配列として返す
array get_loaded_extensions ();コンパイル/ロードされている全てのモジュールの名前を配列として返す
long get_magic_quotes_gpc ();magic quotes gpc の現在アクティブな設定を得る
int get_magic_quotes_runtime ();magic_quotes_runtime の現在アクティブな設定値を得ます
string getenv ( string varname );環境変数の値を取得する
int getlastmod ();最終ページ更新時刻を取得する
int getmygid ();PHPスクリプトの所有者のGIDを得る
int getmyinode ();現在のスクリプトの i ノードを取得する
int getmypid ();PHP のプロセス ID を取得する
int getmyuid ();PHP スクリプト所有者のユーザ ID を取得する
string getopt ( string options );コマンドラインの引数リストからオプションを取得する
array getrusage ( [ int who ] );カレントリソースの使用に関する情報を得る
array ini_get_all ( [ string extension ] );全ての設定オプションを得る
string ini_get ( string varname );設定オプションの値を得る
void ini_restore ( string varname );設定オプションの値を元に戻す
string ini_set ( string varname , string newvalue );設定オプションの値を設定する
int memory_get_usage ();PHPに割り当てられたメモリの量を返す
string php_ini_scanned_files ();追加のiniディレクトリにある.iniファイルのリストを取得する
string php_logo_guid ();ロゴのguidを取得する
string php_sapi_name ();WebサーバーとPHPの間のインターフェースの型を返す
string php_uname ();PHPが構築されたオペレーションシステムに関する情報を返す
void phpcredits ( int flag );PHPに関するクレジットを出力する
int phpinfo ( [ int what ] );いろいろな PHP 情報を出力する
string phpversion ();現在のPHPバージョンを取得する
void putenv ( string setting );環境変数の値を設定する
void restore_include_path ();include_path設定オプションの値を元に戻す
string set_include_path ( string new_include_path );include_path設定オプションをセットする
bool set_magic_quotes_runtime ( int new_setting );magic_quotes_runtime の現在アクティブな設定を設定します。
void set_time_limit ( int seconds );実行時間の最大値を制限します
int version_compare ( string version1 , string version2 , [ string operator ] );二つの"PHP標準"バージョン番号文字列を比較する
string zend_logo_guid ();zend guid を取得する
string zend_version ();カレントのZendエンジンのバージョンを取得する
bool ingres_autocommit ( resource [link] );autocommitをオンまたはオフに切替える
bool ingres_close ( resource [link] );Ingres II データベース接続を閉じる
bool ingres_commit ( resource [link] );トランザクションをコミットする
resource ingres_connect ( string [database] , string [username] , string [password] );Ingres II データベースへの接続をオープンする
array ingres_fetch_array ( int [result_type] , resource [link] );1行分の結果を配列に取得する
object ingres_fetch_object ( int [result_type] , resource [link] );1行分の結果をオブジェクトとして取得する
array ingres_fetch_row ( resource [link] );1行分の結果を数値添字配列として取得する
int ingres_field_length ( int index , resource [link] );フィールド長を得る
string ingres_field_name ( int index , resource [link] );クエリ結果においてフィールド名を得る
bool ingres_field_nullable ( int index , resource [link] );フィールドにNULL値を設定可能かどうか調べる
int ingres_field_precision ( int index , resource [link] );フィールドの精度を得る
int ingres_field_scale ( int index , resource [link] );フィールドのスケールを得る
string ingres_field_type ( int index , resource [link] );クエリ結果においてフィールドの型を得る
int ingres_num_fields ( resource [link] );直近のクエリにより返されたフィールドの数を得る
int ingres_num_rows ( resource [link] );直近のクエリで作用されたレコードの数を取得し、返す
resource ingres_pconnect ( string [database] , string [username] , string [password] );Ingres II データベースへの持続的接続をオープンする
bool ingres_query ( string query , resource [link] );Ingres II にSQLクエリを送信する
bool ingres_rollback ( resource [link] );トランザクションをロールバックする
boolean ircg_channel_mode ( resource connection , string channel , string mode_spec , string nick );ユーザ用にチャンネルモードフラグを設定する
boolean ircg_disconnect ( resource connection , string reason );サーバへの接続を閉じる
array ircg_fetch_error_msg ( resource connection );以前のircg処理からエラーを返す
string ircg_get_username ( int connection );接続用にユーザ名を取得する
boolean ircg_html_encode ( string html_string );HTMLで保存された文字列をエンコードする
boolean ircg_ignore_add ( resource connection , string nick );サーバ上の除外リストにユーザを追加する
boolean ircg_ignore_del ( resource connection , string nick );サーバ上の除外リストからユーザを削除する
boolean ircg_is_conn_alive ( resource connection );接続ステータスを確認する
boolean ircg_join ( resource connection , string channel );接続中のサーバ上でチャンネルに接続する
boolean ircg_kick ( resource connection , string channel , string nick , string reason );サーバ上のチャネルからユーザを排除する
boolean ircg_lookup_format_messages ( string name );IRCメッセージの表示用文字列フォーマットの設定を選択する
boolean ircg_msg ( resource connection , string recipient , string message , [ boolean suppress ] );サーバ上のチャンネルまたはユーザにメッセージを送信する
boolean ircg_nick ( resource connection , string nick );サーバ上のニックネームを変更する
string ircg_nickname_escape ( string nick );ニックネームの中の特別な文字がIRC互換となるようにデコードする
string ircg_nickname_unescape ( string nick );エンコードされたニックネームをデコードする
boolean ircg_notice ( resource connection , string , string message );サーバ上のユーザに通知を送信する
boolean ircg_part ( resource connection , string channel );サーバ上のチャンネルから離脱する
resource ircg_pconnect ( string username , [ string server_ip ] , [ int server_port ] , [ string msg_format ] , [ array ctcp_messages ] , [ array user_settings ] );IRCサーバに接続する
boolean ircg_register_format_messages ( string name , array messages );IRCメッセージの表示用文字列フォーマットの設定を登録する
boolean ircg_set_current ( resource connection );出力用にカレントの接続を設定する
bool ircg_set_file ( int connection , string path );接続用にログファイルを設定する
bool ircg_set_on_die ( int connection , string host , int port , string data );接続が終了する際にホスト側で実行されるアクションを設定する
boolean ircg_topic ( resource connection , string channel , string new_topic );サーバ上のチャネル用にトピックを設定する
boolean ircg_whois ( resource connection , string nick );サーバ上のニックネームからユーザ情報を検索する
void java_last_exception_clear ();直近の例外をクリアする
exception java_last_exception_get ();直近のJava例外を取得する
string ldap_8859_to_t61 ( string value );8859文字をt61文字に変換する
int ldap_add ( int link_identifier , string dn , array entry );LDAP ディレクトリにエントリを付加する
int ldap_bind ( int link_identifier , string [bind_rdn] , string [bind_password] );LDAP ディレクトリにバインドする
int ldap_close ( int link_identifier );LDAP サーバーへのリンクを閉じる
int ldap_compare ( int link_identifier , string dn , string attribute , string value );DNで指定したエントリで見付かった属性の値を比較する
int ldap_connect ( string [hostname] , int [port] );LDAP サーバーへ接続する
int ldap_count_entries ( int link_identifier , int result_identifier );サーチ時のエントリ数をカウントする
int ldap_delete ( int link_identifier , string dn );ディレクトリからエントリを削除する
string ldap_dn2ufn ( string dn );DN をユーザに分かりやすい名前のフォーマットに変換する
string ldap_err2str ( int errno );LDAP のエラー番号をエラーメッセージ文字列に変換する
int ldap_errno ( int link_id );直近の LDAP コマンドのLDAP エラー番号を返す
string ldap_error ( int link_id );直近のLDAPコマンドのLDAP エラーメッセージを返す
array ldap_explode_dn ( string dn , int with_attrib );DN を構成要素毎に分割する
string ldap_first_attribute ( int link_identifier , int result_entry_identifier , int ber_identifier );最初の属性を返す
int ldap_first_entry ( int link_identifier , int result_identifier );最初の結果 ID を返す
int ldap_first_reference ( int link , int result );最初のリファレンスを返す
int ldap_free_result ( int result_identifier );結果メモリを開放する
array ldap_get_attributes ( int link_identifier , int result_entry_identifier );サーチ結果エントリから属性を得る
string ldap_get_dn ( int link_identifier , int result_entry_identifier );結果エントリから DN を得る
array ldap_get_entries ( int link_identifier , int result_identifier );全ての結果エントリを得る
boolean ldap_get_option ( int link_identifier , int option , mixed retval );指定したオプションの現在の値を得る
array ldap_get_values_len ( int link_identifier , int result_entry_identifier , string attribute );結果エントリから全てのバイナリ値を得る
array ldap_get_values ( int link_identifier , int result_entry_identifier , string attribute );結果エントリから全ての値を得る
int ldap_list ( int link_identifier , string base_dn , string filter , array [attributes] , int [attrsonly] , int [sizelimit] , int [timelimit] , int [deref] );シングルレベル探索を行う
int ldap_mod_add ( int link_identifier , string dn , array entry );現在の属性に属性を追加する
int ldap_mod_del ( int link_identifier , string dn , array entry );現在の属性から属性を削除する
int ldap_mod_replace ( int link_identifier , string dn , array entry );属性を新規の値に置換する
int ldap_modify ( int link_identifier , string dn , array entry );LDAP エントリを修正する
string ldap_next_attribute ( int link_identifier , int result_entry_identifier , int ber_identifier );結果における次の属性を得る
int ldap_next_entry ( int link_identifier , int result_entry_identifier );次の結果エントリを得る
int ldap_next_reference ( int link , int entry );次のリファレンスを得る
boolean ldap_parse_reference ( int link , int entry , array referrals );参照エントリかえあ情報を展開する
boolean ldap_parse_result ( int link , int result , int errcode , string matcheddn , string errmsg , array referrals );結果から情報を展開する
int ldap_read ( int link_identifier , string base_dn , string filter , array [attributes] , int [attrsonly] , int [sizelimit] , int [timelimit] , int [deref] );エントリを読み込む
boolean ldap_rename ( int link_identifier , string dn , string newrdn , string newparent , boolean deleteoldrdn );エントリ名を修正する
int ldap_search ( int link_identifier , string base_dn , string filter , array [attributes] , int [attrsonly] , int [sizelimit] , int [timelimit] , int [deref] );LDAP ツリーを探索する
bool ldap_set_option ( int link_identifier , int option , mixed newval );指定したオプションの値を設定する
int ldap_set_rebind_proc ( int link , string callback );参照先を再バインドするためのコールバック関数を設定する
int ldap_sort ( int link , int result , string sortfilter );LDAP結果エントリをソートする
int ldap_start_tls ( int link );TLSを開始する
string ldap_t61_to_8859 ( string value );t61文字を8859文字に変換する
int ldap_unbind ( int link_identifier );LDAP ディレクトリへのバインドを解除する
void libxml_clear_errors ();libxmlエラーハンドラをクリアする
array libxml_get_errors ();エラー配列を取得する
LibXMLError libxml_get_last_error ();libxmlから直近のエラーを取得する
void libxml_set_streams_context ( resource streams_context );次のlibxmlドキュメントの読込／書きこみのためにストリームコンテキストを設定する
bool libxml_use_internal_errors ( [ bool use_errors ] );libxmlエラーを無効にし、ユーザが必要に応じてエラー情報を取得できるようにする
string lzf_compress ( string arg );LZF圧縮を行う
string lzf_decompress ( string arg );LZF圧縮を解凍する
int lzf_optimized_for ();LZF拡張モジュールの最適化指定を取得する
int ezmlm_hash ( string addr );EZMLMで必要なハッシュ値を計算する
bool mail ( string to , string subject , string message , [ string additional_headers ] , [ string additional_parameters ] );メールの送信
int mailparse_determine_best_xfer_encoding ( resource fp );ファイルポインタから内容を読み込む際に最も適したエンコーディングを定義する
int mailparse_msg_create ();メッセージをパースするために使用可能なハンドルを返す
string mailparse_msg_extract_part_file ( resource rfc2045 , string filename , [ string callbackfunc ] );メッセージセクションを展開/デコードし、transfer encodingをデコードする
void mailparse_msg_extract_part ( resource rfc2045 , string msgbody , [ string callbackfunc ] );メッセージセクションを展開/デコードする。callbackfuncが指定されない場合、コンテンツは"stdout"に送られる
void mailparse_msg_free ( resource rfc2045buf );mailparse_msg_creaにより確保されたハンドルを解放する
array mailparse_msg_get_part_data ( resource rfc2045 );メッセージに関する情報の連想配列を返す
int mailparse_msg_get_part ( resource rfc2045 , string mimesection );MIMEメッセージの指定したセクションに関するハンドルを返す
array mailparse_msg_get_structure ( resource rfc2045 );指定したメッセージ内のMIMEセクション名の配列を返す
resource mailparse_msg_parse_file ( string filename );ファイルをパースし、その構造を表すリソースを返す
void mailparse_msg_parse ( resource rfc2045buf , string data );データをパースし、バッファに追加する
array mailparse_rfc822_parse_addresses ( string addresses );アドレスをパースし、そのデータを含むハッシュを返す
bool mailparse_stream_encode ( resource sourcefp , resource destfp , string encoding );ソースファイルポインタのストリームからデータを取得し、エンコーディングを適用し、出力ファイルポインタに書き込む
array mailparse_uudecode_all ( resource fp );ファイルポインタからデータをスキャン、uuencodeされたファイルを展開、ファイル名のリストを含む配列を返す
mixed abs ( mixed number );絶対値
float acos ( float arg );アークコサイン
float acosh ( float arg );逆双曲線余弦
float asin ( float arg );アークサイン
float asinh ( float arg );逆双曲線正弦
float atan ( float arg );アークタンジェント
float atan2 ( float y , float x );2変数のアークタンジェント
float atanh ( float arg );逆双曲線正接
string base_convert ( string number , int frombase , int tobase );任意の基底に変換する
int bindec ( string binary_string );2進数 を 10 進数に変換します
float ceil ( float value );切り上げ
float cos ( float arg );コサイン
float cosh ( float arg );双曲線余弦
string decbin ( int number );10 進数を 2進数 に変換します
string dechex ( int number );10 進数を 16 進数に変換します
string decoct ( int number );10 進数を 8 進数に変換します。
double deg2rad ( double number );度単位の数値をラジアン単位に変換する
float exp ( float arg );自然対数 e の累乗を計算します
float expm1 ( float number );値がゼロに近い時にでも精度を保つためにexp(number)-1を返す
float floor ( float value );切捨て
int getrandmax ();乱数の最大値を取得する
int hexdec ( string hex_string );16 進数を 10 進数に変換します。
float hypot ( float num1 , float num2 );sqrt( num1*num1 + num2*num2)を返す
double lcg_value ();複合型の線形合同発生器(LCG)
float log ( float arg );自然対数
float log10 ( float arg );底数 10 の対数
float log1p ( float number );ゼロに近い場合の精度を維持するため、log(1 + number)を返す
mixed max ( mixed arg1 , mixed arg2 , mixed argn );最も大きい数値を返す
mixed min ( mixed arg1 , mixed arg2 , mixed argn );最も小さい値を返す
int mt_getrandmax ();乱数値の最大値を表示する
int mt_rand ( [ int min ] , int max );改良型乱数値を生成する
void mt_srand ( [ int seed ] );改良型乱数生成器にシードを指定する
string number_format ( float number , [ int decimals ] , [ string dec_point ] , [ string thousands_sep ] );1,000 単位で数字をフォーマットする
int octdec ( string octal_string );8進数を10進数に変換する
double pi ();円周率の値を得る
number pow ( number base , number exp );指数関数値
double rad2deg ( double number );ラジアン単位の数を等価な度単位の数に変換する
int rand ( [ int min ] , int max );乱数を生成します
double round ( double val , int [precision] );浮動点整数を整数値に丸める
float sin ( float arg );サイン
float sinh ( float arg );双曲線正弦
float sqrt ( float arg );平方根
void srand ( int seed );乱数ジェネレータを初期化する
float tan ( float arg );タンジェント
float tanh ( float arg );双曲線正接
string mb_convert_case ( string str , int mode , [ string encoding ] );文字列に対してケースフォルディングを行う
string mb_convert_encoding ( string str , string to-encoding , [ mixed from-encoding ] );文字エンコーディングを変換する
string mb_convert_kana ( string str , string option , [ mixed encoding ] );カナを("全角かな"、"半角かな"等に)変換する
string mb_convert_variables ( string to-encoding , mixed from-encoding , mixed vars );変数の文字コードを変換する
string mb_decode_mimeheader ( string str );MIME ヘッダフィールドの文字列をデコードする
string mb_decode_numericentity ( string str , array convmap , [ string encoding ] );HTML数値エンティティを文字にデコードする
string mb_detect_encoding ( string str , [ mixed encoding-list ] );文字エンコーディングを検出する
array mb_detect_order ( [ mixed encoding-list ] );文字エンコーディング検出順序の設定/取得
string mb_encode_mimeheader ( string str , [ string charset ] , [ string transfer-encoding ] , [ string linefeed ] );MIMEヘッダの文字列をエンコードする
string mb_encode_numericentity ( string str , array convmap , [ string encoding ] );文字をHTML数値エンティティにエンコードする
bool mb_ereg_match ( string pattern , string string , [ string option ] );マルチバイト文字列が正規表現に一致するか調べる
string mb_ereg_replace ( string pattern , string replacement , string string , [ array option ] );マルチバイト文字列に正規表現による置換を行う
array mb_ereg_search_getpos ();次の正規表現検索を開始する位置を取得する
array mb_ereg_search_getregs ();マルチバイト文字列が正規表現に一致する部分があるか調べる
array mb_ereg_search_init ( string string , [ string pattern ] , [ string option ] );マルチバイト正規表現検索用の文字列と正規表現を設定する
array mb_ereg_search_pos ( [ string pattern ] , [ string option ] );指定したマルチバイト文字列が正規表現に一致する部分の位置と長さを返す
array mb_ereg_search_regs ( [ string pattern ] , [ string option ] );指定したマルチバイト文字列が正規表現に一致する部分を取得する
array mb_ereg_search_setpos ();次の正規表現検索を開始する位置を設定する
bool mb_ereg_search ( [ string pattern ] , [ string option ] );指定したマルチバイト文字列が正規表現に一致するか調べる
int mb_ereg ( string pattern , string string , [ array regs ] );マルチバイト文字列に正規表現マッチを行う
string mb_eregi_replace ( string pattern , string replace , string string );マルチバイト文字列に大文字小文字を区別せずに正規表現による置換を行う
int mb_eregi ( string pattern , string string , [ array regs ] );マルチバイト文字列に大文字小文字を区別しない正規表現マッチを行う
string mb_get_info ( [ string type ] );mbstringの内部設定値を取得する
string mb_http_input ( [ string type ] );HTTP 入力文字エンコーディングの検出
string mb_http_output ( [ string encoding ] );HTTP 出力文字エンコーディングの設定/取得
mixed mb_internal_encoding ( [ string encoding ] );内部文字エンコーディングの設定/取得
string mb_language ( [ string language ] );カレントの言語を設定/取得
string mb_output_handler ( string contents , int status );出力バッファ内で文字エンコーディングを変換するコールバック関数
boolean mb_parse_str ( string encoded_string , [ array result ] );GET/POST/COOKIEデータをパースし、グローバル変数を設定する
string mb_preferred_mime_name ( string encoding );MIME文字設定を文字列で得る
string mb_regex_encoding ( [ string encoding ] );カレントの正規表現用のエンコーディングを文字列として返す
string mb_regex_set_options ( [ string options ] );マルチバイト正規表現関数のデフォルトオプションを取得または設定する
boolean mb_send_mail ( string to , string subject , string message , [ string additional_headers ] , [ string additional_parameter ] );エンコード変換を行ってメールを送信する
array mb_split ( string pattern , string string , [ int limit ] );マルチバイト文字列を正規表現により分割する
string mb_strcut ( string str , int start , [ int length ] , [ string encoding ] );文字列の一部を得る
string mb_strimwidth ( string str , int start , int width , [ string trimmarker ] , [ string encoding ] );指定した幅で文字列を丸める
string mb_strlen ( string str , [ string encoding ] );文字列の長さを得る
int mb_strpos ( string haystack , string needle , [ int offset ] , [ string encoding ] );文字列の中に指定した文字列が最初に現れる位置を見つける
int mb_strrpos ( string haystack , string needle , [ string encoding ] );文字列の中に指定した文字列が最後に現れる位置を見つける
string mb_strtolower ( string str , [ string encoding ] );文字列を小文字にする
string mb_strtoupper ( string str , [ string encoding ] );文字列を大文字にする
int mb_strwidth ( string str , [ string encoding ] );文字列の幅を返す
mixed mb_substitute_character ( [ mixed substrchar ] );置換文字の設定/入手
int mb_substr_count ( string haystack , string needle , [ string encoding ] );副文字列の出現関数を数える
string mb_substr ( string str , int start , [ int length ] , [ string encoding ] );文字列の一部を得る
int mcal_append_event ( int mcal_stream );MCALカレンダーに新規イベントを保存する
int mcal_close ( int mcal_stream , int flags );MCAL ストリームを閉じる
string mcal_create_calendar ( int stream , string calendar );新規にMCALカレンダを作成する
int mcal_date_compare ( int a_year , int a_month , int a_day , int b_year , int b_month , int b_day );二つの日付を比較する
int mcal_date_valid ( int year , int month , int day );指定した年月日が有効な日付である場合に TRUE を返す
int mcal_day_of_week ( int year , int month , int day );指定した日の曜日を返す
int mcal_day_of_year ( int year , int month , int day );指定した日の年間積算日を返す
int mcal_days_in_month ( int month , int year );指定した月の日数を返す
string mcal_delete_calendar ( int stream , string calendar );MCALカレンダを削除する
int mcal_delete_event ( int mcal_stream , int [event_id] );MCAL カレンダーからイベントを削除する
void mcal_event_add_attribute ( int stream , string attribute , string value );グローバルイベント構造体ストリームに属性およびその値を追加する
int mcal_event_init ( int stream );グローバルイベント構造体のストリームを初期化する
int mcal_event_set_alarm ( int stream , int alarm );グローバルイベント構造体ストリームのアラームを設定する
int mcal_event_set_category ( int stream , string category );グローバルイベント構造体ストリームの?テゴリを設定する
int mcal_event_set_class ( int stream , int class );グローバルイベント構造体ストリームのクラスを設定する
int mcal_event_set_description ( int stream , string description );グローバルイベント構造体ストリームの description を設定する
int mcal_event_set_end ( int stream , int year , int month , int [day] , int [hour] , int [min] , int [sec] );グローバルイベント構造体ストリームの終了日を設定する
int mcal_event_set_recur_daily ( int stream , int year , int month , int day , int interval );グローバルイベント構造体ストリームの反復を設定する
int mcal_event_set_recur_monthly_mday ( int stream , int year , int month , int day , int interval );グローバルイベント構造体ストリームの繰り返しを設定する
int mcal_event_set_recur_monthly_wday ( int stream , int year , int month , int day , int interval );グローバルイベント構造体ストリームの繰り返しを設定する
int mcal_event_set_recur_none ( int stream );グローバルイベント構造体ストリームの反復を設定する
int mcal_event_set_recur_weekly ( int stream , int year , int month , int day , int interval , int weekdays );グローバルイベント構造体ストリームの繰り返しを設定する
int mcal_event_set_recur_yearly ( int stream , int year , int month , int day , int interval );グローバルイベント構造体ストリームの繰り返しを設定する
int mcal_event_set_start ( int stream , int year , int month , int [day] , int [hour] , int [min] , int [sec] );グローバルイベント構造体ストリームの開始日を設定する
int mcal_event_set_title ( int stream , string title );グローバルイベント構造体ストリームのtitleを設定する
int mcal_expunge ( int stream );削除マークを付けられた全てのイベントを削除する
object mcal_fetch_current_stream_event ( int stream );現在のイベント構造体ストリームを有するオブジェクトを返す
object mcal_fetch_event ( int mcal_stream , int event_id , int [options] );カレンダーストリームからイベントを取得する
int mcal_is_leap_year ( int year );指定した年が閏年であるかどうかを返す
array mcal_list_alarms ( int mcal_stream , int [begin_year] , int [begin_month] , int [begin_day] , int [end_year] , int [end_month] , int [end_day] );指定した datetime までにアラームを発生するイベントのリストを返す
array mcal_list_events ( int mcal_stream , object begin_date , object [end_date] );日付または日付の範囲に関してIDのリストを返す
int mcal_next_recurrence ( int stream , int weekstart , array next );イベントが次に発生する日を返す
int mcal_open ( string calendar , string username , string password , [ int options ] );MCAL 接続をオープンする
int mcal_popen ( string calendar , string username , string password , [ int options ] );永続的なMCAL接続をオープンする
string mcal_rename_calendar ( int stream , string old_name , string new_name );MCALカレンダの名前を変更する
int mcal_reopen ( string calendar , [ int options ] );MCAL接続を再オープンする
int mcal_snooze ( int id );イベントのアラームをオフにする
int mcal_store_event ( int mcal_stream );MCALカレンダーの既存のイベントを修正する
int mcal_time_valid ( int hour , int minutes , int seconds );指定した時間、分、秒が有効な時間である場合に TRUE を返す
int mcal_week_of_year ( int day , int month , int year );指定した日付の週番号を返す
string mcrypt_cbc ( int cipher , string key , string data , int mode , string [iv] );CBC モードでデータを暗号化/復号化する
string mcrypt_cfb ( int cipher , string key , string data , int mode , string iv );CFB モードでデータを暗号化/復号化する
string mcrypt_create_iv ( int size , int source );乱数ソースから初期化ベクトル(IV)を生成する
string mcrypt_decrypt ( string cipher , string key , string data , string mode , string [iv] );指定したパラメータで暗号化されたテキストを復号化する
string mcrypt_ecb ( int cipher , string key , string data , int mode );ECB モードでデータを暗号化/復号化する
string mcrypt_enc_get_algorithms_name ( resource td );オープンされたアルゴリズムの名前を返す
int mcrypt_enc_get_block_size ( resource td );オープンされたアルゴリズムのブロックサイズを返す
int mcrypt_enc_get_iv_size ( resource td );オープンされたアルゴリズムのIVの大きさを返す
int mcrypt_enc_get_key_size ( resource td );オープンされたモードでサポートされる最大キー長を返す
string mcrypt_enc_get_modes_name ( resource td );オープンされたモードの名前を返す
array mcrypt_enc_get_supported_key_sizes ( resource td );オープンされたアルゴリズムでサポートされるキー長を配列にして返す
int mcrypt_enc_is_block_algorithm_mode ( resource td );オープンされたモードの暗号がブロックモードで動作するかどうかを調べる
int mcrypt_enc_is_block_algorithm ( resource td );オープンされたモードの暗号がブロックモードであるかどうかを調べるalgorithm
int mcrypt_enc_is_block_mode ( resource td );オープンされたモードがブロック出力を行うかどうかを調べる
int mcrypt_enc_self_test ( resource td );オープンしたモジュールのセルフテストを実行する
string mcrypt_encrypt ( string cipher , string key , string data , string mode , string [iv] );指定したパラメータでプレーンテキストを暗号化する
bool mcrypt_generic_deinit ( resource td );デストラクタtdにより指定された暗号化を終了する
bool mcrypt_generic_end ( resource td );暗号処理を終了する
int mcrypt_generic_init ( resource td , string key , string iv );暗号化に必要な全てのバッファを初期化する
string mcrypt_generic ( resource td , string data );データを暗号化する
int mcrypt_get_block_size ( int cipher );指定した暗号のブロックサイズを得る
string mcrypt_get_cipher_name ( int cipher );指定した暗号の名前を得る
int mcrypt_get_iv_size ( string cipher , string mode );指定した暗号/モードの組み合わせに属するIVの大きさを返す
int mcrypt_get_key_size ( int cipher );指定した暗号のキーの長さを得る
array mcrypt_list_algorithms ( string [lib_dir] );サポートされる全ての暗号を配列として取得する
array mcrypt_list_modes ( string [lib_dir] );サポートされる全てのモードの配列を取得する
bool mcrypt_module_close ( resource td );デストラクタtdを解放する
int mcrypt_module_get_algo_block_size ( string algorithm , string [lib_dir] );指定したアルゴリズムのブロック長を返す
int mcrypt_module_get_algo_key_size ( string algorithm , string [lib_dir] );オープンされたモードでサポートされる最大キー長を返す
array mcrypt_module_get_algo_supported_key_sizes ( string algorithm , string [lib_dir] );オープンされたアルゴリズムでサポートされるキーのサイズを配列として返す
bool mcrypt_module_is_block_algorithm_mode ( string mode , string [lib_dir] );指定したモジュールがブロックアルゴリズムであるかどうかを返す
bool mcrypt_module_is_block_algorithm ( string algorithm , string [lib_dir] );指定したアルゴリズムがブロックアルゴリズムであるかを調べる
bool mcrypt_module_is_block_mode ( string mode , string [lib_dir] );指定したモードがブロック出力を行うかどうかを返す
resource mcrypt_module_open ( string algorithm , string algorithm_directory , string mode , string mode_directory );使用するアルゴリズムおよびモードのモジュールをオープンする
bool mcrypt_module_self_test ( string algorithm , string [lib_dir] );指定したモジュールのセルフテストを実行する
string mcrypt_ofb ( int cipher , string key , string data , int mode , string iv );OFB モードでデータを暗号化/復号化する
string mdecrypt_generic ( resource td , string data );データを復号化する
int mhash_count ();利用可能なハッシュIDの最大値を得る
int mhash_get_block_size ( int hash );指定したハッシュのブロックサイズを得る
string mhash_get_hash_name ( int hash );指定したハッシュの名前を得る
string mhash_keygen_s2k ( int hash , string password , string salt , int bytes );キーを生成する
string mhash ( int hash , string data , string [key] );ハッシュ値を計算する
string mime_content_type ( string filename );ファイルのMIME Content-typeを検出する
void ming_setcubicthreshold ( int threshold );Set cubic threshold (?)
void ming_setscale ( int scale );Set scale (?)
void ming_useswfversion ( int version );Use SWF version (?)
new swfaction ( string script );新規アクションを作成する
int swfbitmap->getheight ();ビットマップの高さを返す
int swfbitmap->getwidth ();ビットマップの幅を返す
new swfbitmap ( string filename , [ int alphafilename ] );ビットマップオブジェクトをロードする
int swfbutton_keypress ( string str );Returns the action flag for keyPress(char)
void swfbutton->addaction ( ressource action , int flags );アクションを追加する
void swfbutton->addshape ( ressource shape , int flags );ボタンにシェープを追加する
void swfbutton->setaction ( ressource action );アクションを設定する
void swfbutton->sethit ( ressource shape );addShape(shape, SWFBUTTON_HIT)へのエイリアス
void swfbutton->setover ( ressource shape );addShape(shape, SWFBUTTON_OVER)へのエイリアス
void swfbutton->setup ( ressource shape );addShape(shape, SWFBUTTON_UP)へのエイリアス
new swfbutton ();新規ボタンを作成する
void swfdisplayitem->addcolor ( [ int red ] , [ int green ] , [ int blue ] , [ int a ] );このアイテムの色変換に指定した色を追加する
void swfdisplayitem->move ( int dx , int dy );オブジェクトを相対座標系で移動する
void swfdisplayitem->moveto ( int x , int y );グローバル座標系でオブジェクトを移動する
void swfdisplayitem->multcolor ( [ int red ] , [ int green ] , [ int blue ] , [ int a ] );アイテムの色変換を乗算する
void swfdisplayitem->remove ();ムービーからオブジェクトを削除する
void swfdisplayitem->rotate ( float ddegrees );相対座標系で回転する
void swfdisplayitem->rotateto ( float degrees );グローバル座標系でオブジェクトを回転する
void swfdisplayitem->scale ( int dx , int dy );相対座標系でオブジェクトを拡大縮小する
void swfdisplayitem->scaleto ( int x , int y );グローバル座標系でオブジェクトを拡大縮小する
void swfdisplayitem->setdepth ( float depth );z-orderを設定する
void swfdisplayitem->setname ( string name );オブジェクトの名前を設定する
void swfdisplayitem->setratio ( float ratio );オブジェクト比を設定する
void swfdisplayitem->skewx ( float ddegrees );X-skewに追加する
void swfdisplayitem->skewxto ( float degrees );X-skewを設定する
void swfdisplayitem->skewy ( float ddegrees );Y-skewに追加する
void swfdisplayitem->skewyto ( float degrees );Y-skewを設定する
new swfdisplayitem ();新規に displayitem オブジェクトを作成する
void swffill->moveto ( int x , int y );塗りつぶしの原点を移動する
void swffill->rotateto ( float degrees );塗りつぶしの回転を設定する
void swffill->scaleto ( int x , int y );塗りつぶしの倍率を設定する
void swffill->skewxto ( float x );x-skewを設定する
void swffill->skewyto ( float y );y-skewを設定する
int swffont->getwidth ( string string );文字列の幅を返す
new swffont ( string filename );フォントの定義をロードする
void swfgradient->addentry ( float ratio , int red , int green , int blue , [ int a ] );傾きリストにエントリを追加する
new swfgradient ();傾きオブジェクトを作成する
mixed swfmorph->getshape1 ();最初のシェープへのハンドルを得る
mixed swfmorph->getshape2 ();最後のシェープへのハンドルを得る
new swfmorph ();新規にSWFMorphオブジェクトを作成する
void swfmovie->add ( ressource instance );ムービーにデータ型を追加する
void swfmovie->nextframe ();アニメーションの次フレームに移動
void swfmovie->output ();作成したムービーを出力する
void swfmovie->remove ( ressource instance );表示リストからオブジェクトのインスタンスを削除する
void swfmovie->save ( string filename );ムービーをファイルに保存する
void swfmovie->setbackground ( int red , int green , int blue );背景色を設定する
void swfmovie->setdimension ( int width , int height );ムービーの幅と高さを設定する
void swfmovie->setframes ( string numberofframes );アニメーションの総フレーム数を設定する
void swfmovie->setrate ( int rate );アニメーションのフレームレートを設定する
void swfmovie->streammp3 ( string mp3FileName );MP3 ファイルへのストリーム
new swfmovie ();SWFバージョン4ムービー形式で新規ムービーオブジェクトを作成する
void swfshape->addfill ( int red , int green , int blue , [ int a ] );塗りつぶし色をシェープに追加する
void swfshape->drawcurve ( int controldx , int controldy , int anchordx , int anchordy );曲線を画く (相対座標)
void swfshape->drawcurveto ( int controlx , int controly , int anchorx , int anchory );曲線を画く
void swfshape->drawline ( int dx , int dy );線を画く (相対座標)
void swfshape->drawlineto ( int x , int y );線を画く
void swfshape->movepen ( int dx , int dy );シェープのペンを(相対)移動する
void swfshape->movepento ( int x , int y );シェープのペンを移動する
void swfshape->setleftfill ( swfgradient fill );左ラスター色を設定する
void swfshape->setline ( int width , [ int red ] , [ int green ] , [ int blue ] , [ int a ] );輪郭の線種を設定する
void swfshape->setrightfill ( swfgradient fill );右ラスター色を設定する
new swfshape ();新規に輪郭オブジェクトを作成する
void swfsprite->add ( resource object );オブジェクトをスプライトに追加する
void swfsprite->nextframe ();アニメーションの次のフレームに移動する
void swfsprite->remove ( ressource object );オブジェクトをスプライトから削除する
void swfsprite->setframes ( int numberofframes );アニメーションの総フレーム数を設定する
new swfsprite ();ムービークリップ(スプライト)を作成する
void swftext->addstring ( string string );文字列を画く
void swftext->addstring ( string string );文字列の幅を計算する
void swftext->moveto ( int x , int y );ペンを移動する
void swftext->setcolor ( int red , int green , int blue , [ int a ] );カレントのフォント色を設定する
void swftext->setfont ( string font );カレントのフォントを設定する
void swftext->setheight ( int height );カレントのフォントの高さを設定する
void swftext->setspacing ( float spacing );カレントのフォントの間隔を設定する
new swftext ();新規にSWFTextオブジェクトを作成する
void swftextfield->addstring ( string string );指定した文字列をテキストフィールドに結合する
void swftextfield->align ( int alignement );テキストフィールドのアライメントを設定する
void swftextfield->setbounds ( int width , int height );テキストフィールドの幅と高さを設定する
void swftextfield->setcolor ( int red , int green , int blue , [ int a ] );テキストフィールドの色を設定する
void swftextfield->setfont ( string font );テキストフィールドフォントを設定する
void swftextfield->setheight ( int height );指定したテキストフィールドフォントの高さを設定する
void swftextfield->setindentation ( int width );先頭行のインデントを設定する
void swftextfield->setleftmargin ( int width );テキストフィールドの左マージン幅を設定する
void swftextfield->setlinespacing ( int height );テキストフィールドの行間を設定する
void swftextfield->setmargins ( int left , int right );テキストフィールドのマージン幅を設定する
void swftextfield->setname ( string name );変数名を設定する
void swftextfield->setrightmargin ( int width );キストフィールドの右マージン幅を設定する
new swftextfield ( [ int flags ] );テキストフィールドのオブジェクトを作成する
int connection_aborted ();クライアントとの接続が切断された場合にTRUEを返す
int connection_status ();接続ステータスのビットフィールドを返す
int connection_timeout ();スクリプトがタイムアウトした場合にTRUEを返す
mixed constant ( string name );定数の値を返す
bool define ( string name , mixed value , bool [case_insensitive] );名前を指定して定数を定義する
bool defined ( string name );指定した名前の定数が存在するかどうかを調べる
mixed eval ( string code_str );文字列をPHPコードとして評価する
void exit ( [ string status ] );メッセージを出力し、カレントのスクリプトを終了する
object get_browser ( string [user_agent] );ユーザのブラウザの機能を取得する
bool highlight_file ( string filename );ファイルの構文ハイライト表示
bool highlight_string ( string str );文字列の構文ハイライト化
int ignore_user_abort ( int [setting] );クライアント接続が断となった時にスクリプトの実行を中断するかどうかを設定する
array iptcparse ( string iptcblock );バイナリIPTChttp://www.IPTC.org/ブロックを処理しシングルタグにする
void leak ( int bytes );メモリーをリークする
string pack ( string format , [ mixed args ] );データをバイナリ文字列にパックする
bool show_source ( string filename );ファイルの構文ハイライト表示
void sleep ( int seconds );実行を遅延させる
string uniqid ( string prefix , bool [lcg] );ユニークなIDを生成する
array unpack ( string format , string data );バイナリ文字列からデータを切出します
void usleep ( int micro_seconds );マイクロ秒単位で実行を遅延する
int udm_add_search_limit ( int agent , int var , string val );種々の検索の制約を設定する
int udm_alloc_agent ( string dbaddr , [ string dbmode ] );mnoGoSearch セッションを確保する
int udm_api_version ();mnoGoSearch APIバージョンを取得する
array udm_cat_list ( int agent , string category );カレントのカテゴリと同じレベルのカテゴリを全て取得する
array udm_cat_path ( int agent , string category );カレントのカテゴリへのパスを取得する
int udm_check_charset ( int agent , string charset );指定したcharsetをmnogosearchで認識されるかどうか調べる
int udm_check_stored ( int agent , int link , string doc_id );保存された接続を調べる
int udm_clear_search_limits ( int agent );mnoGoSearch 検索に関する全ての制約をクリアする
int udm_close_stored ( int agent , int link );保存した接続を閉じる
int udm_crc32 ( int agent , string str );指定した文字列のCRC32チェックサムを計算する
int udm_errno ( int agent );mnoGoSearch エラー番号を取得する
string udm_error ( int agent );mnoGoSearch エラーメッセージを得る
int udm_find ( int agent , string query );検索を実行する
int udm_free_agent ( int agent );mnoGoSearch セッションを開放する
int udm_free_ispell_data ( int agent );ispellデータ用に確保されたメモリを解放する
int udm_free_res ( int res );mnoGoSearch 結果を開放する
int udm_get_doc_count ( int agent );Get total number of documents in database.
string udm_get_res_field ( int res , int row , int field );mnoGoSearch 結果フィールドを取得する
string udm_get_res_param ( int res , int param );mnoGoSearch 結果パラメータを取得する
int udm_load_ispell_data ( int agent , int var , string val1 , string val2 , int flag );ispellデータを読み込む
int udm_open_stored ( int agent , string storedaddr );保存した接続をオープンする
int udm_set_agent_param ( int agent , int var , string val );mnoGoSearch エージェントのセッションパラメータを設定する
bool msession_connect ( string host , string port );msessionサーバに接続する
int msession_count ();セッション数を得る
bool msession_create ( string session );セッションを作成する
bool msession_destroy ( string name );セッションを破棄する
void msession_disconnect ();msessionサーバへの接続を閉じる
array msession_find ( string name , string value );値を検索する
array msession_get_array ( string session );配列値を得る
string msession_get ( string session , string name , string value );セッションから値を取得する
string msession_getdata ( string session );データを取得する ... ?
string msession_inc ( string session , string name );セッションの値を増加させる
array msession_list ();リスト ... ?
array msession_listvar ( string name );変数を有するセッションの一覧を取得する
int msession_lock ( string name );セッションをロックする
string msession_plugin ( string session , string val , [ string param ] );msession personalityプラグイン内のエスケープ関数をコールする
string msession_randstr ( int param );ランダムな文字列を取得する
bool msession_set_array ( string session , array tuples );配列の値を設定する
bool msession_set ( string session , string name , string value );セッションに値を設定する
bool msession_setdata ( string session , string value );データを設定する  ... ?
int msession_timeout ( string session , [ int param ] );セッションの有効期間を設定/取得する
string msession_uniq ( int param );ユニークなIDを取得する
int msession_unlock ( string session , int key );セッションのロックを解除する
int msql_affected_rows ( int query_identifier );変更された行の数を返す
int msql_close ( int link_identifier );mSQL 接続を閉じる
int msql_connect ( [ string hostname ] , [ string server ] , [ string username ] , [ string password ] );mSQL 接続を開く
int msql_create_db ( string database name , int [link_identifier] );mSQL データベースを作成する
int msql_createdb ( string database name , int [link_identifier] );mSQL データベースを作成する
int msql_data_seek ( int query_identifier , int row_number );行に関する内部ポインタを移動する
string msql_dbname ( int query_identifier , int i );カレントの mSQL データベース名を得る
int msql_drop_db ( string database_name , int link_identifier );mSQL データベースを破棄(削除)する
string msql_error ( int [link_identifier] );最後の msql コールに関してエラーメッセージを返す
int msql_fetch_array ( int query_identifier , int [result_type] );結果の行を配列として取得する
object msql_fetch_field ( int query_identifier , int field_offset );フィールド情報を得る
int msql_fetch_object ( int query_identifier , int [result_type] );結果の行をオブジェクトとして取得する
array msql_fetch_row ( int query_identifier );結果の行を数値配列として取得する
int msql_field_seek ( int query_identifier , int field_offset );フィールドオフセットを設定する
string msql_fieldflags ( int query_identifier , int i );フィールドフラグを得る
int msql_fieldlen ( int query_identifier , int i );フィールド長を得る
string msql_fieldname ( int query_identifier , int field );フィールド名を得ます
int msql_fieldtable ( int query_identifier , int field );フィールドのテーブル名を得る
string msql_fieldtype ( int query_identifier , int i );フィールドの型を得ます
int msql_free_result ( int query_identifier );結果保持用メモリを開放する
int msql_list_dbs ();サーバー上の mSQL データベースのリストを返す
int msql_list_fields ( string database , string tablename );結果フィールドのリストを得る
int msql_list_tables ( string database );mSQL データベースにおけるテーブルのリストを得ます
int msql_num_fields ( int query_identifier );結果におけるフィールドの数を得ます
int msql_num_rows ( int query_identifier );結果の行の数を得ます
int msql_numfields ( int query_identifier );結果におけるフィールドの数を得ます
int msql_numrows ();結果における行の数を返します
int msql_pconnect ( [ string server ] , [ string username ] , [ string password ] );持続的な mSQL 接続を開きます
int msql_query ( string query , int link_identifier );mSQL クエリーを送信します
int msql_result ( int query_identifier , int i , mixed field );結果のデータを得る
int msql_select_db ( string database_name , int link_identifier );mSQL データベースを選択します
string msql_tablename ( int query_identifier , int field );フィールドのテーブル名を得ます
int msql ( string database , string query , int link_identifier );mSQL クエリーを送信する
int mssql_bind ( int stmt , string param_name , mixed var , int type , [ int is_output ] , [ int is_null ] , [ int maxlen ] );ストアドプロシージャまたはリモートストアドプロシージャへパラメータを追加する
int mssql_close ( int [link_identifier] );MS SQL サーバーへの接続を閉じる
int mssql_connect ( string [servername] , string [username] , string [password] );MS SQL サーバー接続をオープンする
int mssql_data_seek ( int result_identifier , int row_number );内部行ポインタを移動する
int mssql_execute ( int stmt );MS SQLサーバデータベースでストアドプロシージャを実行する
int mssql_fetch_array ( int result );配列として行を取得する
array mssql_fetch_assoc ( int result_id , [ int result_type ] );result_idで指定した結果集合でカレントの行を連想配列として返す
int mssql_fetch_batch ( string result_index );レコードの次のバッチを返す
object mssql_fetch_field ( int result , int [field_offset] );フィールド情報を取得する
int mssql_fetch_object ( int result );オブジェクトとして行を取得する
array mssql_fetch_row ( int result );配列として行を取得する
int mssql_field_length ( int result , int [offset] );フィールド長を得る
int mssql_field_name ( int result , int [offset] );フィールド名を得る
int mssql_field_seek ( int result , int field_offset );フィールドオフセットを設定する
string mssql_field_type ( int result , int [offset] );フィールド型を得る
int mssql_free_result ( int result );結果保持用メモリを解放する
string mssql_get_last_message ();サーバーの直近のメッセージを返す(min_message_severityに依存する?)
string mssql_guid_string ( string binary , [ int short_format ] );16バイトバイナリGUIDを文字列に変換する
int mssql_init ( string sp_name , [ int conn_id ] );ストアドプロシージャまたはリモートのストアドプロシージャを初期化する
void mssql_min_error_severity ( int severity );エラー判定基準を小さく設定する
void mssql_min_message_severity ( int severity );メッセージ判定基準を小さく設定する
bool mssql_next_result ( int result_id );次の結果に内部結果ポインタを移動する
int mssql_num_fields ( int result );結果のフィールド数を得る
int mssql_num_rows ( string result );結果の行数を得る
int mssql_pconnect ( string [servername] , string [username] , string [password] );持続的 MS SQL 接続をオープンする
int mssql_query ( string query , int [link_identifier] );MS SQL クエリーを送る
int mssql_result ( int result , int i , mixed field );結果データを得る
int mssql_rows_affected ( int conn_id );クエリにより取得したレコード数を返す
int mssql_select_db ( string database_name , int [link_identifier] );MS SQL データベースを選択する
int muscat_close ( resource muscat_handle );muscatセッションをシャットダウンし、全てのメモリをPHPに解放する
string muscat_get ( resource muscat_handle );コアmuscat APIから1行分のデータを取得する
int muscat_give ( resource muscat_handle , string string );コアmuscat APIに文字列を送信する
resource muscat_setup_net ( string muscat_host , int port );新規muscatセッションを作成しハンドルを返す
resource muscat_setup ( int size , [ string muscat_dir ] );muscatセッションを新規に作成し、ハンドルを返す
int mysql_affected_rows ( int [link_identifier] );一番最近のクエリーで変更された行の数を得る
int mysql_change_user ( string user , string password , string [database] , resource [link_identifier] );アクティブな接続でログイン中のユーザーを変更する
bool mysql_close ( resource [link_identifier] );MySQL接続を閉じる
resource mysql_connect ( [ string server ] , [ string username ] , [ string password ] , [ bool new_link ] , [ int client_flags ] );MySQLサーバーへの接続をオープンする
bool mysql_create_db ( string database_name , resource [link_identifier] );MySQLデータベースを作成する
bool mysql_data_seek ( resource result_identifier , int row_number );内部的な結果ポインタを移動する
string mysql_db_name ( resource result , int row , mixed [field] );データベース名を得る
resource mysql_db_query ( string database , string query , resource [link_identifier] );MySQLクエリーを送信する
bool mysql_drop_db ( string database_name , resource [link_identifier] );MySQLデータベースを破棄(削除)する
int mysql_errno ( resource [link_identifier] );直近のMySQL処理からエラーメッセージのエラー番号を返す
string mysql_error ( resource [link_identifier] );直近に実行されたMySQLコールのエラーメッセージを返す
string mysql_escape_string ( string unescaped_string );mysql_queryで使用するために文字列をエスケープする
array mysql_fetch_array ( resource result , int [result_type] );連想配列、添字配列、またはその両方として結果の行を取得する
array mysql_fetch_assoc ( resource result );連想配列として結果の行を取得する
object mysql_fetch_field ( resource result , int [field_offset] );結果からカラム情報を取得し、オブジェクトとして返す
array mysql_fetch_lengths ( resource result );結果における各出力の長さを得る
object mysql_fetch_object ( resource result , int [result_typ] );結果の行をオブジェクトとして取得する
array mysql_fetch_row ( resource result );結果を添字配列として取得する
string mysql_field_flags ( resource result , int field_offset );結果において指定したフィールドのフラグを得る
int mysql_field_len ( int result , int field_offset );指定したフィールドの長さを得る
string mysql_field_name ( resource result , int field_index );結果において指定したフィールド名を得る
int mysql_field_seek ( int result , int field_offset );結果ポインタを指定したフィールドオフセットにセットする
string mysql_field_table ( int result , int field_offset );指定したフィールドが含まれるテーブルの名前を得る
string mysql_field_type ( string result , int field_offset );結果において指定したフィールドの型を得る
int mysql_free_result ( int result );結果保持用メモリを開放する
string mysql_get_client_info ( void );MySQLクライアント情報を得る
string mysql_get_host_info ( [ resource link_identifier ] );MySQLホスト情報を得る
int mysql_get_proto_info ( [ resource link_identifier ] );MySQLプロトコル情報を得る
int mysql_get_server_info ( [ resource link_identifier ] );MySQLサーバ情報を得る
int mysql_insert_id ( int [link_identifier] );直近のINSERTで生成されたIDを得る
int mysql_list_dbs ( int [link_identifier] );MySQLサーバー上で利用可能なデータベースのリストを得る
int mysql_list_fields ( string database_name , string table_name , int [link_identifier] );MySQL結果フィールドのリストを得る
int mysql_list_tables ( string database , int [link_identifier] );MySQL データベース上のテーブルのリストを得る
int mysql_num_fields ( int result );結果におけるフィールドの数を得る
int mysql_num_rows ( int result );結果における行の数を得る
int mysql_pconnect ( string [hostname [:port] [:/path/to/socket] ] , string [username] , string [password] );MySQLサーバーへの持続的な接続をオープンする
int mysql_query ( string query , int [link_identifier] );SQLクエリーをMySQLに送信する
mixed mysql_result ( int result , int row , mixed [field] );結果データを得る
int mysql_select_db ( string database_name , int [link_identifier] );MySQL データベースを選択する
string mysql_tablename ( int result , int i );フィールドのテーブル名を得る
mixed mysqli_affected_rows ( resource link );直近のクエリーで変更された行の数を得る
bool mysqli_autocommit ( resource link , bool mode );データベース更新の自動コミットをオンまたはオフにする
bool mysqli_bind_param ( resource stmt , mixed variable , int type );準備されたステートメントに値を割り当てる
bool mysqli_change_user ( resource link , string user , string password , string database );指定されたデータベース接続のユーザー名を変更する
string mysqli_character_set_name ( resource link );データベース接続のデフォルトの文字コードセットを返す
bool mysqli_close ( resource link );データベース接続を閉じる
bool mysqli_commit ( resource link );現在ののトランザクションをコミットする
resource mysqli_connect ( [ string hostname ] , [ string username ] , [ string passwd ] , [ string dbname ] , [ int port ] , [ string socket ] );新規にMySQLサーバへの接続をオープンする
int ncurses_addch ( int ch );カレント位置に文字を追加し、カーソルを進める
int ncurses_addchnstr ( string s , int n );カレント位置に指定した長さの属性付きの文字列を追加する
int ncurses_addchstr ( string s );カレントの位置に属性付きの文字列を追加する
int ncurses_addnstr ( string s , int n );カレントの位置に指定した長さの文字列を追加する
int ncurses_addstr ( string text );カレント位置にテキストを出力する
int ncurses_assume_default_colors ( int fg , int bg );カラー0のデフォルト色を定義する
int ncurses_attroff ( int attributes );指定した属性を無効とする
int ncurses_attron ( int attributes );指定した属性を有効にする
int ncurses_attrset ( int attributes );指定した属性を設定する
int ncurses_baudrate ();端末のボーレートを返す
int ncurses_beep ();端末のビープを鳴らす
int ncurses_bkgd ( int attrchar );端末画面の背景属性を設定する
void ncurses_bkgdset ( int attrchar );画面背景を制御する
int ncurses_border ( int left , int right , int top , int bottom , int tl_corner , int tr_corner , int bl_corner , int br_corner );属性付きの文字で画面周囲に境界を描画する
bool ncurses_can_change_color ();端末の色を変更可能かどうか確認する
bool ncurses_cbreak ();入力のバッファリングを変更する
bool ncurses_clear ();スクリーンをクリアする
bool ncurses_clrtobot ();カレント位置から最下部までスクリーンをクリアする
bool ncurses_clrtoeol ();カレント位置から行末までスクリーンをクリアする
int ncurses_color_set ( int pair );前景/背景色を設定する
int ncurses_curs_set ( int visibility );カーソル状態を設定する
bool ncurses_def_prog_mode ();端末(プログラム)モードを保存する
bool ncurses_def_shell_mode ();端末(シェル)モードを保存する
int ncurses_define_key ( string definition , int keycode );キーコードを定義する
int ncurses_delay_output ( int milliseconds );パディング文字を用いて端末出力を遅延させる
bool ncurses_delch ();カレント位置の文字を削除し、残った部分を左に移動する
bool ncurses_deleteln ();カレント位置の行を削除し、残りの部分を上に上げる
int ncurses_delwin ( resource window );ncursesウインドウを削除する
bool ncurses_doupdate ();準備中の全ての出力を書き込み、端末をリフレッシュする
bool ncurses_echo ();キーボード入力のエコーを有効とする
int ncurses_echochar ( int character );リファレッシュを行いつつ1文字出力する
int ncurses_end ();ncursesを終了し、画面を消去する
bool ncurses_erase ();端末画面を消去する
string ncurses_erasechar ();消去されたカレントの文字を返す
int ncurses_filter ();
bool ncurses_flash ();端末画面をフラッシュする(ビジュアルベル)
bool ncurses_flushinp ();キーボード入力バッファをフラッシュする
int ncurses_getch ();キーボードから1文字読み込む
bool ncurses_getmouse ( array mevent );マウスイベントを読みこむ
int ncurses_halfdelay ( int tenth );端末をハーフディレイモードにする
bool ncurses_has_colors ();カラー端末かどうか確認する
bool ncurses_has_ic ();挿入/削除機能の有無を確認する
bool ncurses_has_il ();行挿入/削除機能の有無を確認する
int ncurses_has_key ( int keycode );端末キーボードにおいてファンクションキーの有無を調べる
int ncurses_hline ( int charattr , int n );カレント位置に属性付きの文字を用いて最大n文字長の線を水平に描画する
string ncurses_inch ();カレント位置の文字と属性を取得する
int ncurses_init_color ( int color , int r , int g , int b );新規にRGB値を設定する
int ncurses_init_pair ( int pair , int fg , int bg );色の組を確保する
int ncurses_init ();ncursesを初期化する
int ncurses_insch ( int character );文字を挿入し、カレント位置にある文字を含む残りの行を移動する
int ncurses_insdelln ( int count );カレント行の後に複数の行を挿入し、スクロールダウンする(負の数を指定すると削除し、スクロールアップする)
bool ncurses_insertln ();行を挿入し、残りの部分をスクロールダウンする
int ncurses_insstr ( string text );カレント位置に文字列を挿入し、残りの行を右に移動する
int ncurses_instr ( string buffer );端末画面から文字列を読み込む
bool ncurses_isendwin ();Ncursesがendwinモードの場合、通常の画面出力が実行可能
int ncurses_keyok ( int keycode , bool enable );キーコードを有効または無効にする
bool ncurses_killchar ();カレントの行削除文字を返す
string ncurses_longname ();端末の説明を返す
int ncurses_mouseinterval ( int milliseconds );マウスボタンクリックのタイムアウトを設定する
int ncurses_mousemask ( int newmask , int oldmask );マウスオプションを設定する
int ncurses_move ( int y , int x );出力位置を移動する
int ncurses_mvaddch ( int y , int x , int c );カレント位置を移動し、文字を追加する
int ncurses_mvaddchnstr ( int y , int x , string s , int n );位置を移動し、指定長の属性付きの文字列を追加する
int ncurses_mvaddchstr ( int y , int x , string s );位置を移動し、属性付きの文字列を追加する
int ncurses_mvaddnstr ( int y , int x , string s , int n );位置を移動し、指定長の文字列を追加する
int ncurses_mvaddstr ( int y , int x , string s );位置を移動し、文字列を追加する
int ncurses_mvcur ( int old_y , int old_x , int new_y , int new_x );直ちにカーソルを移動する
int ncurses_mvdelch ( int y , int x );位置を移動し、文字を削除、行の残りを左シフトする
int ncurses_mvgetch ( int y , int x );位置を移動し、新しい位置で文字を得る
int ncurses_mvhline ( int y , int x , int attrchar , int n );位置を新しく設定し、属性付きの文字を用いて最大n文字の水平線を描画
int ncurses_mvinch ( int y , int x );位置を移動し、新しい位置の属性付きの文字を取得する
int ncurses_mvvline ( int y , int x , int attrchar , int n );位置を新しく設定し、属性付きの文字を用いて最大n文字の垂直線を描画する
int ncurses_mvwaddstr ( resource window , int y , int x , string text );ウインドウの新規位置に文字列を追加する
int ncurses_napms ( int milliseconds );スリープ
int ncurses_newwin ( int rows , int cols , int y , int x );新規ウインドウを作成する
bool ncurses_nl ();改行を復改/ラインフィードに変換
bool ncurses_nocbreak ();端末をcookedモードに変更する
bool ncurses_noecho ();キーボード入力エコーを無効にする
bool ncurses_nonl ();改行を復改/ラインフィードに変換しない
int ncurses_noqiflush ();シグナル文字のフラッシュを無効とする
bool ncurses_noraw ();端末をrawモード以外に変更する
int ncurses_putp ( string text );
int ncurses_qiflush ();シグナル文字のフラッシュを有効とする
bool ncurses_raw ();端末をrawモードに変更する
int ncurses_refresh ( int ch );画面をリフレッシュする
bool ncurses_resetty ();保存した端末モードに復帰する
bool ncurses_savetty ();端末の状態を保存する
int ncurses_scr_dump ( string filename );画面の内容をファイルにダンプする
int ncurses_scr_init ( string filename );ファイルダンプから画面を初期化する
int ncurses_scr_restore ( string filename );ファイルダンプから画面を復帰する
int ncurses_scr_set ( string filename );ファイルダンプから画面を継承する
int ncurses_scrl ( int count );カレント位置を変更せずに画面の内容をスクロールアップまたはダウンする
bool ncurses_slk_attr ();カレントのソフトラベルキー属性を返す
int ncurses_slk_attroff ( int intarg );
int ncurses_slk_attron ( int intarg );
int ncurses_slk_attrset ( int intarg );
bool ncurses_slk_clear ();画面からソフトラベルをクリアする
int ncurses_slk_color ( int intarg );ソフトラベルキーの色を設定する
bool ncurses_slk_init ( int format );ソフトラベルキー関数を初期化する
bool ncurses_slk_noutrefresh ();仮想画面にソフトラベルキーをコピーする
bool ncurses_slk_refresh ();ソフトラベルキーを画面にコピーする
bool ncurses_slk_restore ();ソフトラベルキーを復帰する
bool ncurses_slk_touch ();ncurses_slk_noutrefreshを実行する際に強制的に出力する
int ncurses_standend ();'standout'属性の使用を停止する
int ncurses_standout ();'standout'属性の使用を開始する
int ncurses_start_color ();色の使用を開始する
bool ncurses_termattrs ();端末でサポートされる全ての属性フラグの論理和を返す
string ncurses_termname ();端末の(簡略)-名を返す
void ncurses_timeout ( int millisec );特別なキーシーケンスのタイムアウトを設定する
int ncurses_typeahead ( int fd );typeahead確認用に別のファイル記述子を指定する
int ncurses_ungetch ( int keycode );入力ストリームに1文字戻す
bool ncurses_ungetmouse ( array mevent );マウスイベントをキーにプッシュする
bool ncurses_use_default_colors ();端末のデフォルト色をカラーID -1に割り付ける
void ncurses_use_env ( bool flag );端末の大きさに関する環境情報の使用を制御する
int ncurses_use_extended_names ( bool flag );terminfo記述において拡張名の使用を制御する
int ncurses_vidattr ( int intarg );
int ncurses_vline ( int charattr , int n );カレント位置に最大n文字の属性付きの文字を用いて垂直線を描画する
int ncurses_wrefresh ( resource window );端末画面のウインドウをリフレッシュする
int checkdnsrr ( string host , [ string type ] );指定したインターネットホスト名もしくはIPアドレスに対応するDNSレコードを検索する
int closelog ();システムログへの接続を閉じる
int debugger_off ();PHPの内部デバッガを無効にする(PHP 3)
int debugger_on ( string address );PHPの内部デバッガを有効にする
void define_syslog_variables ();syslogに関係する全ての定数を初期化する
int dns_check_record ( string host , [ string type ] );checkdnsrrと同義
int dns_get_mx ( string hostname , array mxhosts , [ array &weight ] );getmxrrと同義
resource fsockopen ( string target , int port , [ int &errno ] , [ string &errstr ] , [ float timeout ] );インターネットもしくはUNIXドメインのソケット接続をオープンする
string gethostbyaddr ( string ip_address );指定したIPアドレスに対応するインターネットホスト名を取得する
string gethostbyname ( string hostname );インターネットホスト名に対応するIPアドレスを取得する
array gethostbynamel ( string hostname );指定したインターネットホスト名に対応するIPアドレスのリストを取得する。
int getmxrr ( string hostname , array mxhosts , [ array weight ] );指定したインターネットホスト名に対応するMXレコードを取得する
int getprotobyname ( string name );プロトコル名のプロトコル番号を得る
string getprotobynumber ( int number );プロトコル番号が指すプロトコル名を得る
int getservbyname ( string service , string protocol );インターネットサービスおよびプロトコルが関連するポート番号を得る
string getservbyport ( int port , string protocol );ポートおよびプロトコルに対応するインターネットサービスを得る
int ip2long ( string ip_address );(IPv4) インターネットプロトコルドット表記のアドレスを適当なアドレスを有する文字列に変換する
string long2ip ( int proper_address );(IPv4) インターネットアドレスをインターネット標準ドット表記に変換します。
int openlog ( string ident , int option , int facility );システムログへの接続をオープンする
int pfsockopen ( string hostname , int port , [ int errno ] , [ string errstr ] , [ int timeout ] );持続的なInternetまたはUnixドメインソケット接続をオープンする
array socket_get_status ( resource socket_get_status );既存のソケットリソースに関する情報を返す
int socket_set_blocking ( int socket descriptor , int mode );ソケットにおけるブロック非ブロックモードの設定
bool socket_set_timeout ( int socket descriptor , int seconds , int microseconds );ソケットのタイムアウト時間を設定する
int syslog ( int priority , string message );システムログのメッセージを生成する
void yp_all ( string domain , string map , string callback );マップを走査し、各エントリの関数をコールする
array yp_cat ( string domain , string map );エントリマップを含む配列を返す
string yp_err_string ();前の操作に関するエラー文字列を返す
int yp_errno ();前の操作のエラーコードを返す
array yp_first ( string domain , string map );指定したマップから最初のキー/値の組を返す
int yp_get_default_domain ();デフォルト NIS ドメインを取得する
string yp_master ( string domain , string map );指定したマップのマスターNISサーバーのマシン名を返す
string yp_match ( string domain , string map , string key );検索した行を返す
array yp_next ( string domain , string map , string key );マップ map から次のキー/値の組を返す
int yp_order ( string domain , string map );マップの呼出番号を返す
array notes_body ( string server , string mailbox , int msg_number );指定したサーバにある指定したメールボックスのメッセージmeg_numberをオープンする
string notes_copy_db ( string from_database_name , string to_database_name );フォームform_nameを用いてノートを作成する
bool notes_create_db ( string database_name );ロータスノーツデータベースを作成する
string notes_create_note ( string database_name , string form_name );フォームform_nameを用いてノートを作成する
bool notes_drop_db ( string database_name );ロータスノーツデータベースを破棄する
bool notes_find_note ( string database_name , string name , [ string type ] );database_nameにあるノートIDを返す。ノートの名前を指定する。typeは省略可
object notes_header_info ( string server , string mailbox , int msg_number );指定したサーバ上の指定したメールボックスにあるメッセージmsg_numberをオープンする
bool notes_list_msgs ( string db );選択したdatabase_nameからノートを返す
string notes_mark_read ( string database_name , string user_name , string note_id );ユーザuser_name用にnote_idに既読マークを付ける
string notes_mark_unread ( string database_name , string user_name , string note_id );ユーザuser_name用にnote_idに未読マークを付ける
bool notes_nav_create ( string database_name , string name );database_nameにナビゲータ名を作成する
string notes_search ( string database_name , string keywords );database_nameのキーワードにマッチするノーツを見つける
string notes_unread ( string database_name , string user_name );カレントユーザuser_nameに関して未読のノートIDを返す
string notes_version ( string database_name );ロータスノーツのバージョンを取得する
array nsapi_request_headers ();HTTPリクエストヘッダを全て取得する
array nsapi_response_headers ();HTTPレスポンスヘッダを全て取得する
int nsapi_virtual ( string uri );NSAPI サブリクエストを発行する
void aggregate ( object object , string class_name );メソッドおよびプロパティの動的なクラス/オブジェクト集約を行う
bool oci_bind_by_name ( resource stmt , string ph_name , mixed variable , [ int maxlength ] , [ int type ] );Oracle プレースホルダーに PHP 変数をバインドする
bool oci_cancel ( resource stmt );カーソルからの読み込みをキャンセルする
bool oci_close ( resource connection );Oracleとの接続を閉じる
bool OCI-Collection->append ( mixed value );コレクションにオブジェクトを追加する
bool OCI-Collection->assign ( OCI-Collection from );他の存在するコレクションからコレクションを割り当てる
bool OCI-Collection->assignElem ( int index , mixed value );コレクションの要素に値を割り当てる
mixed OCI-Collection->getElem ( int index );要素の値を返す
bool OCI-Collection->free ();コレクションオブジェクトに関連付けられたリソースを解放する
int OCI-Collection->max ();コレクション内の要素の最大数を取得する
int OCI-Collection->size ();コレクションのサイズを返す
bool OCI-Collection->trim ( int num );コレクションの最後から要素を切り取る
bool oci_commit ( resource connection );未解決の文をコミットする
resource oci_connect ( string username , string password , [ string db ] , [ string charset ] );Oracle サーバへの接続を確立する
bool oci_define_by_name ( resource statement , string column_name , mixed variable , [ int type ] );SELECT 実行中、定義用の PHP 変数を使用する
array oci_error ( [ resource source ] );最後に見つかったエラーを返す
bool oci_execute ( resource stmt , [ int mode ] );文を実行する
int oci_fetch_all ( resource statement , array output , [ int skip ] , [ int maxrows ] , [ int flags ] );結果データの全ての行を配列に取得する
array oci_fetch_array ( resource statement , [ int mode ] );結果データ空の次の行を連想配列または配列、またはその両方で返す
array oci_fetch_assoc ( resource statement );結果データの次の行を連想配列で返す
object oci_fetch_object ( resource statement );結果の次の行をオブジェクトとして返す
array oci_fetch_row ( resource statement );結果データの次の行を配列で返す
bool oci_fetch ( resource statement );結果バッファーの次の行を取得する
bool oci_field_is_null ( resource stmt , mixed field );フィールドが NULL であるかどうかを確認する
string oci_field_name ( resource statement , int field );文からのフィールド名を返す
int oci_field_precision ( resource statement , int field );フィールドの精度を問い合わせる
int oci_field_scale ( resource statement , int field );フィールドの桁数を問い合わせる
int oci_field_size ( resource stmt , mixed field );フィールドサイズを返す
int oci_field_type_raw ( resource statement , int field );Oracle におけるフィールドの型を問い合わせる
mixed oci_field_type ( resource stmt , int field );フィールドのデータ型を返す
bool descriptor->free ();ディスクリプタに関連付けられたリソースを解放する
bool oci_free_statement ( resource statement );文やカーソルに関連付けられた全てのリソースを解放する
void oci_internal_debug ( int onoff );内部デバッグ用出力有効または無効にする
bool lob->append ( OCI-Lob lob_from );ラージオブジェクトを他のラージオブジェクトにデータを追加する
bool lob->close ();LOB ディスクリプタを閉じる
bool oci_lob_copy ( OCI-Lob lob_to , OCI-Lob lob_from , [ int length ] );ラージオブジェクトをコピーする
bool lob->eof ();ラージオブジェクトのディスクリプタが EOF かどうかを調べる
int lob->erase ( [ int offset ] , [ int length ] );内部 LOB データの特定の位置を消去する
bool lob->export ( string filename , [ int start ] , [ int length ] );LOB の内容をファイルに出力する
bool lob->flush ( [ int flag ] );LOB のバッファをサーバにフラッシュする、あるいは書き込む
bool lob->import ( string filename );ファイルデータを LOB にインポートする
bool oci_lob_is_equal ( OCI-Lob lob1 , OCI-Lob lob2 );2 つの LOB/FILE ロケータの等価性を比較する
string lob->load ();ラージオブジェクトの内容を返す
string lob->read ( int length );ラージオブジェクトの一部を読み込む
bool lob->rewind ();内部ポインタをラージオブジェクトの先頭に移動する
bool lob->save ( string data , [ int offset ] );データをラージオブジェクトに書き込む
bool lob->seek ( int offset , [ int whence ] );ラージオブジェクトの内部ポインタをセットする
int lob->size ();ラージオブジェクトのサイズを返す
int lob->tell ();ラージオブジェクトの内部ポインタの現在位置を返す
bool lob->truncate ( [ int length ] );ラージオブジェクトを切りつめる
bool lob->writeTemporary ( string data , [ int lob_type ] );一時的なラージオブジェクトを書き込む
int lob->write ( string data , [ int length ] );データをラージオブジェクトに書き込む
OCI-Collection oci_new_collection ( resource connection , string tdo , [ string schema ] );新しいコレクションオブジェクトを割り当てる
resource oci_new_connect ( string username , string password , [ string db ] , [ string charset ] );Oracle サーバへの新規接続を確立する
resource oci_new_cursor ( resource connection );新規カーソル (ステートメントハンドル) を割り当て返す
OCI-Lob oci_new_descriptor ( resource connection , [ int type ] );空の新規 LOB あるいは FILE ディスクリプタを初期化する
int oci_num_fields ( resource statement );ある文における結果のカラム数を返す
int oci_num_rows ( resource stmt );文の実行で作用された行数を取得する
resource oci_parse ( resource connection , string query );実行のために Oracle の文をパースする
bool oci_password_change ( resource connection , string username , string old_password , string new_password );Oracle ユーザーのパスワードを変更する
resource oci_pconnect ( string username , string password , [ string db ] , [ string charset ] );持続的接続を使用してOracle データベースに接続する
mixed oci_result ( resource statement , mixed field );フェッチした行からフィールドの値を取得する
bool oci_rollback ( resource connection );未解決のトランザクションをロールバックする
string oci_server_version ( resource connection );サーバのバージョンを返す
bool oci_set_prefetch ( resource statement , [ int rows ] );プリフェッチする行数を設定する
string oci_statement_type ( resource statement );OCI ステートメントの種類を返す
bool ocibindbyname ( resource stmt , string ph_name , mixed variable , [ int maxlength ] , [ int type ] );Oracle プレースホルダーに PHP 変数をバインドする
bool ocicancel ( resource stmt );カーソルからの読み込みをキャンセルする
bool ocicloselob ();lob ディスクリプタを閉じる
bool ocicollappend ( string value );コレクションにオブジェクトを追加する
bool ocicollassign ( OCI-Collection from );他の存在するコレクションからコレクションを割り当てる
bool ocicollassignelem ( int ndx , string val );要素値をコレクションのインデックス ndx に割り当てる
string ocicollgetelem ( int ndx );コレクションのインデックス ndx にある値を取得する
int ocicollmax ();コレクションにある要素の最大数を取得する
int ocicollsize ();コレクションのサイズを返す
bool ocicolltrim ( int num );コレクションの最後から num 個の要素を切り取る
bool ocicolumnisnull ( resource stmt , mixed col );結果カラムが NULL であるかどうかを確認する
string ocicolumnname ( resource stmt , int col );カラムの名前を返す
int ocicolumnprecision ( resource stmt , int col );カラムの精度を問い合わせる
int ocicolumnscale ( resource stmt , int col );カラムの桁数を問い合わせる
int ocicolumnsize ( resource stmt , mixed column );結果カラムサイズを返す
mixed ocicolumntype ( resource stmt , int col );カラムのデータ型を返す
int ocicolumntyperaw ( resource stmt , int col );Oracle におけるカラムの型を問い合わせる
bool ocicommit ( resource connection );未解決のトランザクションをコミットする
bool ocidefinebyname ( resource stmt , string column_name , mixed variable , [ int type ] );SELECT 実行中、定義用の PHP 変数を使用する
array ocierror ( [ resource stmt_or_conn_or_global ] );stmt|conn|globalに関する直近のエラーを返す
bool ociexecute ( resource stmt , [ int mode ] );文を実行する
bool ocifetch ( resource stmt );結果バッファーの次の行を取得する
int ocifetchinto ( resource statement , array result , [ int mode ] );結果配列の次の行を取得する
int ocifetchstatement ( resource stmt , array output , [ int skip ] , [ int maxrows ] , [ int flags ] );結果データの全ての行を配列に取得する
bool ocifreecollection ();コレクションオブジェクトを削除する
bool ocifreecursor ( resource stmt );カーソルに関連づけられた全リソースを解放する
bool ocifreedesc ();ラージオブジェクト記述子を削除する
bool ocifreestatement ( resource stmt );ある文に関連する全リソースを解放する
bool lob->getBuffering ();ラージオブジェクトの現在のバッファリング設定を返す
void ociinternaldebug ( int onoff );内部デバッグ用出力有効または無効にする。デフォルトでは無効
string ociloadlob ();ラージオブジェクトをロードする
bool ocilogoff ( resource connection );Oracleとの接続を閉じる
resource ocilogon ( string username , string password , [ string db ] , [ string charset ] );Oracle への接続を確立する
OCI-Collection ocinewcollection ( resource connection , string tdo , [ string schema ] );新しいコレクションを初期化する
resource ocinewcursor ( resource conn );新規カーソル(命令ハンドル)を返す
OCI-Lob ocinewdescriptor ( resource connection , [ int type ] );空の新規ディスクリプタLOB/FILE(LOBがデフォルト)を初期化する
resource ocinlogon ( string username , string password , [ string db ] , [ string charset ] );Oracle データベースに接続し、新規接続にログオン、新規セッションを返す
int ocinumcols ( resource stmt );ある文における結果のカラム数を返す
resource ociparse ( resource conn , string query );クエリーをパースし、Oracle ステートメントを返す
resource ociplogon ( string username , string password , [ string db ] , [ string charset ] );持続的接続を使用してOracle データベースに接続する
mixed ociresult ( resource statement , mixed col );取得された行におけるカラムの値を得る
bool ocirollback ( resource connection );未解決のトランザクションをロールバックする
int ocirowcount ( resource stmt );作用された行の数を得る
bool ocisavelob ();ラージオブジェクトを保存する
bool ocisavelobfile ();ラージオブジェクトファイルを保存する
string ociserverversion ( resource conn );サーバーのバージョン情報を有する文字列を返す
bool lob->setBuffering ( bool on_off );ラージオブジェクトのための現在のバッファリング設定を変更する
bool ocisetprefetch ( resource stmt , int rows );事前取得するレコード数を設定
string ocistatementtype ( resource stmt );OCI ステートメントの種類を返す
bool ociwritelobtofile ( [ string filename ] , [ int start ] , [ int length ] );ラージオブジェクトファイルを保存する
bool ociwritetemporarylob ( string var , [ int lob_type ] );一時的な blob を書き込む
bool openssl_csr_export_to_file ( resource csr , string outfilename , [ bool notext ] );CSRをファイルまたは変数にエキスポートする
bool openssl_csr_export ( resource csr , string out , [ bool notext ] );CSRをファイルまたは変数にエキスポートする
bool openssl_csr_new ( array dn , resource privkey , [ array extraattribs ] , [ array configargs ] );秘密キーとCSRを生成する
resource openssl_csr_sign ( mixed csr , mixed x509 , mixed priv_key , long days );他のCERTで証明書をサインする
mixed openssl_error_string ();OpenSSL エラーメッセージを返す
void openssl_free_key ( resource key_identifier );キーリソースを開放する
resource openssl_get_privatekey ( mixed key , string [passphrase] );PEMフォーマットされた秘密キーを使用可能とする
resource openssl_get_publickey ( mixed certificate );証明書(certificate)から公開キーを展開し、使用可能とする
bool openssl_open ( string sealed_data , string open_data , string env_key , mixed priv_key_id );シール(暗号化)されたデータをオープン(復号)する
bool openssl_pkcs7_decrypt ( string infilename , string outfilename , mixed recipcert , mixed recipkey );S/MIME 暗号化されたメッセージを復号化する
bool openssl_pkcs7_encrypt ( string infilename , string outfilename , mixed recipcerts , array headers , [ long flags ] );S/MIME メッセージを暗号化する
bool openssl_pkcs7_sign ( string infilename , string outfilename , mixed signcert , mixed privkey , array headers , [ long flags ] , [ string extracertsfilename ] );S/MIME メッセージにサインする
bool openssl_pkcs7_verify ( string filename , int flags , [ string outfilename ] , [ array cainfo ] , [ string extracerts ] );S/MIMEサインされたメッセージのサインを確認する
bool openssl_pkey_export_to_file ( mixed key , string outfilename , [ string passphrase ] , [ array config_args ] );キーのエキスポート可能な表現をファイルに取得する
bool openssl_pkey_export ( mixed key , mixed out , [ string passphrase ] , [ array config_args ] );あるキーのエクスポート可能な表現を文字列またはファイルに取得する
resource openssl_pkey_new ( [ array configargs ] );新規に秘密キーを生成する
bool openssl_private_decrypt ( string data , string crypted , mixed key , [ int padding ] );秘密キーでデータを復号化する
bool openssl_private_encrypt ( string data , string crypted , mixed key , [ int padding ] );秘密キーでデータを暗号化する
bool openssl_public_decrypt ( string data , string crypted , resource key , [ int padding ] );公開キーでデータを復号化する
bool openssl_public_encrypt ( string data , string crypted , mixed key , [ int padding ] );公開キーでデータを暗号化する
int openssl_seal ( string data , string sealed_data , array env_keys , array pub_key_ids );データをシール(暗号化)する
bool openssl_sign ( string data , string signature , int priv_key_id );署名を生成する
int openssl_verify ( string data , string signature , mixed pub_key_id );署名を認証する
bool openssl_x509_check_private_key ( mixed cert , mixed key );秘密キーがあるCERTに対応するかを確認する
bool openssl_x509_checkpurpose ( mixed x509cert , int purpose , array cainfo , [ string untrustedfile ] );証明書が特定の目的に使用可能かどうか確認します。
bool openssl_x509_export_to_file ( mixed x509 , string outfilename , [ bool notext ] );CERTをファイルまたは変数にエキスポートする
bool openssl_x509_export ( mixed x509 , string outfilename , [ bool notext ] );CERTをファイルまたは変数をエキスポートする
void openssl_x509_free ( resource x509cert );証明書リソースを開放する
array openssl_x509_parse ( mixed x509cert , [ bool shortnames ] );Parse an X509 証明書をパースし、配列として情報を返す
resource openssl_x509_read ( mixed x509certdata );Parse an X.509 証明書をパースし、リソースIDを返す
bool ora_bind ( resource cursor , string PHP_variable_name , string SQL_parameter_name , int length , [ int type ] );PHP 変数を Oracle パラメータにバインドする
bool ora_close ( resource cursor );Oracleカーソルをクローズする
string ora_columnname ( resource cursor , int column );Oracle結果カラムの名前を取得する
int ora_columnsize ( resource cursor , int column );Oracle の結果カラムのサイズを返す
string ora_columntype ( resource cursor , int column );Oracleのカラムの型を取得する
bool ora_commit ( resource conn );Oracle トランザクションをコミットする
bool ora_commitoff ( resource conn );オートコミットをオフにする
bool ora_commiton ( resource conn );オートコミットを有効にする
resource ora_do ( resource conn , string query );パース、実行、フェッチを行う
string ora_error ( [ resource cursor_or_connection ] );Oracleエラーメッセージの取得
int ora_errorcode ( [ resource cursor_or_connection ] );Oracle エラーコードを取得する
bool ora_exec ( resource cursor );Oracleカーソル上でのパースしたステートメントの実行
int ora_fetch_into ( resource cursor , array result , [ int flags ] );指定した配列resultにレコードを取得する
bool ora_fetch ( resource cursor );カーソルから 1 行分のデータを取得
mixed ora_getcolumn ( resource cursor , int column );取得した行からデータを得る
bool ora_logoff ( resource connection );Oracle 接続を閉じる
resource ora_logon ( string user , string password );Oracle接続をオープンする
int ora_numcols ( resource cursor );カラム数を返す
int ora_numrows ( resource cursor );レコード数を返す
resource ora_open ( resource connection );Oracleカーソルをオープンする
bool ora_parse ( resource cursor , string sql_statement , [ int defer ] );Oracle の SQL ステートメントをパースする
resource ora_plogon ( string user , string password );持続的な Oracle接続をオープンする
bool ora_rollback ( resource connection );トランザクションをロールバックする
void flush ();出力バッファをフラッシュする
void ob_clean ();出力バッファをクリア(消去)する
bool ob_end_clean ();出力用バッファをクリア(消去)し、出力のバッファリングをオフにする
bool ob_end_flush ();出力用バッファをフラッシュ(送信)し、出力のバッファリングをオフにする
void ob_flush ();出力バッファをフラッシュ(送信)する
string ob_get_contents ();出力用バッファの内容を返す
int ob_get_length ();出力バッファの長さを返す
int ob_get_level ();出力バッファリング機構のネストレベルを返す
array ob_get_status ( [ bool full_status ] );Get status of output buffers出力バッファのステータスを取得する
string ob_gzhandler ( string buffer , [ int mode ] );出力バッファをgzip圧縮するためのob_startコールバック関数
void ob_implicit_flush ( [ int flag ] );自動フラッシュをオンまたはオフにする
bool ob_start ( [ callback output_callback ] , [ int chunk_size ] , [ bool erase ] );出力のバッファリングを有効にする
void overload ( [ string class_name ] );クラスのプロパティおよびメソッドに関してオーバーロードを可能にする
void ovrimos_close_all ();ovrimosへの接続を全て閉じる
void ovrimos_close ( int connection );ovrimosへの接続を閉じる
int ovrimos_commit ( int connection_id );トランザクションをコミットする
int ovrimos_connect ( string host , string db , string user , string password );指定したデータベースに接続する
int ovrimos_cursor ( int result_id );カーソルの名前を返す
int ovrimos_exec ( int connection_id , string query );SQL命令を実行する
boolean ovrimos_execute ( int result_id , array [parameters_array] );準備されたSQL命令を実行する
boolean ovrimos_fetch_into ( int result_id , array result_array , string [how] , int [rownumber] );結果からレコードを取得する
boolean ovrimos_fetch_row ( int result_id , int [how] , int [row_number] );結果からレコードを取得する
int ovrimos_field_len ( int result_id , int field_number );出力カラムの長さを返す
int ovrimos_field_name ( int result_id , int field_number );出力のカラム名を返す
int ovrimos_field_num ( int result_id , string field_name );出力カラムから(1から始まる)インデックスを返す
int ovrimos_field_type ( int result_id , int field_number );出力カラムの(数値)型を返す
int ovrimos_free_result ( int result_id );指定したresult_idを開放する
int ovrimos_longreadlen ( int result_id , int length );longデータ型から取得されるバイト数を指定する
int ovrimos_num_fields ( int result_id );カラム数を返す
int ovrimos_num_rows ( int result_id );update 命令により変更されたレコードの数を返す
int ovrimos_prepare ( int connection_id , string query );SQL命令を準備する
boolean ovrimos_result_all ( int result_id , string [format] );結果全体をHTMLテーブルとして出力する
int ovrimos_result ( int result_id , mixed field );出力カラムを取得する
int ovrimos_rollback ( int connection_id );トランザクションをロールバックする
bool pcntl_exec ( string path , [ array args ] , [ array envs ] );カレントのプロセス空間で指定したプログラムを実行する
int pcntl_fork ();現在実行中のプロセスをフォークする
bool pcntl_signal ( int signo , mixed handle );シグナルハンドラを設定する
int pcntl_waitpid ( int pid , int status , int options );待つかフォークした子プロセスのステータスを返す
int pcntl_wexitstatus ( int status );終了した子プロセスのリターンコードを返す
int pcntl_wifexited ( int status );ステータスコードが正常終了を表す場合に TRUE を返す
int pcntl_wifsignaled ( int status );ステータスコードがシグナルによる終了を表す場合に TRUE を返す
int pcntl_wifstopped ( int status );子プロセスが現在停止している場合、TRUE を返す
int pcntl_wstopsig ( int status );子プロセスを停止させたシグナルを返す
int pcntl_wtermsig ( int status );子プロセスの終了を生じたシグナルを返す
array preg_grep ( string pattern , array input );パターンにマッチする配列の要素を返す
int preg_match_all ( string pattern , string subject , array matches , [ int flags ] , [ int offset ] );グローバル正規表現検索を行う
mixed preg_match ( string pattern , string subject , [ array matches ] , [ int flags ] , [ int offset ] );正規表現検索を行う
string preg_quote ( string str , [ string delimiter ] );正規表現文字をクオートする
mixed preg_replace_callback ( mixed pattern , mixed callback , mixed subject , [ int limit ] );正規表現検索を行い、コールバック関数を使用して置換を行う
mixed preg_replace ( mixed pattern , mixed replacement , mixed subject , [ int limit ] );正規表現検索および置換を行う
array preg_split ( string pattern , string subject , [ int limit ] , [ int flags ] );正規表現で文字列を分割する
int pdf_add_bookmark ( int pdf object , string text , [ int parent ] , [ int open ] );ブックマークをカレントのページに追加する
int pdf_add_launchlink ( int pdf object , float llx , float lly , float urx , float ury , string filename );カレントのページに起動用注記を追加する
int pdf_add_locallink ( int pdf object , float llx , float lly , float urx , float ury , int page , string dest );カレントのページにリンク注記を追加
int pdf_add_note ( int pdf object , float llx , float lly , float urx , float ury , string contents , string title , string icon , int open );カレントのページに注記を追加する
int pdf_add_pdflink ( int pdf object , float llx , float lly , float urx , float ury , string filename , int page , string dest );カレントページにリンク注記を追加
int pdf_add_thumbnail ( int pdf object , int image );カレントのページにサムネールを追加する
int pdf_add_weblink ( int pdf object , float llx , float lly , float urx , float ury , string url );カレントのページにWebリンクを追加する
void pdf_arc ( resource pdf object , float x , float y , float r , float alpha , float beta );(反時計回りに)円弧を描く
void pdf_arcn ( resource pdf object , float x , float y , float r , float alpha , float beta );(時計回りに)円弧を描く
int pdf_attach_file ( int pdf object , float llx , float lly , float urx , float ury , string filename , string description , string author , string mimetype , string icon );カレントのページに添付ファイルを追加する
void pdf_begin_page ( int pdf object , float width , float height );新規ページを開始する
int pdf_begin_pattern ( int pdf object , float width , float height , float xstep , float ystep , int painttype );新規パターンを開始する
void pdf_begin_template ( int pdf object , float width , float height );新規テンプレートを開始する
void pdf_circle ( int pdf object , float x , float y , float r );円を描く
void pdf_clip ( int pdf object );カレントのパスに切り取る
void pdf_close_image ( int pdf object , int image );画像を閉じる
void pdf_close_pdi_page ( int pdf object , int pagehandle );ページハンドルを閉じる
void pdf_close_pdi ( int pdf object , int dochandle );PDFドキュメント入力(PDI)を閉じる
void pdf_close ( int pdf object );pdf ドキュメントを閉じる
void pdf_closepath_fill_stroke ( int pdf object );カレントのパスを閉じ、塗りつぶし、輪郭を描く
void pdf_closepath_stroke ( int pdf object );パスを閉じ、パスに沿って線を描く
void pdf_closepath ( int pdf object );パスを閉じる
void pdf_concat ( int pdf object , float a , float b , float c , float d , float e , float f );行列をCTMに追加
void pdf_continue_text ( int pdf object , string text );次の行にテキストを出力する
void pdf_curveto ( int pdf object , float x1 , float y1 , float x2 , float y2 , float x3 , float y3 );曲線を描く
void pdf_delete ( int pdf object );PDFオブジェクトを削除
void pdf_end_page ( int pdf object );ページを終了する
void pdf_end_pattern ( int pdf object );パターンを終了する
void pdf_end_template ( int pdf object );テンプレートを終了する
void pdf_endpath ( int pdf object );古い関数: カレントのパスを終了する
void pdf_fill_stroke ( int pdf object );カレントのパスを塗りつぶし、パスの輪郭を描く
void pdf_fill ( int pdf object );カレントのパスを塗りつぶす
void pdf_findfont ( int pdf object , string fontname , string encoding , int embed );後でpdf_setfontで使用するフォントを準備する
string pdf_get_buffer ( int pdf object );生成されたPDFデータを含むバッファを取得する
string pdf_get_image_height ( int pdf object , int image );古い関数: イメージの高さを返す
string pdf_get_image_width ( int pdf object , int image );古い関数: イメージの幅を返す
int pdf_get_majorversion ();PDFlibのメジャーバージョン番号を返す
int pdf_get_minorversion ();PDFlibのマイナーバージョン番号を返す
string pdf_get_parameter ( int pdf object , string key , [ float modifier ] );パラメータを得る
string pdf_get_pdi_parameter ( int pdf object , string key , int doc , int page , int index );PDF文字列パラメータを得る
string pdf_get_pdi_value ( int pdf object , string key , int doc , int page , int index );数値型のPDIパラメータを取得する
float pdf_get_value ( int pdf object , string key , float [modifier] );数値を得る
void pdf_initgraphics ( int pdf object );描画状態をリセットする
void pdf_lineto ( int pdf object , float x , float y );線を描く
void pdf_makespotcolor ( int pdf object , string spotname );スポット色を作成する
void pdf_moveto ( int pdf object , float x , float y );現在の位置を設定する
int pdf_new ( );新規PDFオブジェクトを作成する
int pdf_open_ccitt ( int pdf object , string filename , int width , int height , int BitReverse , int k , int Blackls1 );生のCCITTデータから新規イメージファイルをオープンする
int pdf_open_file ( int pdf object , [ string filename ] );新規PDFオブジェクトをオープンする
int pdf_open_image_file ( int PDF-document , string imagetype , string filename , [ string stringparam ] , [ string intparam ] );ファイルからイメージを読み込む
int pdf_open_image ( int PDF-document , string imagetype , string source , string data , long length , int width , int height , int components , int bpc , string params );イメージ読み込み関数
int pdf_open_memory_image ( int pdf object , int image );PHPのイメージ関数で作成されたイメージをオープンする
void pdf_open_pdi_page ( int pdf object , int dochandle , int pagenumber , string pagelabel );ページを準備する
void pdf_open_pdi ( int pdf object , string filename , string stringparam , int intparam );PDFファイルをオープンする
int pdf_open_tiff ( int PDF-document , string filename );古い関数: TIFFイメージをオープンする
int pdf_open ( int file );古い関数: 新規の pdfオブジェクトをオープンする
void pdf_place_image ( int pdf object , int image , float x , float y , float scale );イメージをページ上に置く
void pdf_place_pdi_page ( int pdf object , int page , float x , float y , float sx , float sy );ページにイメージを置く
void pdf_rect ( int pdf object , float x , float y , float width , float height );長方形を描く
void pdf_restore ( int pdf object );以前保存された環境を復元する
void pdf_rotate ( int pdf object , float phi );回転を設定する
void pdf_save ( int pdf object );現在の環境を保存する
void pdf_scale ( int pdf object , float x-scale , float y-scale );スケールを設定する
void pdf_set_border_color ( int pdf object , float red , float green , float blue );リンクや注記の周りの境界色を設定する
void pdf_set_border_dash ( int pdf object , float black , float white );リンクおよび注記の周りの境界の破線形式を設定する
void pdf_set_border_style ( int pdf object , string style , float width );リンクおよび注記の周りの境界の形式を設定する
void pdf_set_horiz_scaling ( int pdf object , float scale );古い関数: テキストの横方向倍率を設定
bool pdf_set_info_author ( int pdfdoc , string author );ドキュメントのauthorフィールドを設定する
bool pdf_set_info_creator ( int pdfdoc , string creator );ドキュメントのcreatorフィールドを設定する
bool pdf_set_info_keywords ( int pdfdoc , string keywords );ドキュメントのkeywordフィールドを設定する
bool pdf_set_info_subject ( int pdfdoc , string subject );ドキュメントのsubjectフィールドを設定する
bool pdf_set_info_title ( int pdfdoc , string title );ドキュメントのtitleフィールドを設定する
void pdf_set_info ( int pdf object , string key , string value );ドキュメント情報のフィールドを設定する
void pdf_set_parameter ( int pdf object , string key , string value );パラメータを設定する
void pdf_set_text_pos ( int pdf object , float x , float y );テキストの位置を設定する
void pdf_set_value ( int pdf object , string key , float value );数値を設定する
void pdf_setcolor ( int pdf object , string type , string colorspace , float c1 , [ float c2 ] , [ float c3 ] , [ float c4 ] );塗りつぶし色および輪郭色を設定する
void pdf_setdash ( int pdf object , float b , float w );破線パターンを設定する
void pdf_setflat ( int pdf object , float flatness );平面度を設定する
void pdf_setfont ( int pdf object , int font , float size );カレントのフォントを設定する
void pdf_setgray_fill ( int pdf object , float gray );塗りつぶし色をグレー値に設定する
void pdf_setgray_stroke ( int pdf object , float gray );描画色をグレー値に設定する
void pdf_setgray ( int pdf object , float gray );描画および塗りつぶし色をグレー値に設定する
void pdf_setlinecap ( int pdf object , int linecap );linecap パラメータを設定する
void pdf_setlinejoin ( int pdf object , long linejoin );linejoinパラメータを設定する
void pdf_setlinewidth ( int pdf object , float width );線幅を設定する
void pdf_setmatrix ( int pdf object , float a , float b , float c , float d , float e , float f );カレントの変換行列を設定する
void pdf_setmiterlimit ( int pdf object , float miter );miter limitを設定する
void pdf_setpolydash ( int pdf object , float * dasharray );複雑な破線パターンを設定
void pdf_setrgbcolor_fill ( int pdf object , float red value , float green value , float blue value );塗りつぶし色をRGBカラー値に設定する
void pdf_setrgbcolor_stroke ( int pdf object , float red value , float green value , float blue value );描画色をRGBカラー値に設定する
void pdf_setrgbcolor ( int pdf object , float red value , float green value , float blue value );描画色および塗りつぶし色をRGBカラー値で設定する
int pdf_show_boxed ( int pdf object , string text , float left , float top , float width , float height , string hmode , [ string feature ] );ボックスにテキストを出力する
void pdf_show_xy ( int pdf object , string text , float x , float y );指定した位置にテキストを出力する
void pdf_show ( int pdf object , string text );カレントの位置にテキストを出力する
void pdf_skew ( int pdf object , float alpha , float beta );座標系を歪ませる
float pdf_stringwidth ( int pdf object , string text , [ int font ] , [ float size ] );カレントフォントを用いた際のテキスト幅を返す
void pdf_stroke ( int pdf object );パスに沿って線を描く
void pdf_translate ( int pdf object , float tx , float ty );座標系の原点を設定する
bool PDO::beginTransaction ();トランザクションを開始する
bool PDO::commit ();トランザクションをコミットする
PDO PDO::__construct ( string dsn , [ string username ] , [ string password ] , [ array driver_options ] );データベースへの接続を表すPDOインスタンスを生成する
int PDO::errorCode ();データベースハンドラにおける直近の操作に関連する SQLSTATE を取得する
array PDO::errorInfo ();データベースハンドラにおける直近の操作に関連する拡張エラー情報を取得する
long PDO::exec ( string statement );SQL 文を実行し、作用した行数を返す
mixed PDO::getAttribute ( long attribute );データベース接続の属性を取得する
string PDO::lastInsertId ( [ string name ] );最後に挿入された行の ID を返す
PDOStatement PDO::prepare ( string statement , [ array driver_options ] );文を実行する準備を行い、文オブジェクトを返す
object PDO::query ( string statement );SQLステートメントを実行、結果セットをPDOStatementオブジェクトとして返す
string PDO::quote ( string string , [ int parameter_type ] );クエリ用の文字列をクオートする
bool PDO::rollBack ();トランザクションをロールバックする
bool PDO::setAttribute ( int attribute , mixed value );属性を設定する
bool PDOStatement::bindColumn ( mixed column , mixed param , [ int type ] , [ int maxlen ] , [ mixed driver_options ] );カラムを PHP 変数にバインドする
bool PDOStatement::bindParam ( mixed parameter , mixed variable , [ int data_type ] , [ int length ] );指定された変数名にパラメータをバインドする
int PDOStatement::columnCount ();結果セット中のカラム数を返す
int PDOStatement::errorCode ();文ハンドラにおける直近の操作に関連する SQLSTATE を取得する
array PDOStatement::errorInfo ();文ハンドラにおける直近の操作に関連する拡張エラー情報を取得する
bool PDOStatement::execute ( [ array input_parameters ] );プリペアドステートメントを実行する
mixed PDOStatement::fetch ( [ int fetch_style ] , [ int cursor_orientation ] , [ int cursor_offset ] );結果セットから次の行を取得する
array PDOStatement::fetchAll ( [ int fetch_style ] );全ての結果行を含む配列を返す
string PDOStatement::fetchSingle ();結果セットの次の行にある最初のカラムを返す
mixed PDOStatement::getAttribute ( long attribute );文の属性を取得する
mixed PDOStatement::getColumnMeta ( int column );結果セットのカラムに対するメタデータを返す
bool PDOStatement::nextRowset ();複数の行セットを返す文ハンドラで次の行セットに移動する
int PDOStatement::rowCount ();直近の SQL 文意よって作用した行数を返す
bool PDOStatement::setAttribute ( long attribute , mixed value );文の属性を設定する
bool PDOStatement::setFetchMode ( int mode );この文に対するデフォルトのフェッチモードを設定する
void pfpro_cleanup ();Payflow Proライブラリをシャットダウンする
void pfpro_init ();Payflow Proライブラリを初期化する
string pfpro_process_raw ( string parameters , string [address] , int [port] , int [timeout] , string [proxy address] , int [proxy port] , string [proxy logon] , string [proxy password] );Payflow Proにより素のトランザクションを処理する
array pfpro_process ( array parameters , string [address] , int [port] , int [timeout] , string [proxy address] , int [proxy port] , string [proxy logon] , string [proxy password] );Payflow Proでトランザクションを処理する
string pfpro_version ();Payflow Pro ソフトウエアのバージョンを返す
int pg_affected_rows ( resource result );変更されたレコード(タプル)の数を返す
bool pg_cancel_query ( resource connection );非同期クエリを取り消す
string pg_client_encoding ( [ resource connection ] );PostgreSQLクライアントのエンコーディングを取得する
bool pg_close ( resource connection );PostgreSQL接続を閉じる
resource pg_connect ( string connection_string );PostgreSQL接続を開く
bool pg_connection_busy ( resource connection );接続がビジーかどうか調べる
bool pg_connection_reset ( resource connection );接続をリセット(再接続)する
int pg_connection_status ( resource connection );接続ステータスを取得する
array pg_convert ( resource connection , string table_name , array assoc_array , [ int options ] );SQL命令として実行可能な形式の連想配列の値に変換する
int pg_copy_from ( int connection , string table_name , array rows , [ string delimiter ] , [ string null_as ] );配列からテーブルをコピーする
int pg_copy_to ( int connection , string table_name , [ string delimiter ] , [ string null_as ] );配列にテーブルをコピーする
string pg_dbname ( resource connection );データベース名の取得
mixed pg_delete ( resource connection , string table_name , array assoc_array , [ int options ] );レコードを削除する
bool pg_end_copy ( [ resource connection ] );PostgreSQLバックエンドに同期する
string pg_escape_bytea ( string data );bytea型にバイナリをエスケープする
string pg_escape_string ( string data );テキスト/文字型用の文字列をエスケープする
array pg_fetch_all ( resource result );取得されたすべての行を配列として取得
array pg_fetch_array ( resource result , [ int row ] , [ int result_type ] );行を配列として取得する
array pg_fetch_assoc ( resource result , [ int row ] );行を配列として取得する
object pg_fetch_object ( resource result , int row , [ int result_type ] );行をオブジェクトとして得る
mixed pg_fetch_result ( resource result , int row , mixed field );結果リソースから値を返す
array pg_fetch_row ( resource result , int row );数字をインデックスとする配列として行を得る
int pg_field_is_null ( resource result , int row , mixed field );フィールドがNULLかどうか調べる
string pg_field_name ( resource result , int field_number );フィールドの名前を返す
int pg_field_num ( resource result , string field_name );指定されたフィールドのフィールド番号を返す
int pg_field_prtlen ( resource result , int row_number , string field_name );表示される長さを返す
int pg_field_size ( resource result , int field_number );指定したフィールドの内部記憶領域におけるサイズを返す
string pg_field_type ( resource result , int field_number );フィールド番号に対応する型名を返す
bool pg_free_result ( resource result );メモリを開放する
array pg_get_notify ( resource connection , [ int result_type ] );データベース接続にpingを行う
int pg_get_pid ( resource connection );データベース接続にpingを行う
resource pg_get_result ( [ resource connection ] );非同期クエリの結果を取得する
string pg_host ( resource connection );ホスト名を返す
bool pg_insert ( resource connection , string table_name , array assoc_array , [ bool convert ] );テーブルに配列を挿入する
string pg_last_error ( resource connection );特定の接続から直近のエラーメッセージ文字列を取得する
string pg_last_notice ( resource connection );PostgreSQLサーバからの直近の通知メッセージを返す
int pg_last_oid ( resource result );直近のオブジェクトIDを返す
bool pg_lo_close ( resource large_object );ラージオブジェクトをクローズする
int pg_lo_create ( resource connection );ラージオブジェクトを生成する
bool pg_lo_export ( int oid , string pathname , [ resource connection ] );ラージオブジェクトをファイルにエクスポートする
int pg_lo_import ( string pathname , [ resource connection ] );ファイルからラージオブジェクトをインポートする
resource pg_lo_open ( resource connection , int oid , string mode );ラージオブジェクトをオープンする
int pg_lo_read_all ( resource large_object );ラージオブジェクト全体を読み込みブラウザに直接送信する
string pg_lo_read ( resource large_object , int len );ラージオブジェクトを読み込む
bool pg_lo_seek ( resource large_object , int offset , [ int whence ] );ラージオブジェクトの位置をシークする
int pg_lo_tell ( resource large_object );ラージオブジェクトのカレントの位置を返す
bool pg_lo_unlink ( resource connection , int oid );ラージオブジェクトを削除する
int pg_lo_write ( resource large_object , string data );ラージオブジェクトを書く
array pg_meta_data ( resource connection , string table_name );テーブルからメタデータを取得する
int pg_num_fields ( resource result );フィールド数を返す
int pg_num_rows ( resource result );行数を返す
string pg_options ( resource connection );接続に関連するオプションを取得する
int pg_pconnect ( string connection_string );持続的なデータベース接続をオープンする
bool pg_ping ( resource connection );データベース接続を調べる
int pg_port ( resource connection );接続に関連するポート番号を返す
bool pg_put_line ( [ resource connection ] , string data );NULLで終る文字列をPostgreSQLバックエンドに送信する
resource pg_query ( resource connection , string query );クエリを実行する
string pg_result_error ( resource result );結果に関連するエラーメッセージを取得する
array pg_result_seek ( resource result , int offset );結果リソースの内部レコード(行)オフセットを設定する
int pg_result_status ( resource result );クエリ結果のステータスを取得する
array pg_select ( resource connection , string table_name , array assoc_array , [ bool convert ] );レコードを選択する
bool pg_send_query ( resource connection , string query );非同期クエリを送信する
int pg_set_client_encoding ( [ resource connection ] , string encoding );PostgreSQLクライアントのエンコーディングを設定する
bool pg_trace ( string filename , string [mode] , [ resource connection ] );PostgreSQLサーバーへの接続をトレースする
string pg_tty ( resource connection );tty名を返す
string pg_unescape_bytea ( string data );bytea型のバイナリをアンエスケープする
bool pg_untrace ( [ resource connection ] );PostgreSQLサーバーへの接続のトレースを無効にする
long pg_update ( resource connection , string table_name , array condition , array data , [ bool convert ] );テーブルを更新する
string posix_ctermid ( void );制御する端末のパス名を得る
string posix_getcwd ( void );現在のディレクトリのパス名
int posix_getegid ();現在のプロセスの有効なグループIDを返す
int posix_geteuid ();現在のプロセスの有効なユーザーIDを返す
int posix_getgid ();現在のプロセスの実際のグループIDを返す
array posix_getgrgid ( int gid );指定したグループIDを有するグループに関する情報を返す
array posix_getgrnam ( string name );指定したグループ名を有するグループに関する情報を返す
array posix_getgroups ();現在のプロセスのグループ設定を返す
string posix_getlogin ();ログイン名を返す
int posix_getpgid ( int pid );ジョブ制御のプロセスグループIDを得る
int posix_getpgrp ();現在のプロセスのグループIDを返す
int posix_getpid ();現在のプロセスIDを返す
int posix_getppid ();親プロセスのIDを返す
array posix_getpwnam ( string username );指定したユーザ名を有するユーザに関する情報を返す
array posix_getpwuid ( int uid );指定したユーザーIDを有するユーザーに関する情報を返す
array posix_getrlimit ( void );システムリソース制限に関する情報を返す
int posix_getsid ( int pid );プロセスの現在のsidを得る
int posix_getuid ();現在のプロセスの実際のユーザーIDを返す
bool posix_isatty ( int fd );ファイル記述子が対話型端末であるかどうかを定義する
bool posix_kill ( int pid , int sig );プロセスにシグナルを送信する
bool posix_mkfifo ( string pathname , int mode );fifo スペシャルファイル(名前付きパイプ)を作成する
bool posix_setgid ( int gid );現在のプロセスの有効な GID を設定する
int posix_setpgid ( int pid , int pgid );ジョブ制御のプロセスグループIDを設定する
int posix_setsid ();現在のプロセスのセッションリーダーを作成する
bool posix_setuid ( int uid );現在のプロセスの有効な UID を設定する
array posix_times ();プロセス時間を得る
string posix_ttyname ( int fd );端末のデバイス名を定義する
array posix_uname ();システム名を得る
void printer_abort ( resource handle );プリンタのスプールファイルを削除する
void printer_close ( resource handle );プリンタへの接続を閉じる
mixed printer_create_brush ( int style , string color );新規ブラシを作成する
void printer_create_dc ( resource handle );新規デバイスコンテキストを作成する
mixed printer_create_font ( string face , int height , int width , int font_weight , bool italic , bool underline , bool strikeout , int orientaton );新規フォントを作成する
mixed printer_create_pen ( int style , int width , string color );新規ペンを作成する
bool printer_delete_brush ( resource handle );ブラシを削除する
bool printer_delete_dc ( resource handle );デバイスコンテキストを削除する
bool printer_delete_font ( resource handle );フォントを削除する
bool printer_delete_pen ( resource handle );ペンを削除する
void printer_draw_bmp ( resource handle , string filename , int x , int y );ビットマップを描画する
void printer_draw_chord ( resource handle , int rec_x , int rec_y , int rec_x1 , int rec_y1 , int rad_x , int rad_y , int rad_x1 , int rad_y1 );弦を描画する
void printer_draw_elipse ( resource handle , int ul_x , int ul_y , int lr_x , int lr_y );楕円を描画する
void printer_draw_line ( resource printer_handle , int from_x , int from_y , int to_x , int to_y );線を描画する
void printer_draw_pie ( resource handle , int rec_x , int rec_y , int rec_x1 , int rec_y1 , int rad1_x , int rad1_y , int rad2_x , int rad2_y );円弧を描画する
void printer_draw_rectangle ( resource handle , int ul_x , int ul_y , int lr_x , int lr_y );矩形を描画する
void printer_draw_roundrect ( resource handle , int ul_x , int ul_y , int lr_x , int lr_y , int width , int height );角が丸い矩形を描画する
void printer_draw_text ( resource printer_handle , string text , int x , int y );テキストを描画する
bool printer_end_doc ( resource handle );ドキュメントを閉じる
bool printer_end_page ( resource handle );アクティブなページを閉じる
mixed printer_get_option ( resource handle , string option );プリンタ設定データを取得する
array printer_list ( int enumtype , [ string name ] , [ int level ] );サーバで付加されたプリンタの配列を返す
int printer_logical_fontheight ( resource handle , int height );論理フォントの高さを取得する
mixed printer_open ( [ string devicename ] );プリンタへの接続をオープンする
void printer_select_brush ( resource printer_handle , resource brush_handle );ブラシを選択する
void printer_select_font ( resource printer_handle , resource font_handle );フォントを選択する
void printer_select_pen ( resource printer_handle , resource pen_handle );ペンを選択する
bool printer_set_option ( resource handle , int option , mixed value );プリンタの接続を設定する
bool printer_start_doc ( resource handle , [ string document ] );新規ドキュメントを開始する
bool printer_start_page ( resource handle );新規ページを開始する
bool printer_write ( resource handle , string content );プリンタへデータを書き込む
int pspell_add_to_personal ( int dictionary_link , string word );ユーザの単語リストに単語を追加
int pspell_add_to_session ( int dictionary_link , string word );カレントのセッションの単語リストに単語を追加
bool pspell_check ( int dictionary_link , string word );単語をチェックする
int pspell_clear_session ( int dictionary_link );カレントのセッションをクリアする
int pspell_config_create ( string language , string [spelling] , string [jargon] , string [encoding] );辞書をオープンする際に使用される設定を作成する
int pspell_config_ignore ( int dictionary_link , int n );長さがN文字未満の単語を無視する
int pspell_config_mode ( int dictionary_link , int mode );返される提案の数のモードを変更する
int pspell_config_personal ( int dictionary_link , string file );個人の単語リストを保持するファイルを設定する
int pspell_config_repl ( int dictionary_link , string file );置換候補を保持するファイルを設定する
int pspell_config_runtogether ( int dictionary_link , boolean flag );複合語を有効な単語の組み合わせとして考慮する
int pspell_config_save_repl ( int dictionary_link , boolean flag );単語リストと共に置換リストを保存するかどうかを定義する
int pspell_new_config ( int config );指定した設定に基づき新規辞書をロードする
int pspell_new_personal ( string personal , string language , string [spelling] , string [jargon] , string [encoding] , int [mode] );個人の単語リストを有する新規辞書をロードする
int pspell_new ( string language , string [spelling] , string [jargon] , string [encoding] , int [mode] );新規辞書をロードする
int pspell_save_wordlist ( int dictionary_link );個人の単語リストをファイルに保存する
int pspell_store_replacement ( int dictionary_link , string misspelled , string correct );単語を置換するものを保存する
array pspell_suggest ( int dictionary_link , string word );単語のスペルについて修正候補を示す
string qdom_error ();直近のQDOM操作からのエラー文字列またはエラー発生時にFALSEを返す
object qdom_tree ( string );xml文字列のツリーを作成する
void readline_add_history ( string line );ヒストリに1行追加する
bool readline_clear_history ();ヒストリをクリアする
bool readline_completion_function ( string line );補完関数を登録する
mixed readline_info ( string [varname] , string [newvalue] );種々のreadlineの内部変数を取得/設定する
array readline_list_history ();ヒストリのリスト
bool readline_read_history ( string filename );ヒストリを読み込む
boolean readline_write_history ( string filename );ヒストリを書きこむ
string readline ( string [prompt] );1行読み込む
bool recode_file ( string request , resource input , resource output );コード変換指令に基づきファイルからファイルにコード変換する
string recode_string ( string request , string string );コード変換指令に基づき文字列のコードを変換する
string recode ( string request , string string );コード変換指令に基づき文字列を変換する
string ereg_replace ( string pattern , string replacement , string string );正規表現による置換
bool ereg ( string pattern , string string , array [regs] );正規表現にマッチさせる
string eregi_replace ( string pattern , string replacement , string string );大文字小文字を区別せずに正規表現による置換を行う
bool eregi ( string pattern , string string , array [regs] );大文字小文字を区別せずに正規表現によるマッチングを行う
array split ( string pattern , string string , int [limit] );正規表現により文字列を分割し、配列に格納する
array spliti ( string pattern , string string , int [limit] );大文字小文字を区別しない正規表現により文字列を分割し、配列に入れる
string sql_regcase ( string string );大文字小文字を区別しないマッチングのための正規表現を作成する
new OrbitEnum ( string id );CORBA enumsを使用する
new OrbitObject ( string ior );CORBA オブジェクトにアクセスする
new OrbitStruct ( string id );CORBA 構造体を使用する
bool satellite_caught_exception ();例外が前の関数からキャッチされたかどうかを調べる
string satellite_exception_id ();直近の例外に関するレポジトリIDを取得する
OrbitStruct satellite_exception_value ();直近の例外に関する例外構造体を得る
int satellite_get_repository_id ( object obj );NOT IMPLEMENTED
bool satellite_load_idl ( string file );IDLファイルがロード済みでない場合、タイプマネージャにロードを指示する
string satellite_object_to_string ( object obj );オブジェクトを文字列表現に変換する
int ftok ( string pathname , string proj );パス名とプロジェクトIDをSystem V IPCキーに変換する
bool sem_acquire ( int sem_identifier );セマフォを得ます
int sem_get ( int key , int [max_acquire] , int [perm] );セマフォ ID を得ます
bool sem_release ( int sem_identifier );セマフォを解放します
bool sem_remove ( int sem_identifier );セマフォを削除する
int shm_attach ( int key , int [memsize] , int [perm] );共有メモリセグメントを作成またはオープンします
int shm_detach ( int shm_identifier );共有メモリセグメントへの接続を閉じます
mixed shm_get_var ( int id , int variable_key );共有メモリから変数を返す
int shm_put_var ( int shm_identifier , int variable_key , mixed variable );共有メモリの変数を挿入または更新します
int shm_remove_var ( int id , int variable_key );共有メモリから変数を削除します
int shm_remove ( int shm_identifier );UNIX システムから共有メモリを削除する
int sesam_affected_rows ( string result_id );直近のクエリにより作用されたレコードの数を得る
bool sesam_commit ();SESAMデータベースへの待機中の更新処理をコミットする
bool sesam_connect ( string catalog , string schema , string user );SESAM データベース接続をオープンする
array sesam_diagnostic ();直近のSESAMコールに関するステータス情報を返す
bool sesam_disconnect ();SESAM接続から切り離す
string sesam_errormsg ();直近のSESAMコールのエラーメッセージを返す
string sesam_execimm ( string query );SQL命令を直ちに実行する
array sesam_fetch_array ( string result_id , int [whence] , int [offset] );連想配列としてレコードを1件取得
mixed sesam_fetch_result ( string result_id , int [max_rows] );クエリ結果の全てあるいは一部を返す
array sesam_fetch_row ( string result_id , int [whence] , int [offset] );1件分のレコードを配列として取得
array sesam_field_array ( string result_id );結果の個々のカラムに関するメタ情報を返す
int sesam_field_name ( string result_id , int index );結果集合のカラム名を返す
int sesam_free_result ( string result_id );クエリに関するリソースを開放する
int sesam_num_fields ( string result_id );結果集合のフィールド/カラム数を返す
string sesam_query ( string query , bool [scrollable] );SESAM SQL クエリを実行し、結果を準備する
bool sesam_rollback ();SESAMデータベースに対する待機中の更新を破棄する
bool sesam_seek_row ( string result_id , int whence , int [offset] );連続的に取得する際にスクロール可能なカーソルモードに設定する
bool sesam_settransaction ( int isolation_level , int read_only );SESAM トランザクションパラメータ
int session_cache_expire ( [ int new_cache_expire ] );カレントのキャッシュの有効期限を返す
string session_cache_limiter ( [ string cache_limiter ] );カレントのキャッシュリミッタを取得または設定する
bool session_decode ( string data );文字列からセッションデータをデコードする
bool session_destroy ();セッションに登録されたデータを全て破棄する
string session_encode ();現在のセッションデータを文字列としてエンコードする
array session_get_cookie_params ();セッションクッキーのパラメータを得る
string session_id ( [ string id ] );カレントのセッションIDを取得または設定する
bool session_is_registered ( string name );変数がセッションに登録されているかどうかを調べる
string session_module_name ( [ string module ] );現在のセッションモジュールを取得または設定する
string session_name ( [ string name ] );カレントのセッション名を取得または設定する
bool session_regenerate_id ();現在のセッションIDを新しく生成したものと置き換える
bool session_register ( mixed name , [ mixed ... ] );現在のセッションに1つ以上の変数を登録する
string session_save_path ( [ string path ] );現在のセッションデータ保存パスを取得または設定する
void session_set_cookie_params ( int lifetime , [ string path ] , [ string domain ] , [ bool secure ] );セッションクッキーパラメータを設定する
bool session_set_save_handler ( string open , string close , string read , string write , string destroy , string gc );ユーザ定義のセッション保存関数を設定する
bool session_start ();セッションデータを初期化する
bool session_unregister ( string name );現在のセッションから変数の登録を削除する
void session_unset ();全てのセッション変数を開放する
void session_write_close ();セッションデータを書き込んでセッションを終了する
int shmop_close ( int shmid );共有メモリブロックを閉じる
int shmop_delete ( int shmid );共有メモリブロックを削除する
int shmop_open ( int key , string flags , int mode , int size );共有メモリブロックを作成またはオープンする
string shmop_read ( int shmid , int offset , int count );共有メモリブロックからデータを読み込む
int shmop_size ( int shmid );共有メモリブロックの大きさを得る
int shmop_write ( int shmid , string data , int offset );共有メモリブロックにデータを書き込む
string simplexml_element->asXML ();SimpleXML要素に基づき整形式のXML文字列を返す
object simplexml_element simplexml_element->attributes ( string data );要素の属性を定義する
object simplexml_element simplexml_element->children ();指定したノードの子ノードを見付ける
array simplexml_element->xpath ( string path );XMLデータにXpathクエリを実行する
object simplexml_element simplexml_import_dom ( domNode node );DOMノードからsimplexml_elementオブジェクトを取得する
object simplexml_element simplexml_load_file ( string filename );XMLファイルをパースし、オブジェクトに代入する
object simplexml_element simplexml_load_string ( string data );XML文字列をオブジェクトに代入する
bool snmp_get_quick_print ();UCD ライブラリの quick_print の現在の設定値を取得する
void snmp_set_quick_print ( bool quick_print );UCB SNMP ライブラリで quick_print の値を設定する
string snmpget ( string hostname , string community , string object_id , int [timeout] , int [retries] );SNMPオブジェクトを取得する
array snmprealwalk ( string host , string community , string object_id , [ int timeout ] , [ int retries ] );指定したオブジェクトに関するオブジェクトIDを含む全てのオブジェクトを返す
bool snmpset ( string hostname , string community , string object_id , string type , mixed value , int [timeout] , int [retries] );SNMP オブジェクトを設定する
array snmpwalk ( string hostname , string community , string object_id , int [timeout] , int [retries] );エージェントから全てのSNMPオブジェクトを取りだす
array snmpwalkoid ( string hostname , string community , string object_id , int [timeout] , int [retries] );ネットワークエンティティに関する情報ツリーの検索
bool is_soap_fault ( mixed obj );SOAPコールが失敗したかどうかを調べる
mixed SoapClient::__call ( string function_name , [ array arguments ] , [ array options ] , [ array input_headers ] , [ array output_headers ] );SOAP関数をコールする
array SoapClient::__getFunctions ( void );SOAP関数のリストを返す
string SoapClient::__getLastRequest ( void );直近のSOAPリクエストを返す
object SoapClient::__getLastResponse ( void );直近のSOAPレスポンスを返す
array SoapClient::__getTypes ( void );SOAP型のリストを返す
object SoapClient::SoapClient ( mixed wsdl , [ array options ] );SoapClient コンストラクタ
object SoapFault::SoapFault ( string faultcode , string faultstring , [ string faultactor ] , [ mixed detail ] , [ string faultname ] , [ mixed headerfault ] );SoapFault コンストラクタ
object SoapHeader::SoapHeader ( string namespace , string name , [ mixed data ] , [ bool mustUnderstand ] , [ mixed actor ] );SoapHeader コンストラクタ
object SoapParam::SoapParam ( mixed data , string name );SoapParam constructor
void SoapServer::addFunction ( mixed functions );SOAPリクエストを処理する一つまたは複数の関数を追加する
array SoapServer::getFunctions ( void );定義済みの関数のリストを返す
void SoapServer::handle ( [ string soap_request ] );SOAPリクエストを処理する
void SoapServer::setClass ( string class_name , [ mixed args ] );SOAPリクエストを処理するクラスを設定する
void SoapServer::setPersistence ( int mode );SoapServerの持続モードを設定する
object SoapServer::SoapServer ( mixed wsdl , [ array options ] );SoapServerコンストラクタ
object SoapVar::SoapVar ( mixed data , int encoding , [ string type_name ] , [ string type_namespace ] , [ string node_name ] , [ string node_namespace ] );SoapVar コンストラクタ
int socket_accept ( resource socket );ソケットへの接続を許可する
bool socket_bind ( resource socket , string address , [ int port ] );ソケットに名前をバインドする
void socket_clear_error ( [ resource socket ] );ソケットのエラーまたは直近のエラーコードをクリアする
bool socket_close ( resource socket );ファイル記述子を閉じる
bool socket_connect ( resource socket , string address , [ int port ] );ソケット上の接続を初期化する
resource socket_create_listen ( int port , [ int backlog ] );接続を受けつけるためにポートにソケットをオープンする
bool socket_create_pair ( int domain , int type , int protocol , array &fd );区別できないソケットの組を作成し、fdに保存する
resource socket_create ( int domain , int type , int protocol );ソケットを作成する(通信時の終端)
resource socket_fd_alloc ();ファイル記述子集合を確保する
bool socket_fd_clear ( resource set , mixed socket );ある集合からファイル記述子をクリアする
bool socket_fd_free ( resource set );ファイル記述子集合を解放する
bool socket_fd_isset ( resource set , resource socket );あるファイル記述子が、ファイル記述子集合の中で設定されているかどうかを調べる
bool socket_fd_set ( resource set , mixed socket );集合にファイル記述子を追加する
bool socket_fd_zero ( resource set );ファイル記述子集合をクリアする
mixed socket_getopt ( resource socket , int level , int optname );ソケットのオプションを取得する
bool socket_getpeername ( resource socket , string &addr , [ int &port ] );fdを指定、ソケットのリモート側を既述するsa.sin_addrおよびsa.sin_portの値をaddrおよびportの文字列に保存する
bool socket_getsockname ( resource socket , string &addr , [ int &port ] );fdを指定、ソケットのローカル側を既述するsa.sin_addrおよびsa.sin_portの値をaddrおよびportの文字列に保存する
bool socket_iovec_add ( resource iovec , int iov_len );新規ベクトルを収集用配列に追加する
resource socket_iovec_alloc ( int num_vectors , [ int ] );sendmsg, recvmsg, writev, readvで使用するよう'struct iovec'を構築する
bool socket_iovec_delete ( resource iovec , int iov_pos );ベクトルの配列からベクトルを削除する
string socket_iovec_fetch ( resource iovec , int iovec_position );iovec_id[iovec_position] で指定したiovecに保存されたデータを返す
bool socket_iovec_free ( resource iovec );iovec_idで指定したiovecを解放する
bool socket_iovec_set ( resource iovec , int iovec_position , string new_val );iovec_id[iovec_position]に保持されたデータにnew_valを設定する
int socket_last_error ( [ resource socket ] );ソケットの直近のエラーを返す/クリアする
int socket_listen ( resource socket , int backlog );ソケット上で接続待ち(listen)する
string socket_read ( resource socket , int length , [ int type ] );ソケットから最大バイト長まで読みこむ
bool socket_readv ( resource socket , resource iovec_id );iovec_idで定義した収集用配列を用いてfdから読み込む
string socket_recv ( resource socket , int len , int flags );接続したソケットからデータを受信する
int socket_recvfrom ( resource socket , string &buf , int len , int flags , string &name , [ int &port ] );接続しているかどうかによらず、ソケットからデータを受信する
bool socket_recvmsg ( resource socket , resource iovec , array &control , int &controllen , int &flags , string &addr , [ int &port ] );接続用であるかどうかにかかわらずソケットのメッセージを受信する
int socket_select ( resource read_fd , resource write_fd , resource except_fd , int tv_sec , [ int tv_usec ] );tv_secとtv_usec で指定した有効時間でselect()システムコールを実行する
int socket_send ( resource socket , string buf , int len , int flags );接続したソケットにデータを送信する
bool socket_sendmsg ( resource socket , resource iovec , int flags , string addr , [ int port ] );接続用であるかどうかにかかわらずソケットにメッセージを送信する
int socket_sendto ( resource socket , string buf , int len , int flags , string addr , [ int port ] );接続しているかどうかによらずソケットにメッセージを送信する
bool socket_set_nonblock ( resource socket );ファイル記述子fdを非ブロックモードに設定する
bool socket_setopt ( resource socket , int level , int optname , int );ソケットのオプションを設定する
bool socket_shutdown ( resource socket , [ int how ] );受信、送信、または送受信用のソケットをシャットダウンする
string socket_strerror ( int errno );ソケットエラーの内容を文字列として返す
int socket_write ( resource socket_des , string &buffer , int length );ソケットに書き込む
bool socket_writev ( resource socket , resource iovec_id );iovec_idで定義した収集用配列を用いてファイル記述子fdに書き込む
mixed ArrayIterator::current ();現在の配列エントリを返す
mixed ArrayIterator::key ();現在の配列キーを返す
void ArrayIterator::next ();次のエントリに移動する
void ArrayIterator::rewind ();配列を最初に巻き戻す
void ArrayIterator::seek ( int position );位置を検索します
bool ArrayIterator::valid ();配列がまだエントリを持っているかどうかチェックする
void ArrayObject::append ( mixed newval );値を追加する
ArrayObject ArrayObject::__construct ( mixed input );新規配列オブジェクトを生成する
int ArrayObject::count ();イテレータにある要素の数を返す
ArrayIterator ArrayObject::getIterator ();ArrayObject インスタンスから新規イテレータを生成する
bool ArrayObject::offsetExists ( mixed index );要求された $index が存在するかどうかを返す
bool ArrayObject::offsetGet ( mixed index );指定した $index の値を返す
void ArrayObject::offsetSet ( mixed index , mixed newval );指定した $index に $newval をセットする
void ArrayObject::offsetUnset ( mixed index );指定した $index の値を解除する
boolean CachingIterator::hasNext ();内部イテレータが有効な次の要素を持つかどうかをチェックする
void CachingIterator::next ();イテレータを前方に移動する
void CachingIterator::rewind ();イテレータを巻き戻す
string CachingIterator::__toString ();現在の要素の文字列表現を返す
boolean CachingIterator::valid ();現在の要素が有効かどうかをチェックする
CachingRecursiveIterator CachingRecursiveIterator::getChildren ();内部イテレータの子を CachingRecursiveIterator として返す
bolean CachingRecursiveIterator::hasChildren ();内部イテレータの現在の要素が子を持つかどうかチェックする
array class_implements ( mixed class , [ bool autoload ] );与えられたクラスが実装しているインターフェースを返す
array class_parents ( mixed class , [ bool autoload ] );与えられたクラスの親クラスを返す
DirectoryIterator DirectoryIterator::__construct ( string path );パスから新規ディレクトリイテレータを生成する
DirectoryIterator DirectoryIterator::current ();これ自身を返す (Iterator インターフェースが必要)
int DirectoryIterator::getATime ();ファイルの最終アクセス時刻を取得する
RecursiveDirectoryIterator DirectoryIterator::getChildren ();もしディレクトリであれば現在のエントリのイテレータを返す
int DirectoryIterator::getCTime ();ファイルの inode 修正時刻を取得する
string DirectoryIterator::getFilename ();現在のディレクトリエントリのファイル名を返す
int DirectoryIterator::getGroup ();ファイルのグループを取得する
int DirectoryIterator::getInode ();ファイルの inode を取得する
int DirectoryIterator::getMTime ();ファイルの最終修正時刻を取得する
int DirectoryIterator::getOwner ();ファイルの所有者を取得する
string DirectoryIterator::getPath ();ディレクトリパスを返す
string DirectoryIterator::getPathname ();現在のディレクトリエントリのパスとファイル名を返す
int DirectoryIterator::getPerms ();ファイルのパーミッションを取得する
int DirectoryIterator::getSize ();ファイルサイズを取得する
string DirectoryIterator::getType ();ファイルタイプを取得する
bool DirectoryIterator::isDir ();ファイルがディレクトリであれば true を返す
bool DirectoryIterator::isDot ();現在のエントリが '.' もしくは '..' の場合 true を返す
bool DirectoryIterator::isExecutable ();ファイルが実行可能な場合 true を返す
bool DirectoryIterator::isFile ();ファイルが通常のファイルの場合 true を返す
bool DirectoryIterator::isLink ();ファイルがシンボリックリンクの場合 true を返す
bool DirectoryIterator::isReadable ();ファイルが読込可能であれば true を返す
bool DirectoryIterator::isWritable ();ファイルが書き込み可能であれば true を返す
string DirectoryIterator::key ();現在のディレクトリエントリを返す
void DirectoryIterator::next ();次のエントリに移動する
void DirectoryIterator::rewind ();ディレクトリを最初に巻き戻す
string DirectoryIterator::valid ();ディレクトリがまだエントリを持っているかどうかチェックする
mixed FilterIterator::current ();現在の要素の値を取得する
Iterator FilterIterator::getInnerIterator ();内部イテレータを取得する
mixed FilterIterator::key ();現在のキーを取得する
void FilterIterator::next ();イテレータを前に移動する
void FilterIterator::rewind ();イテレータを巻き戻す
boolean FilterIterator::valid ();現在の要素が有効かどうかをチェックする
int iterator_count ( IteratorAggregate iterator );イテレータにある要素をカウントする
array iterator_to_array ( IteratorAggregate iterator );イテレータを配列にコピーする
int LimitIterator::getPosition ();現在の位置を返す
void LimitIterator::next ();イテレータを前に移動する
void LimitIterator::rewind ();イテレータを指定したオフセットに巻き戻す
void LimitIterator::seek ( int position );与えられた位置を検索する
boolean LimitIterator::valid ();現在の要素が有効かどうかをチェックする
ParentIterator ParentIterator::getChildren ();ParentIterator に含まれる内部イテレータの子を返す
boolean ParentIterator::hasChildren ();内部イテレータの現在の要素が子を持つかどうかをチェックする
void ParentIterator::next ();イテレータを前に移動する
void ParentIterator::rewind ();イテレータを巻き戻す
object RecursiveDirectoryIterator::getChildren ();ディレクトリであれば、現在のエントリに対するイテレータを返す
bool RecursiveDirectoryIterator::hasChildren ( [ bool allow_links ] );現在のエントリがディレクトリかつ '.' もしくは '..' でないかどうかを返す
string RecursiveDirectoryIterator::key ();現在のディレクトリエントリのパスとファイル名を返す
void RecursiveDirectoryIterator::next ();次のエントリに移動する
void RecursiveDirectoryIterator::rewind ();ディレクトリを最初に巻き戻す
mixed RecursiveIteratorIterator::current ();現在の要素の値にアクセスする
int RecursiveIteratorIterator::getDepth ();再帰的なイテレーションにおける現在の深さを取得する
RecursiveIterator RecursiveIteratorIterator::getSubIterator ();現在の有効なサブイテレータを取得する
mixed RecursiveIteratorIterator::key ();現在のキーにアクセスする
void RecursiveIteratorIterator::next ();次の要素に移動する
void RecursiveIteratorIterator::rewind ();トップレベルの内部イテレータの先頭要素にイテレータを巻き戻す
bolean RecursiveIteratorIterator::valid ();現在の位置が有効かどうかをチェックする
mixed SimpleXMLIterator::current ();現在の SimpleXML エントリを返す
object SimpleXMLIterator::getChildren ();SimpleXML である場合、現在のエントリに対するイテレータを返す
bool SimpleXMLIterator::hasChildren ();現在のエントリが SimpleXML オブジェクトかどうかを返す
mixed SimpleXMLIterator::key ();現在の SimpleXML のキーを返す
void SimpleXMLIterator::next ();次のエントリに移動する
void SimpleXMLIterator::rewind ();SimpleXML を最初に巻き戻す
bool SimpleXMLIterator::valid ();SimpleXML がまだエントリを持っているかどうかをチェックする
array spl_classes ();利用可能な SPL クラスを返す
array sqlite_array_query ( resource db , string query , [ int result_type ] , [ bool decode_binary ] );指定したデータベースに対してクエリを実行し、配列を返す
void sqlite_busy_timeout ( resource database , int milliseconds );ビジータイムアウト時間を設定またはビジーハンドラを無効にする
int sqlite_changes ( resource db );直近のSQLステートメントにより変更されたレコード数を返す
void sqlite_close ( resource database );オープンされたSQLiteデータベースを閉じる
mixed sqlite_column ( resource result , mixed index_or_name , [ bool decode_binary ] );カレントの結果セットのレコードからカラムを1列取得する
bool sqlite_create_aggregate ( resource db , string function_name , mixed step_func , mixed finalize_func , [ int num_args ] );SQLステートメントで使用する集約UDFを登録する
bool sqlite_create_function ( resource db , string function_name , mixed callback , [ int num_args ] );SQLステートメントで使用するために"通常の"ユーザ定義関数を登録する
array sqlite_current ( resource result , [ int result_type ] , [ bool decode_binary ] );結果セットからカレントのレコードを配列として取得する
string sqlite_error_string ( int error_code );エラーコードの説明を返す
string sqlite_escape_string ( string item );クエリパラメータ用に文字列をエスケープする
array sqlite_fetch_array ( resource result , [ int result_type ] , [ bool decode_binary ] );結果セットから次のレコードを配列として取得する
string sqlite_fetch_string ( resource result , [ int result_type ] , [ bool decode_binary ] );結果セットから文字列として先頭カラムを取得する
string sqlite_field_name ( resource result , int field_index );特定のフィールドの名前を返す
bool sqlite_has_more ( resource result );まだレコードがあるかないかを返す
int sqlite_last_error ( resource db );データベースに関する直近のエラーコードを返す
int sqlite_last_insert_rowid ( resource db );直近に挿入されたレコードのrowidを返す
string sqlite_libencoding ();リンクされているSQLiteライブラリのエンコーディングを返す
string sqlite_libversion ();リンクされているSQLiteライブラリのバージョンを返す
bool sqlite_next ( resource result );次の行番号へシークする
int sqlite_num_fields ( resource result );結果セットのフィールド数を返す
int sqlite_num_rows ( resource result );結果セットのレコード数を返す
resource sqlite_open ( string filename , [ int mode ] , [ string &errmessage ] );SQLiteデータベースをオープンする。データベースが存在しない場合は作成する
resource sqlite_popen ( string filename , [ int mode ] , [ string &errmessage ] );SQLiteデータベースへの持続的ハンドルをオープンする。存在しない場合には、データベースを作成する
resource sqlite_query ( resource db , string query );指定したデータベースに対してクエリを実行し、結果ハンドルを返す
bool sqlite_rewind ( resource result );先頭レコード番号へシークする
bool sqlite_seek ( resource result , int rownum );特定のレコード番号へシークする
string sqlite_udf_decode_binary ( string data );UDFにパラメータとして渡されたバイナリデータをデコードする
string sqlite_udf_encode_binary ( string data );UDFから返す前にバイナリデータをエンコードする
resource sqlite_unbuffered_query ( resource db , string query );事前取得していないクエリを実行し、全てのデータをバッファリングする
resource stream_context_create ( array options );ストリームコンテキストを作成する
array stream_context_get_options ( resource stream|context );ストリーム / ラッパ / コンテキストに設定されているオプションを取得する
bool stream_context_set_option ( resource context|stream , string wrapper , string option , mixed value );ストリーム / ラッパ / コンテキストのオプションを設定する
bool stream_context_set_params ( resource stream|context , array params );ストリーム / ラッパ / コンテキストのパラメータを設定する
int stream_copy_to_stream ( resource source , resource dest , [ int maxlength ] );データをあるストリームから別のストリームにコピーする
bool stream_filter_append ( resource stream , string filtername , [ int read_write ] , [ mixed params ] );ストリームにフィルタを付加する
bool stream_filter_prepend ( resource stream , string filtername , [ int read_write ] , [ string params ] );フィルタをストリームに付加する
bool stream_filter_register ( string filtername , string classname );php_user_filter に由来するクラスとして実装されたストリームフィルタを登録する
array stream_get_filters ();登録されているフィルタのリストを取得する
string stream_get_line ( resource handle , int length , string ending );指定されたデリミタの位置までのデータを一行分としてストリームから読み込む
array stream_get_meta_data ( resource stream );ヘッダーあるいはメタデータをストリームまたはファイルポインタから取得する
array stream_get_transports ();登録されたソケットのトランスポートの一覧を取得する
array stream_get_wrappers ();登録されているストリームのラッパのリストを取得する
int stream_select ( resource &read , resource &write , resource &except , int tv_sec , [ int tv_usec ] );select() システムコールと同等の操作を、ストリームの配列に対して tv_sec と tv_usec で指定されたタイムアウト時間をもって行う
bool stream_set_blocking ( resource stream , int mode );ストリームのブロックモードを有効にする / 解除する
bool stream_set_timeout ( resource stream , int seconds , int microseconds );ストリームにタイムアウトを設定する
int stream_set_write_buffer ( resource stream , int buffer );指定されたストリームのファイルバッファリングを有効にする
resource stream_socket_accept ( resource server_socket , [ int timeout ] , [ string &peername ] );stream_socket_server で作られたソケットの接続を受け入れる
resource stream_socket_client ( string remote_socket , [ int &errno ] , [ string &errstr ] , [ float timeout ] , [ int flags ] , [ resource context ] );インターネットドメインまたは Unix ドメインのソケット接続を開く
string stream_socket_get_name ( resource handle , boolean want_peer );ローカルまたはリモートのソケットの名前を取得する
resource stream_socket_server ( string local_socket , [ int &errno ] , [ string &errstr ] , [ int flags ] , [ resource context ] );インターネットドメインまたは Unix ドメインのサーバソケットを作成する
bool stream_wrapper_register ( string protocol , string classname );PHP のクラスとして実装された URL ラッパーを登録する
string addcslashes ( string str , string charlist );C言語と同様にスラッシュで文字列をクォートする
string addslashes ( string str );文字列をスラッシュでクォートする
string bin2hex ( string str );バイナリデータを16進表現に変換する
string chr ( int ascii );特定の文字を返す
string chunk_split ( string string , [ int chunklen ] , [ string end ] );文字列をより小さな部分に分割する
string convert_cyr_string ( string str , string from , string to );Cyrillic 文字コードを他のコードに変換する
mixed count_chars ( string string , int [mode] );文字列で使用されている文字に関する情報を返す
int crc32 ( string str );文字列の crc32 多項式計算を行う
string crypt ( string str , string [salt] );文字列の一方向の暗号化(ハッシュ化)を行う
void echo ( string arg1 , [ string argn... ] );1つ以上の文字列を出力する
array explode ( string separator , string string , [ int limit ] );文字列を文字列により分割する
string get_html_translation_table ( int table , [ int quote_style ] );htmlspecialchars およびhtmlentities で使用される変換テーブルを返す
array get_meta_tags ( string filename , int [use_include_path] );ファイルから全てのメタタグ属性を展開し、配列を返す
string hebrev ( string hebrew_text , [ int max_chars_per_line ] );Hebrew 論理テキストを可視テキストに変換
string hebrevc ( string hebrew_text , [ int max_chars_per_line ] );Hebrew 論理テキストを改行を変換して可視テキストに変換する
string htmlentities ( string string , int [quote_style] , string [charset] );適用可能な文字を全てHTMLエンティティに変換する
string htmlspecialchars ( string string , int [quote_style] , [ string charset ] );特殊文字をHTMLエンティティに変換する
string implode ( string glue , array pieces );配列要素を文字列により連結する
int levenshtein ( string str1 , string str2 );二つの文字列のLevenshtein距離を計算する
array localeconv ();数値に関するフォーマット情報を得る
string ltrim ( string str , [ string charlist ] );文字列の最初から空白文字を取り除く
string md5_file ( string filename );指定したファイルのMD5ハッシュ値を計算する
string md5 ( string str , [ bool raw_output ] );文字列のmd5ハッシュ値を計算する
string metaphone ( string str );文字列の metaphone キーを計算する
string nl_langinfo ( int item );言語及びロケール情報を検索する
string nl2br ( string string );改行文字の前にHTMLの改行指定文字を挿入する
int ord ( string string );文字のASCII値を返す
void parse_str ( string str , [ array arr ] );文字列を処理し、変数に代入する
print ( string arg );文字列を出力する
void printf ( string format , [ mixed args ] );フォーマット済みの文字列を出力する
string quoted_printable_decode ( string str );quoted-printable文字列を8ビット文字列に変換
string quotemeta ( string str );メタ文字をクォートする
string rtrim ( string str , [ string charlist ] );文字列の最後から空白文字を削除する
string setlocale ( mixed category , string locale );ロケール情報をセットする
string sha1_file ( string filename , [ bool raw_output ] );あるファイルのsha1ハッシュを計算する
string sha1 ( string str , [ bool raw_output ] );ある文字列のsha1ハッシュを計算する
int similar_text ( string first , string second , [ float percent ] );二つの文字列の間の類似性を見積もる
string soundex ( string str );文字列のsoundexキーを計算する
string sprintf ( string format , [ mixed args ] );フォーマットされた文字列を返す
mixed sscanf ( string str , string format , [ string var1 ] );フォーマット文字列に基づき入力を処理する
string str_pad ( string input , int pad_length , [ string pad_string ] , [ int pad_type ] );文字列を固定長の他の文字列で埋める
string str_repeat ( string input_str , int multiplier );文字列を反復する
mixed str_replace ( mixed search , mixed replace , mixed subject , [ int count ] );文字列 subject 中の文字列 search を全て文字列replaceに置換する
string str_rot13 ( string str );文字列にrot13変換を行う
string str_shuffle ( string str );文字列をランダムにシャッフルする
int strcasecmp ( string str1 , string str2 );大文字小文字を区別しないバイナリにも使用可能な文字列比較を行う
string strchr ( string haystack , string needle );文字が最初に現れるところを探す
int strcmp ( string str1 , string str2 );バイナリでも使える文字列比較
int strcoll ( string str1 , string str2 );ロケールに基づく文字列比較
int strcspn ( string str1 , string str2 );マスクにマッチしない最初のセグメントの長さを返す
string strip_tags ( string str , [ string allowable_tags ] );文字列からHTMLおよびPHPタグを取り除く
string stripcslashes ( string str );addcslashesでクォートされた文字列をアンクォートする
int stripos ( string haystack , string needle , [ int offset ] );大文字/小文字を区別せずに文字列が最初に現れる位置を探す
string stripslashes ( string str );addslashesでクォートされた文字列のクォート部分を取り除く
string stristr ( string haystack , string needle );大文字小文字を区別しない strstr
int strlen ( string string );文字列の長さを得る
int strnatcasecmp ( string str1 , string str2 );"自然順"アルゴリズムにより大文字小文字を区別しない文字列比較を行う
int strnatcmp ( string str1 , string str2 );"自然順"アルゴリズムにより文字列比較を行う
int strncasecmp ( string str1 , string str2 , int len );バイナリ対応の大文字小文字を区別しない文字列比較を最初のn文字について行う
int strncmp ( string str1 , string str2 , int len );最初のn文字についてバイナリ対応の文字列比較を行う
int strpos ( string haystack , string needle , [ int offset ] );文字列が最初に現れる場所を見つける
string strrchr ( string haystack , string needle );文字列中に文字が最後に現れる場所を取得する
string strrev ( string string );文字列を逆順にする
int strrpos ( string haystack , char needle );文字列中に、ある文字が最後に現れる場所を探す
int strspn ( string str1 , string str2 );マスクに一致する最初のセグメントの長さを返す
string strstr ( string haystack , string needle );文字列が最初に現れる位置を見つける
string strtok ( string arg1 , string arg2 );文字列をトークンに分割する
string strtolower ( string string );文字列を小文字にする
string strtoupper ( string string );文字列を大文字にする
string strtr ( string str , string from , string to );特定の文字を変換する
int substr_count ( string haystrack , string needle );副文字列の出現関数を数える
string substr_replace ( string string , string replacement , int start , int [length] );文字列の一部を置換する
string substr ( string string , int start , int [length] );文字列の一部分を返す
string trim ( string str , [ string charlist ] );文字列の先頭および末尾にあるホワイトスペースを取り除く
string ucfirst ( string str );文字列の最初の文字を大文字にする
string ucwords ( string str );文字列の各単語の最初の文字を大文字にする
void vprintf ( string format , array args );フォーマットされた文字列を出力する
string vsprintf ( string format , array args );フォーマットされた文字列を返す
string wordwrap ( string str , int [width] , string [break] , int [cut] );文字列分割文字を使用して指定した文字数数に文字列を分割する
void swf_actiongeturl ( string url , string target );Shockwave FlashムービーからURLを得る
void swf_actiongotoframe ( int framenumber );フレームを実行した後、停止する
void swf_actiongotolabel ( string label );指定したラベルを有するフレームを表示する
void swf_actionnextframe ();フレームを一つ進める
void swf_actionplay ();カレントのフレームからflashムービーの実行を開始する
void swf_actionprevframe ();フレームを一つ戻す
void swf_actionsettarget ( string target );アクションのコンテキストを設定する
void swf_actionstop ();カレントのフレームでflashムービーの実行を終了する
void swf_actiontogglequality ();クオリティのローとハイを切替える
void swf_actionwaitforframe ( int framenumber , int skipcount );フレームがロードされていない場合にアクションをスキップする
void swf_addbuttonrecord ( int states , int shapeid , int depth );カレントのボタンの位置、外観、アクティブエリアを制御する
void swf_addcolor ( float r , float g , float b , float a );グローバル加算色を指定したrbga値に設定する
void swf_closefile ( int [return_file] );カレントのShockwave Flashファイルを閉じる
void swf_definebitmap ( int objid , string image_name );ビットマップを定義する
void swf_definefont ( int fontid , string fontname );フォントを定義する
void swf_defineline ( int objid , float x1 , float y1 , float x2 , float y2 , float width );線を定義する
void swf_definepoly ( int objid , array coords , int npoints , float width );ポリゴンを定義する
void swf_definerect ( int objid , float x1 , float y1 , float x2 , float y2 , float width );長方形を定義する
void swf_definetext ( int objid , string str , int docenter );テキスト文字列を定義する
void swf_endbutton ();カレントのボタンの定義を終了する
void swf_enddoaction ();カレントのアクションを終了する
void swf_endshape ();カレントの形状の定義を完結する
void swf_endsymbol ();シンボルの定義を終了する
void swf_fontsize ( float size );フォントの大きさを変更する
void swf_fontslant ( float slant );フォントの傾きを設定する
void swf_fonttracking ( float tracking );カレントのフォントのトラッキングを設定する
array swf_getbitmapinfo ( int bitmapid );ビットマップに関する情報を得る
array swf_getfontinfo ();大文字のAと小文字のxの高さをピクセル単位で得る
int swf_getframe ();カレントのフレームのフレーム番号を得る
void swf_labelframe ( string name );カレントのフレームにラベルを付ける
void swf_lookat ( float view_x , float view_y , float view_z , float reference_x , float reference_y , float reference_z , float twist );視点変換を定義する
void swf_modifyobject ( int depth , int how );オブジェクトを修正する
void swf_mulcolor ( float r , float g , float b , float a );グローバル乗算色を指定したrbga値に設定する
int swf_nextid ();次の未使用のオブジェクトIDを返す
void swf_oncondition ( int transition );アクションリストのトリガとして使用されるトランジションを定義する
void swf_openfile ( string filename , float width , float height , float framerate , float r , float g , float b );新規にShockwave Flashファイルをオープンする
void swf_ortho ( float xmin , float xmax , float ymin , float ymax , float zmin , float zmax );カレントのビューポートにおけるユーザー座標の直交マッピングを定義する
void swf_ortho2 ( float xmin , float xmax , float ymin , float ymax );ユーザ座標の2D直交マッピングをカレントのビューポイントに定義する
void swf_perspective ( float fovy , float aspect , float near , float far );遠近法による投影変換を定義する
void swf_placeobject ( int objid , int depth );オブジェクトを画面に配置する
void swf_polarview ( float dist , float azimuth , float incidence , float twist );極座標で視点を定義する
void swf_popmatrix ();以前の変換行列を回復する
void swf_posround ( int round );オブジェクトを配置または移動する際の変換時の丸め処理を有効または無効にする
void swf_pushmatrix ();カレントの変換行列をスタックに入れる
void swf_removeobject ( int depth );オブジェクトを削除する
void swf_rotate ( float angle , string axis );カレントの座標を回転する
void swf_scale ( float x , float y , float z );カレントの変換をスケリーングする
void swf_setfont ( int fontid );カレントのフォントを変更する
void swf_setframe ( int framenumber );指定したフレームに切替える
void swf_shapearc ( float x , float y , float r , float ang1 , float ang2 );円弧を描画する
void swf_shapecurveto ( float x1 , float y1 , float x2 , float y2 );2点間に2次ベジエ曲線を描画する
void swf_shapecurveto3 ( float x1 , float y1 , float x2 , float y2 , float x3 , float y3 );3次ベジエ曲線を描画する
void swf_shapefillbitmapclip ( int bitmapid );カレントの塗りつぶしモードをクリップ付きビットマップ
void swf_shapefillbitmaptile ( int bitmapid );カレントの塗りつぶしモードをタイル状のビットマップに設定する
void swf_shapefilloff ();塗りつぶしをオフにする
void swf_shapefillsolid ( float r , float g , float b , float a );カレントの塗りつぶし色を指定した色に設定する
void swf_shapelinesolid ( float r , float g , float b , float a , float width );カレントの行のスタイルを設定する
void swf_shapelineto ( float x , float y );線を描画する
void swf_shapemoveto ( float x , float y );カレントの位置を移動する
void swf_showframe ();カレントのフレームを表示する
void swf_startbutton ( int objid , int type );ボタンの定義を開始する
void swf_startdoaction ();カレントのフレームのアクションリストの記述を開始する
void swf_startshape ( int objid );複雑な形状を開始する
void swf_startsymbol ( int objid );シンボルを定義する
float swf_textwidth ( string str );文字列の幅を得る
void swf_translate ( float x , float y , float z );カレントの座標軸を変換する
void swf_viewport ( float xmin , float xmax , float ymin , float ymax );描画を行う範囲を選択する
int sybase_affected_rows ( int [link_identifier] );直近のクエリーで変更された行の数を得る
bool sybase_close ( int link_identifier );Sybase 接続を閉じます
int sybase_connect ( string servername , string username , string password , [ string charset ] );Sybase サーバー接続をオープンします
bool sybase_data_seek ( int result_identifier , int row_number );内部行ポインタを移動します
array sybase_fetch_array ( int result );行を配列として取り込みます
object sybase_fetch_field ( int result , [ int field_offset ] );フィールド情報を得ます
int sybase_fetch_object ( int result );行をオブジェクトとして取り込みます
array sybase_fetch_row ( int result );行を配列として得ます
int sybase_field_seek ( int result , int field_offset );フィールドオフセットを設定します
bool sybase_free_result ( int result );結果メモリを開放します
string sybase_get_last_message ();サーバーから直近のメッセージを返す
void sybase_min_client_severity ( int severity );クライアントのseverityを最小に設定する
void sybase_min_error_severity ( int severity );エラーのseverityを最小に設定する
void sybase_min_message_severity ( int severity );メッセージのチェックを最小に設定する
void sybase_min_server_severity ( int severity );サーバーチェックを最小に設定する
int sybase_num_fields ( int result );結果におけるフィールドの数を得ます
int sybase_num_rows ( int result );結果における行の数を得ます
int sybase_pconnect ( string servername , string username , string password , [ string charset ] );Sybaseの持続的な接続をオープンします
int sybase_query ( string query , int link_identifier );Sybase クエリーを送信します
string sybase_result ( int result , int row , mixed field );結果データを得ます
bool sybase_select_db ( string database_name , int link_identifier );Sybase データベースを選択します
string ob_tidyhandler ( string input , [ int mode ] );バッファを修正するための ob_start コールバック関数
int tidy_access_count ( tidy object );指定したドキュメントについて発生したTidyアクセシビリティ警告の数を返す
bool tidy_clean_repair ( tidy object );パースされたマークアップに設定に基く誤りの修正を行う
int tidy_config_count ( tidy object );指定したドキュメントについて発生した Tidy 設定エラーの数を返す
tidy tidy::__construct ( [ string filename ] , [ mixed config ] , [ string encoding ] , [ bool use_include_path ] );新規 Tidy オブジェクトを生成する
bool tidy_diagnose ( tidy object );パース、修正されたマークアップの診断を行う
int tidy_error_count ( tidy object );指定したドキュメントについて発生した Tidy エラーの数を返す
tidyNode tidy_get_body ( tidy object );Tidy パースツリーの <body> タグから始まる tidyNodeオブジェクトを返す
array tidy_get_config ( tidy object );現在の Tidy の設定を取得する
string tidy_get_error_buffer ( tidy object );指定したドキュメントのパースで発生した警告とエラーを返す
tidyNode tidy_get_head ( tidy object );Tidy パースツリーの <head> タグから始まる tidyNodeオブジェクトを返す
int tidy_get_html_ver ( tidy object );指定したドキュメントで検出された HTML バージョンを取得する
tidyNode tidy_get_html ( tidy object );Tidy パースツリーの <html> タグから始まる tidyNodeオブジェクトを返す
string tidy_get_opt_doc ( tidy object , string optname );与えられたオプション名に対するドキュメントを返す
string tidy_get_output ( tidy object );パースされた Tidy マークアップを表す文字列を返す
string tidy_get_release ();Tidy ライブラリのリリース日 (バージョン) を取得する
tidyNode tidy_get_root ( tidy object );Tidy パースツリーのルートを表す tidyNode を返す
int tidy_get_status ( tidy object );指定したドキュメントのステータスを取得する
mixed tidy_getopt ( tidy object , string option );Tidy ドキュメントについて指定した設定オプションの値を返す
bool tidy_is_xhtml ( tidy object );ドキュメントが XHTML ドキュメントかどうかを示す
bool tidy_is_xml ( tidy object );ドキュメントが一般的な XML ドキュメント (非 HTML/XHTML) かどうかを示す
void tidy_load_config ( string filename , string encoding );指定したエンコーディングで ASCII コードの Tidy 設定ファイルをロードする
array tidy_node->children ();子ノードの配列を返す
tidy_attr tidy_node->get_attr ( int attrib_id );指定された属性 ID を持つ属性を返す
array tidy_node->get_nodes ( int node_id );指定された ID を持つノード以下のノードの配列を返す
tidy_node tidy_node->next ();このノードの次の兄弟を返す
tidy_node tidy_node->prev ();このノードの前の兄弟を返す
tidy tidy_parse_file ( string filename , [ mixed config ] , [ string encoding ] , [ bool use_include_path ] );ファイルまたは URI にあるマークアップをパースする
tidy tidy_parse_string ( string input , [ mixed config ] , [ string encoding ] );文字列にストアされたドキュメントをパースする
string tidy_repair_file ( string filename , [ mixed config ] , [ string encoding ] , [ bool use_include_path ] );ファイルを修正し、それを文字列として返す
string tidy_repair_string ( string data , [ mixed config ] , [ string encoding ] );別途提供される設定ファイルを使用して文字列を修正する
bool tidy_reset_config ();Tidy の設定をデフォルト値に戻す
bool tidy_save_config ( string filename );現在の設定を名前が付けられたファイルに保存する
bool tidy_set_encoding ( string encoding );マークアップをパースする際の入力／出力エンコーディングを設定する
bool tidy_setopt ( string option , mixed value );指定した Tidy ドキュメントについての設定を更新する
int tidy_warning_count ( tidy object );指定したドキュメントについて発生した Tidy 警告の数を返す
bool tidyNode->hasChildren ();このノードが子を持つ場合 true を返す
bool tidyNode->hasSiblings ();このノードが兄弟ノードを持つ場合 true を返す
bool tidyNode->isAsp ();このノードが ASP コードの場合 true を返す
bool tidyNode->isComment ();このノードがコメントである場合 true を返す
bool tidyNode->isHtml ();このノードが HTML ドキュメントの場合 true を返す
bool tidyNode->isJste ();このノードが JSTE であるの場合 true を返す
bool tidyNode->isPhp ();このノードが PHP コードの場合 true を返す
bool tidyNode->isText ();このノードがテキスト (マークアップでない) の場合 true を返す
array token_get_all ( string source );指定したソースをPHPトークンに分割する
string token_name ( int token );指定したPHPトークンのシンボル名を取得する
int odbc_autocommit ( int connection_id , int [OnOff] );autocommitの動作をオンまたはオフにします
int odbc_binmode ( int result_id , int mode );バイナリカラムデータを処理する
void odbc_close_all ();全てのODBC接続を閉じます
void odbc_close ( int connection_identifier );ODBC 接続を閉じます
int odbc_columnprivileges ( int connection_id , string [qualifier] , string [owner] , string [table_name] , string [column_name] );カラムおよび付随する権限のリストを取得する際に使用する結果IDを返す
int odbc_columns ( int connection_id , string [qualifier] , string [owner] , string [table_name] , string [column_name] );指定したテーブルにあるカラム名のリストを取得し、その情報を有する結果IDを返す
int odbc_commit ( int connection_id );ODBCトランザクションをコミットします
int odbc_connect ( string dsn , string user , string password , int [cursor_type] );データソースに接続します
string odbc_cursor ( int result_id );カーソル名を得ます
int odbc_do ( int conn_id , string query );odbc_execの同義語
string odbc_error ( [ int connection_id ] );直近のエラーコードを得る
string odbc_errormsg ( [ int connection_id ] );直近のエラーメッセージを得る
int odbc_exec ( int connection_id , string query_string );SQL文を準備し、実行します
int odbc_execute ( int result_id , array [parameters_array] );準備された文を実行します
array odbc_fetch_array ( int result , [ int rownumber ] );連想配列として結果の行を取得する
bool odbc_fetch_into ( resource result_id , [ int rownumber ] , array result_array );1行文の結果を配列に取り込みます
object odbc_fetch_object ( int result , [ int rownumber ] );オブジェクトとして結果の行を取得する
bool odbc_fetch_row ( resource result_id , [ int row_number ] );行を取り込みます
string odbc_field_len ( int result_id , int field_number );フィールドの長さを得る
string odbc_field_name ( int result_id , int field_number );カラム名を得ます
int odbc_field_num ( int result_id , string field_name );カラム番号を返します
string odbc_field_precision ( int result_id , int field_number );odbc_field_lenの同義語
string odbc_field_scale ( int result_id , int field_number );フィールドの精度を得る
int odbc_field_type ( int result_id , int field_number );フィールドのデータ型を返します
int odbc_foreignkeys ( int connection_id , string pk_qualifier , string pk_owner , string pk_table , string fk_qualifier , string fk_owner , string fk_table );指定したテーブルの外部キーのリストまたは指定したテーブルの主キーを参照する他のテーブル外部キーのリストを返す
int odbc_free_result ( int result_id );結果を保持するリソースを開放します
int odbc_gettypeinfo ( int connection_id , int [data_type] );データソースによりサポートされるデータ型に関する情報を有する結果IDを返す
int odbc_longreadlen ( int result_id , int length );LONGカラムを処理します
bool odbc_next_result ( int result_id );複数の結果が利用可能などうか確認する
int odbc_num_fields ( int result_id );結果のカラム数を返します
int odbc_num_rows ( int result_id );結果における行数を返します
int odbc_pconnect ( string dsn , string user , string password , int [cursor_type] );持続的なデータベース接続を開きます
int odbc_prepare ( int connection_identifier , string query_string );実行用に文を準備します
int odbc_primarykeys ( int connection_id , string qualifier , string owner , string table );テーブルの主キーを有するカラムの名前を取得する際に使用可能な結果IDを返す
int odbc_procedurecolumns ( int connection_id , string [qualifier] , string [owner] , string [proc] , string [column] );プロシージャへのパラメータに関する情報を取得する
int odbc_procedures ( int connection_id , string [qualifier] , string [owner] , string [name] );指定したデータソースに保存されているプロシージャのリストを取得し、その情報を有する結果IDを返す
int odbc_result_all ( int result_id , string [format] );HTML テーブルとして結果を出力します
string odbc_result ( int result_id , mixed field );結果データを得ます
int odbc_rollback ( int connection_id );トランザクションをロールバックします
int odbc_setoption ( int id , int function , int option , int param );ODBCの設定を変更します。エラーが発生した場合にFALSE、その他の場合にTRUEを返します。
int odbc_specialcolumns ( int connection_id , int type , string qualifier , string owner , string table , int scope , int nullable );テーブルのレコードを特定する最適なカラムの組合せまたはレコードの値がトランザクションにより更新される際に自動的に更新されるカラムを返す
int odbc_statistics ( int connection_id , string qualifier , string owner , string table_name , int unique , int accuracy );テーブルに関する統計情報を取得する
int odbc_tableprivileges ( int connection_id , string [qualifier] , string [owner] , string [name] );各テーブルのリストおよび関連する権限のリストを取得する
int odbc_tables ( int connection_id , string [qualifier] , string [owner] , string [name] , string [types] );指定したデータソースに保存されたテーブルの名前のリストを取得し、その情報を有する結果IDを返す
string base64_decode ( string encoded_data );base64方式によりエンコードされたデータのデコード
string base64_encode ( string data );base64方式によるデータのエンコード
array get_meta_tags ( string filename , [ bool use_include_path ] );ファイル上のすべてのメタタグ情報を配列に展開する
array parse_url ( string url );URL を解釈し、その構成要素を返します
string rawurldecode ( string str );URL エンコードされた文字列をデコードする
string rawurlencode ( string str );RFC1738に基づきURLエンコードを行う
string urldecode ( string str );エンコードされたURL文字列のデコード
string urlencode ( string str );URL文字列のエンコード
bool empty ( mixed var );変数が空であるかどうかを検査する
float floatval ( mixed var );変数のfloat値を取得する
array get_defined_vars ();全ての定義済の変数を配列で返す
string get_resource_type ( resource handle );リソース型を返す
string gettype ( mixed var );変数の型を取得する
bool import_request_variables ( string types , [ string prefix ] );GET/POST/Cookie変数をグローバルスコープにインポートする
int intval ( mixed var , int [base] );変数の整数としての値を取得する
bool is_array ( mixed var );変数が配列かどうかを検査する
bool is_bool ( mixed var );変数がbooleanであるかを調べる
bool is_callable ( mixed var , [ bool syntax_only ] , [ string callable_name ] );引数が有効なコール可能な構造であるかどうかを調べる
bool is_float ( mixed var );変数がfloatかどうか調べる
bool is_int ( mixed var );変数が整数かどうかを検査する
bool is_null ( mixed var );変数が NULLかどうか調べる
bool is_numeric ( mixed var );指定した変数が数字または数値文字列であるかを調べる
bool is_object ( mixed var );変数がオブジェクトかどうかを検査する
bool is_resource ( mixed var );変数がリソースかどうかを調べる
bool is_scalar ( mixed var );変数がスカラーかどうかを調べる
bool is_string ( mixed var );変数が文字列かどうかを検査する
int isset ( mixed var );変数がセットされているかどうかを検査する
bool print_r ( mixed expression , [ bool return ] );指定した変数に関する情報を解りやすく出力する
string serialize ( mixed value );値の保存可能な表現を生成する
bool settype ( mixed var , string type );変数の型をセットする
string strval ( mixed var );変数の文字列としての値を得ます
mixed unserialize ( string str );保存用表現から PHP の値を生成する
void unset ( mixed var , mixed [var] , [...] );指定した変数の割当を解除する
void var_dump ( mixed expression , [ mixed expression ] , [ ... ] );指定した変数に関する情報をダンプする
mixed var_export ( mixed expression , [ int return ] );変数の文字列表現を出力または返す
bool vpopmail_add_alias_domain_ex ( string olddomain , string newdomain );既存の仮想ドメインにエイリアスを追加する
bool vpopmail_add_alias_domain ( string domain , string aliasdomain );仮想ドメインへのエイリアスを追加する
bool vpopmail_add_domain_ex ( string domain , string passwd , [ string quota ] , [ string bounce ] , [ bool apop ] );新規に仮想ドメインを追加する
bool vpopmail_add_domain ( string domain , string dir , int uid , int gid );仮想ドメインを新たに追加する
bool vpopmail_add_user ( string user , string domain , string password , [ string gecos ] , [ bool apop ] );指定した仮想ドメインに新規ユーザを追加する
bool vpopmail_alias_add ( string user , string domain , string alias );仮想エイリアスを追加する
bool vpopmail_alias_del_domain ( string domain );あるドメインに関する仮想エイリアスを全て削除する
bool vpopmail_alias_del ( string user , string domain );あるユーザの仮想エイリアスを全て削除する
array vpopmail_alias_get_all ( string domain );あるドメインに関するエイリアスを全て取得する
array vpopmail_alias_get ( string alias , string domain );あるドメインに関するエイリアスを取得する
bool vpopmail_auth_user ( string user , string domain , string password , [ string apop ] );ユーザ名/ドメイン/パスワードの認証を試み、true/falseを返す
bool vpopmail_del_domain_ex ( string domain );仮想ドメインを削除する
bool vpopmail_del_domain ( string domain );仮想ドメインを削除する
bool vpopmail_del_user ( string user , string domain );仮想ドメインからユーザを削除する
string vpopmail_error ();直近のvpopmailエラーに関するエラーメッセージを取得する
bool vpopmail_passwd ( string user , string domain , string password );仮想ユーザのパスワードを変更する
bool vpopmail_set_user_quota ( string user , string domain , string quota );仮想ユーザの容量制限(クオータ)を設定する
int w32api_deftype ( string typename , string member1_type , string member1_name );他のw32api_functionsで使用するために型を定義する
resource w32api_init_dtype ( string typename , mixed val1 , mixed val2 );データ型typenameのインスタンスを作成し、val1, val2, 関数の値で埋める
mixed w32api_invoke_function ( string funcname );関数名の後ろで指定された引数を指定して関数funcnameを実行する
bool w32api_register_function ( string libary , string function_name );PHPを保持するライブラリから関数function_nameを登録する
void w32api_set_call_method ( int method );カレントメソッドの使用値を設定する
wddx_add_vars ( int packet_id , mixed name_var , mixed [...] );指定したIDのWDDXパケットを追加する
mixed wddx_deserialize ( string packet );シリアル化された WDDX パケットを元に戻す
string wddx_packet_end ( int packet_id );指定した ID の WDDX パケットを終了する
int wddx_packet_start ( string [comment] );新規の WDDX パケットを内部の構造体を用いて開始する
string wddx_serialize_value ( mixed var , string [comment] );値をWDDXパケットにシリアル化する
string wddx_serialize_vars ( mixed var_name , mixed [...] );変数を WDDX パケットにシリアル化する
string utf8_decode ( string data );UTF-8 エンコードされたISO-8859-1文字列をシングルバイトのISO-8859-1 に変換する
string utf8_encode ( string data );ISO-8859-1 文字列を UTF-8 にエンコードする
string xml_error_string ( int code );XML パーサのエラー文字列を得る
int xml_get_current_byte_index ( int parser );カレントの XML パーサのバイトインデックスを得る
int xml_get_current_column_number ( int parser );XML パーサのカレントのカラム番号を得る
int xml_get_current_line_number ( int parser );XML パーサのカレントの行番号を得る
int xml_get_error_code ( int parser );XML パーサのエラーコードを得る
int xml_parse_into_struct ( int parser , string data , array &values , array &index );配列構造体にXMLデータを処理する
int xml_parse ( int parser , string data , int [isFinal] );XML ドキュメントの処理を開始する
int xml_parser_create_ns ( [ string encoding ] , [ string sep ] );XMLパーサを生成する
int xml_parser_create ( string [encoding] );XML パーサを作成する
string xml_parser_free ( int parser );XML パーサを解放する
mixed xml_parser_get_option ( int parser , int option );XML パーサからオプションを得る
int xml_parser_set_option ( int parser , int option , mixed value );XML パーサのオプションを設定する
int xml_set_character_data_handler ( int parser , string handler );文字データハンドラを設定する
int xml_set_default_handler ( int parser , string handler );デフォルトのハンドラを設定する
int xml_set_element_handler ( int parser , string startElementHandler , string endElementHandler );start および end 要素のハンドラを設定する
int xml_set_end_namespace_decl_handler ( int pind , string hdl );名前空間終了ハンドラを設定する
int xml_set_external_entity_ref_handler ( int parser , string handler );外部リファレンスハンドラを設定する
int xml_set_notation_decl_handler ( int parser , string handler );表記法宣言ハンドラを設定する
void xml_set_object ( int parser , object &object );オブジェクト内部でXMLパーサを使用する
int xml_set_processing_instruction_handler ( int parser , string handler );処理命令 (PI) 用ハンドラを設定する
int xml_set_start_namespace_decl_handler ( int pind , string hdl );名前空間開始ハンドラを設定する
int xml_set_unparsed_entity_decl_handler ( int parser , string handler );処理されないエンティティ宣言用ハンドラを設定する
array xmlrpc_decode_request ( string xml , string method , [ string encoding ] );XMLをネーティブなPHP型にデコードする
array xmlrpc_decode ( string xml , [ string encoding ] );XMLをネーティブなPHP型にデコードする
string xmlrpc_encode_request ( string method , mixed params );メソッドリクエスト用のXMLを生成する
string xmlrpc_encode ( mixed value );PHPの値に関するXMLを生成する
string xmlrpc_get_type ( mixed value );PHPの値に関するxmlrpc型を取得する。特にbase64及びdatetime文字列で有用
array xmlrpc_parse_method_descriptions ( string xml );メソッド説明のリストにXMLをデコードする
int xmlrpc_server_add_introspection_data ( resource server , array desc );introspectionドキュメントを追加する
mixed xmlrpc_server_call_method ( resource server , string xml , mixed user_data , [ array output_options ] );XMLリクエストをパースし、メソッドをコールする
resource xmlrpc_server_create ();xmlrpcサーバを作成する
void xmlrpc_server_destroy ( resource server );サーバリソースを破棄する
bool xmlrpc_server_register_introspection_callback ( resource server , string function );ドキュメントを生成するPHP関数を登録する
bool xmlrpc_server_register_method ( resource server , string method_name , string function );メソッド名が一致するメソッドリソースにPHP関数を登録する
bool xmlrpc_set_type ( string value , string type );PHP文字列型用にxmlrpc型、base64またはdatetimeを設定する
string getParameter ( string namespaceURI , string localName );パラメータの値を取得する
bool hasExsltSupport ();PHP が EXSLT をサポートしているかどうかを判定する
void importStylesheet ( DOMDocument stylesheet );スタイルシートを取り込む
void registerPHPFunctions ( [ mixed restrict ] );PHP関数を XSLT 関数として利用できるようにする
bool removeParameter ( string namespaceURI , string localName );パラメータを削除する
bool setParameter ( string namespace , mixed name , [ string value ] );パラメータの値を設定する
DOMDocument transformToDoc ( DOMNode doc );DOMDocument に変換する
int transformToURI ( DOMDocument doc , string uri );URI に変換する
string transformToXML ( DOMDocument doc );XML に変換する
string xslt_backend_info ();バックエンドのコンパイル設定についての情報を返す
string xslt_backend_name ();バックエンドの名前を返す
string xslt_backend_version ();Sablotron のバージョン番号を返す
resource xslt_create ();新規のXSLTプロセッサを作成する
int xslt_errno ( resource xh );カレントエラー番号を返す
mixed xslt_error ( resource xh );カレントのエラー文字列を返す
void xslt_free ( resource xh );XSLT プロセッサを開放する
int xslt_getopt ( resource processor );XSL プロセッサのオプションを取得する
mixed xslt_process ( resource xh , string xmlcontainer , string xslcontainer , [ string resultcontainer ] , [ array arguments ] , [ array parameters ] );XSLデータを有する文字列によりXMLデータを変換する
void xslt_set_base ( resource xh , string uri );全てのXSLT変換用の基準URIを設定する
void xslt_set_encoding ( resource xh , string encoding );XMLドキュメントをパースするエンコーディングを設定する
void xslt_set_error_handler ( resource xh , mixed handler );XSLTプロセッサ用のエラーハンドラを設定する
void xslt_set_log ( resource xh , mixed log );ログメッセージを書き込むためのログファイルを設定する
int xslt_set_object ( resource processor , object obj );コールバック関数を解決するためのオブジェクトを設定する
void xslt_set_sax_handler ( resource xh , array handlers );XSLTプロセッサに SAX ハンドラを設定する
void xslt_set_sax_handlers ( resource processor , array handlers );XMLドキュメントを処理する際にコールされる SAX ハンドラを設定する
void xslt_set_scheme_handler ( resource xh , array handlers );XSLTプロセッサ用にスキーマハンドラを設定する
void xslt_set_scheme_handlers ( resource processor , array handlers );XSLTプロセッサに関するスキーマハンドラを設定する
int xslt_setopt ( resource processor , int newmask );与えられた XSL プロセッサにオプションを設定する
int yaz_addinfo ( int id );詳細なエラー情報を返す
int yaz_ccl_conf ( int id , array config );CCLパーサを設定する
int yaz_ccl_parse ( int id , string query , array & result );CCLパーサを起動する
int yaz_close ( int id );YAZ接続をクローズする
int yaz_connect ( string zurl , [ mixed options ] );ターゲットへの接続およびZ接続を準備する。
int yaz_database ( int id , string databases );セッション内のデータベースを指定する
int yaz_element ( int id , string elementset );取得時に要素集合の名前を指定する
int yaz_errno ( int id );エラー番号を返す
int yaz_error ( int id );エラーの内容を返す
int yaz_hits ( int id );直近の検索に関するヒット数を返す
int yaz_itemorder ( array args );ILLリクエストパッケージを関してZ39.50 Item Orderを準備する
int yaz_present ();(Z39.50による)取得の準備を行う
int yaz_range ( int id , int start , int number );取得するレコードの最大数を指定する
int yaz_record ( int id , int pos , string type );レコードを返す
array yaz_scan_result ( int id , [ array & result ] );スキャンリクエストの結果を返す
int yaz_scan ( int id , string type , string startterm , [ array flags ] );スキャンの準備をする
int yaz_search ( int id , string type , string query );検索を準備する
int yaz_sort ( int id , string criteria );ソートの基準を設定する
int yaz_syntax ( int id , string syntax );取得用に適当なレコード構文を指定する
int yaz_wait ( [ array options ] );Z39.50リクエストが完了するまで待つ
void zip_close ( resource zip );Zipファイルアーカイブを閉じる
() zip_entry_close ( resource zip_entry );ディレクトリエントリをクローズ
int zip_entry_compressedsize ( resource zip_entry );ディレクトリエントリの圧縮時のサイズを取得す
string zip_entry_compressionmethod ( resource zip_entry );ディレクトリエントリの圧縮方法を取得する
int zip_entry_filesize ( resource zip_entry );ディレクトリエントリの実際のファイルサイズを取得する
string zip_entry_name ( resource zip_entry );ディレクトリエントリの名前を取得する
bool zip_entry_open ( resource zip , resource zip_entry , [ string mode ] );読込み用にディレクトリエントリをオープンする
string zip_entry_read ( resource zip_entry , [ int length ] );オープンされたディレクトリエントリから読み込む
resource zip_open ( string filename );Zipファイルアーカイブをオープンする
resource zip_read ( resource zip );Zipファイルアーカイブの中の次のエントリを読み込む
int gzclose ( int zp );開かれたgzファイルへのポインタを閉じる
string gzcompress ( string data , int [level] );文字列をdeflate圧縮する
string gzdeflate ( string data , [ int level ] );文字列を deflate 圧縮する
string gzencode ( string data , [ int level ] );gzip 圧縮された文字列を作成
int gzeof ( int zp );gz ファイルポインタにおいてファイル終端を調べる
array gzfile ( string filename , int [use_include_path] );gzファイル全体を配列に読み込む
string gzgetc ( int zp );gz ファイルへのポインタから文字を得る
string gzgets ( int zp , int length );ファイルポインタから 1 行を得る
string gzgetss ( int zp , int length , string [allowable_tags] );gzファイルへのポインタから1行を得て、HTMLタグを取り除く
string gzinflate ( string data , [ int length ] );deflate圧縮された文字列を解凍する
int gzopen ( string filename , string mode , [ int use_include_path ] );gz ファイルを開く
int gzpassthru ( int zp );gzファイルへのポインタから残りのデータ全部を出力する
int gzputs ( int zp , string str , int [length] );gz ファイルへのポインタに書き込む
string gzread ( int zp , int length );バイナリ対応のgzファイル読み込み
int gzrewind ( int zp );gz ファイルポインタの示す位置を元に戻す
int gzseek ( int zp , int offset );gz ファイルポインタの位置を移動する
int gztell ( int zp );gzファイルポインタの読み込み/書き込み位置を返します
string gzuncompress ( string data , int [length] );deflate圧縮された文字列を解凍する
int gzwrite ( int zp , string string , int [length] );バイナリ対応のgzファイル書き込み
int readgzfile ( string filename , int [use_include_path] );gz ファイルを出力する
mixed json_decode ( string $json [, bool $assoc = false [, int $depth = 512 [, int $options = 0 ]]] );JSON 文字列をデコードする
string json_encode ( mixed $value [, int $options = 0 [, int $depth = 512 ]] );値を JSON 形式にして返す
string json_last_error_msg ( void );直近の json_encode() や json_decode() の呼び出しのエラー文字列を返す
int json_last_error ( void );直近に発生したエラーを返す
